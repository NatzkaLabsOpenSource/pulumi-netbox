// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tenancy

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts#contactassignments_1):
//
// > Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/tenancy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := tenancy.NewContact(ctx, "test", &tenancy.ContactArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			testContactRole, err := tenancy.NewContactRole(ctx, "test", &tenancy.ContactRoleArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			// Assumes that a device with id 123 exists
//			_, err = tenancy.NewContactAssignment(ctx, "test", &tenancy.ContactAssignmentArgs{
//				ContentType: pulumi.String("dcim.device"),
//				ObjectId:    pulumi.Int(123),
//				ContactId:   test.ID(),
//				RoleId:      testContactRole.ID(),
//				Priority:    pulumi.String("primary"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ContactAssignment struct {
	pulumi.CustomResourceState

	ContactId   pulumi.IntOutput    `pulumi:"contactId"`
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	ObjectId    pulumi.IntOutput    `pulumi:"objectId"`
	// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	RoleId   pulumi.IntOutput       `pulumi:"roleId"`
}

// NewContactAssignment registers a new resource with the given unique name, arguments, and options.
func NewContactAssignment(ctx *pulumi.Context,
	name string, args *ContactAssignmentArgs, opts ...pulumi.ResourceOption) (*ContactAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactId == nil {
		return nil, errors.New("invalid value for required argument 'ContactId'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContactAssignment
	err := ctx.RegisterResource("netbox:tenancy/contactAssignment:ContactAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContactAssignment gets an existing ContactAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContactAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactAssignmentState, opts ...pulumi.ResourceOption) (*ContactAssignment, error) {
	var resource ContactAssignment
	err := ctx.ReadResource("netbox:tenancy/contactAssignment:ContactAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContactAssignment resources.
type contactAssignmentState struct {
	ContactId   *int    `pulumi:"contactId"`
	ContentType *string `pulumi:"contentType"`
	ObjectId    *int    `pulumi:"objectId"`
	// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
	Priority *string `pulumi:"priority"`
	RoleId   *int    `pulumi:"roleId"`
}

type ContactAssignmentState struct {
	ContactId   pulumi.IntPtrInput
	ContentType pulumi.StringPtrInput
	ObjectId    pulumi.IntPtrInput
	// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
	Priority pulumi.StringPtrInput
	RoleId   pulumi.IntPtrInput
}

func (ContactAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactAssignmentState)(nil)).Elem()
}

type contactAssignmentArgs struct {
	ContactId   int    `pulumi:"contactId"`
	ContentType string `pulumi:"contentType"`
	ObjectId    int    `pulumi:"objectId"`
	// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
	Priority *string `pulumi:"priority"`
	RoleId   int     `pulumi:"roleId"`
}

// The set of arguments for constructing a ContactAssignment resource.
type ContactAssignmentArgs struct {
	ContactId   pulumi.IntInput
	ContentType pulumi.StringInput
	ObjectId    pulumi.IntInput
	// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
	Priority pulumi.StringPtrInput
	RoleId   pulumi.IntInput
}

func (ContactAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactAssignmentArgs)(nil)).Elem()
}

type ContactAssignmentInput interface {
	pulumi.Input

	ToContactAssignmentOutput() ContactAssignmentOutput
	ToContactAssignmentOutputWithContext(ctx context.Context) ContactAssignmentOutput
}

func (*ContactAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactAssignment)(nil)).Elem()
}

func (i *ContactAssignment) ToContactAssignmentOutput() ContactAssignmentOutput {
	return i.ToContactAssignmentOutputWithContext(context.Background())
}

func (i *ContactAssignment) ToContactAssignmentOutputWithContext(ctx context.Context) ContactAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactAssignmentOutput)
}

// ContactAssignmentArrayInput is an input type that accepts ContactAssignmentArray and ContactAssignmentArrayOutput values.
// You can construct a concrete instance of `ContactAssignmentArrayInput` via:
//
//	ContactAssignmentArray{ ContactAssignmentArgs{...} }
type ContactAssignmentArrayInput interface {
	pulumi.Input

	ToContactAssignmentArrayOutput() ContactAssignmentArrayOutput
	ToContactAssignmentArrayOutputWithContext(context.Context) ContactAssignmentArrayOutput
}

type ContactAssignmentArray []ContactAssignmentInput

func (ContactAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactAssignment)(nil)).Elem()
}

func (i ContactAssignmentArray) ToContactAssignmentArrayOutput() ContactAssignmentArrayOutput {
	return i.ToContactAssignmentArrayOutputWithContext(context.Background())
}

func (i ContactAssignmentArray) ToContactAssignmentArrayOutputWithContext(ctx context.Context) ContactAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactAssignmentArrayOutput)
}

// ContactAssignmentMapInput is an input type that accepts ContactAssignmentMap and ContactAssignmentMapOutput values.
// You can construct a concrete instance of `ContactAssignmentMapInput` via:
//
//	ContactAssignmentMap{ "key": ContactAssignmentArgs{...} }
type ContactAssignmentMapInput interface {
	pulumi.Input

	ToContactAssignmentMapOutput() ContactAssignmentMapOutput
	ToContactAssignmentMapOutputWithContext(context.Context) ContactAssignmentMapOutput
}

type ContactAssignmentMap map[string]ContactAssignmentInput

func (ContactAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactAssignment)(nil)).Elem()
}

func (i ContactAssignmentMap) ToContactAssignmentMapOutput() ContactAssignmentMapOutput {
	return i.ToContactAssignmentMapOutputWithContext(context.Background())
}

func (i ContactAssignmentMap) ToContactAssignmentMapOutputWithContext(ctx context.Context) ContactAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactAssignmentMapOutput)
}

type ContactAssignmentOutput struct{ *pulumi.OutputState }

func (ContactAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactAssignment)(nil)).Elem()
}

func (o ContactAssignmentOutput) ToContactAssignmentOutput() ContactAssignmentOutput {
	return o
}

func (o ContactAssignmentOutput) ToContactAssignmentOutputWithContext(ctx context.Context) ContactAssignmentOutput {
	return o
}

func (o ContactAssignmentOutput) ContactId() pulumi.IntOutput {
	return o.ApplyT(func(v *ContactAssignment) pulumi.IntOutput { return v.ContactId }).(pulumi.IntOutput)
}

func (o ContactAssignmentOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContactAssignment) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

func (o ContactAssignmentOutput) ObjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ContactAssignment) pulumi.IntOutput { return v.ObjectId }).(pulumi.IntOutput)
}

// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
func (o ContactAssignmentOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactAssignment) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o ContactAssignmentOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *ContactAssignment) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

type ContactAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ContactAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContactAssignment)(nil)).Elem()
}

func (o ContactAssignmentArrayOutput) ToContactAssignmentArrayOutput() ContactAssignmentArrayOutput {
	return o
}

func (o ContactAssignmentArrayOutput) ToContactAssignmentArrayOutputWithContext(ctx context.Context) ContactAssignmentArrayOutput {
	return o
}

func (o ContactAssignmentArrayOutput) Index(i pulumi.IntInput) ContactAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContactAssignment {
		return vs[0].([]*ContactAssignment)[vs[1].(int)]
	}).(ContactAssignmentOutput)
}

type ContactAssignmentMapOutput struct{ *pulumi.OutputState }

func (ContactAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContactAssignment)(nil)).Elem()
}

func (o ContactAssignmentMapOutput) ToContactAssignmentMapOutput() ContactAssignmentMapOutput {
	return o
}

func (o ContactAssignmentMapOutput) ToContactAssignmentMapOutputWithContext(ctx context.Context) ContactAssignmentMapOutput {
	return o
}

func (o ContactAssignmentMapOutput) MapIndex(k pulumi.StringInput) ContactAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContactAssignment {
		return vs[0].(map[string]*ContactAssignment)[vs[1].(string)]
	}).(ContactAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactAssignmentInput)(nil)).Elem(), &ContactAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactAssignmentArrayInput)(nil)).Elem(), ContactAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactAssignmentMapInput)(nil)).Elem(), ContactAssignmentMap{})
	pulumi.RegisterOutputType(ContactAssignmentOutput{})
	pulumi.RegisterOutputType(ContactAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ContactAssignmentMapOutput{})
}
