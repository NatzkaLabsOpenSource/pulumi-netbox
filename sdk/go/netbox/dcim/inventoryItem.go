// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/inventoryitem/):
//
// > Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. They are intended to be used primarily for inventory purposes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Note that some terraform code is not included in the example for brevity
//			test, err := dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:         pulumi.String("%[1]s"),
//				DeviceTypeId: pulumi.Any(testNetboxDeviceType.Id),
//				TenantId:     pulumi.Any(testNetboxTenant.Id),
//				RoleId:       pulumi.Any(testNetboxDeviceRole.Id),
//				SiteId:       pulumi.Any(testNetboxSite.Id),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceRearPort, err := dcim.NewDeviceRearPort(ctx, "test", &dcim.DeviceRearPortArgs{
//				DeviceId:      test.ID(),
//				Name:          pulumi.String("rear port"),
//				Type:          pulumi.String("8p8c"),
//				Positions:     pulumi.Int(1),
//				MarkConnected: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			parent, err := dcim.NewInventoryItem(ctx, "parent", &dcim.InventoryItemArgs{
//				DeviceId: test.ID(),
//				Name:     pulumi.String("Parent Item"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewInventoryItem(ctx, "test", &dcim.InventoryItemArgs{
//				DeviceId:      test.ID(),
//				Name:          pulumi.String("Child Item"),
//				ParentId:      parent.ID(),
//				ComponentType: pulumi.String("dcim.rearport"),
//				ComponentId:   testDeviceRearPort.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InventoryItem struct {
	pulumi.CustomResourceState

	AssetTag pulumi.StringPtrOutput `pulumi:"assetTag"`
	// Required when `componentType` is set.
	ComponentId   pulumi.IntPtrOutput    `pulumi:"componentId"`
	ComponentType pulumi.StringPtrOutput `pulumi:"componentType"`
	CustomFields  pulumi.StringMapOutput `pulumi:"customFields"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	DeviceId      pulumi.IntOutput       `pulumi:"deviceId"`
	// Defaults to `false`.
	Discovered     pulumi.BoolPtrOutput     `pulumi:"discovered"`
	Label          pulumi.StringPtrOutput   `pulumi:"label"`
	ManufacturerId pulumi.IntPtrOutput      `pulumi:"manufacturerId"`
	Name           pulumi.StringOutput      `pulumi:"name"`
	ParentId       pulumi.IntPtrOutput      `pulumi:"parentId"`
	PartId         pulumi.StringPtrOutput   `pulumi:"partId"`
	RoleId         pulumi.IntPtrOutput      `pulumi:"roleId"`
	Serial         pulumi.StringPtrOutput   `pulumi:"serial"`
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewInventoryItem registers a new resource with the given unique name, arguments, and options.
func NewInventoryItem(ctx *pulumi.Context,
	name string, args *InventoryItemArgs, opts ...pulumi.ResourceOption) (*InventoryItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InventoryItem
	err := ctx.RegisterResource("netbox:dcim/inventoryItem:InventoryItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventoryItem gets an existing InventoryItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventoryItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryItemState, opts ...pulumi.ResourceOption) (*InventoryItem, error) {
	var resource InventoryItem
	err := ctx.ReadResource("netbox:dcim/inventoryItem:InventoryItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InventoryItem resources.
type inventoryItemState struct {
	AssetTag *string `pulumi:"assetTag"`
	// Required when `componentType` is set.
	ComponentId   *int              `pulumi:"componentId"`
	ComponentType *string           `pulumi:"componentType"`
	CustomFields  map[string]string `pulumi:"customFields"`
	Description   *string           `pulumi:"description"`
	DeviceId      *int              `pulumi:"deviceId"`
	// Defaults to `false`.
	Discovered     *bool    `pulumi:"discovered"`
	Label          *string  `pulumi:"label"`
	ManufacturerId *int     `pulumi:"manufacturerId"`
	Name           *string  `pulumi:"name"`
	ParentId       *int     `pulumi:"parentId"`
	PartId         *string  `pulumi:"partId"`
	RoleId         *int     `pulumi:"roleId"`
	Serial         *string  `pulumi:"serial"`
	Tags           []string `pulumi:"tags"`
}

type InventoryItemState struct {
	AssetTag pulumi.StringPtrInput
	// Required when `componentType` is set.
	ComponentId   pulumi.IntPtrInput
	ComponentType pulumi.StringPtrInput
	CustomFields  pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	DeviceId      pulumi.IntPtrInput
	// Defaults to `false`.
	Discovered     pulumi.BoolPtrInput
	Label          pulumi.StringPtrInput
	ManufacturerId pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	ParentId       pulumi.IntPtrInput
	PartId         pulumi.StringPtrInput
	RoleId         pulumi.IntPtrInput
	Serial         pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
}

func (InventoryItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryItemState)(nil)).Elem()
}

type inventoryItemArgs struct {
	AssetTag *string `pulumi:"assetTag"`
	// Required when `componentType` is set.
	ComponentId   *int              `pulumi:"componentId"`
	ComponentType *string           `pulumi:"componentType"`
	CustomFields  map[string]string `pulumi:"customFields"`
	Description   *string           `pulumi:"description"`
	DeviceId      int               `pulumi:"deviceId"`
	// Defaults to `false`.
	Discovered     *bool    `pulumi:"discovered"`
	Label          *string  `pulumi:"label"`
	ManufacturerId *int     `pulumi:"manufacturerId"`
	Name           *string  `pulumi:"name"`
	ParentId       *int     `pulumi:"parentId"`
	PartId         *string  `pulumi:"partId"`
	RoleId         *int     `pulumi:"roleId"`
	Serial         *string  `pulumi:"serial"`
	Tags           []string `pulumi:"tags"`
}

// The set of arguments for constructing a InventoryItem resource.
type InventoryItemArgs struct {
	AssetTag pulumi.StringPtrInput
	// Required when `componentType` is set.
	ComponentId   pulumi.IntPtrInput
	ComponentType pulumi.StringPtrInput
	CustomFields  pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	DeviceId      pulumi.IntInput
	// Defaults to `false`.
	Discovered     pulumi.BoolPtrInput
	Label          pulumi.StringPtrInput
	ManufacturerId pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	ParentId       pulumi.IntPtrInput
	PartId         pulumi.StringPtrInput
	RoleId         pulumi.IntPtrInput
	Serial         pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
}

func (InventoryItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryItemArgs)(nil)).Elem()
}

type InventoryItemInput interface {
	pulumi.Input

	ToInventoryItemOutput() InventoryItemOutput
	ToInventoryItemOutputWithContext(ctx context.Context) InventoryItemOutput
}

func (*InventoryItem) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryItem)(nil)).Elem()
}

func (i *InventoryItem) ToInventoryItemOutput() InventoryItemOutput {
	return i.ToInventoryItemOutputWithContext(context.Background())
}

func (i *InventoryItem) ToInventoryItemOutputWithContext(ctx context.Context) InventoryItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemOutput)
}

// InventoryItemArrayInput is an input type that accepts InventoryItemArray and InventoryItemArrayOutput values.
// You can construct a concrete instance of `InventoryItemArrayInput` via:
//
//	InventoryItemArray{ InventoryItemArgs{...} }
type InventoryItemArrayInput interface {
	pulumi.Input

	ToInventoryItemArrayOutput() InventoryItemArrayOutput
	ToInventoryItemArrayOutputWithContext(context.Context) InventoryItemArrayOutput
}

type InventoryItemArray []InventoryItemInput

func (InventoryItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryItem)(nil)).Elem()
}

func (i InventoryItemArray) ToInventoryItemArrayOutput() InventoryItemArrayOutput {
	return i.ToInventoryItemArrayOutputWithContext(context.Background())
}

func (i InventoryItemArray) ToInventoryItemArrayOutputWithContext(ctx context.Context) InventoryItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemArrayOutput)
}

// InventoryItemMapInput is an input type that accepts InventoryItemMap and InventoryItemMapOutput values.
// You can construct a concrete instance of `InventoryItemMapInput` via:
//
//	InventoryItemMap{ "key": InventoryItemArgs{...} }
type InventoryItemMapInput interface {
	pulumi.Input

	ToInventoryItemMapOutput() InventoryItemMapOutput
	ToInventoryItemMapOutputWithContext(context.Context) InventoryItemMapOutput
}

type InventoryItemMap map[string]InventoryItemInput

func (InventoryItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryItem)(nil)).Elem()
}

func (i InventoryItemMap) ToInventoryItemMapOutput() InventoryItemMapOutput {
	return i.ToInventoryItemMapOutputWithContext(context.Background())
}

func (i InventoryItemMap) ToInventoryItemMapOutputWithContext(ctx context.Context) InventoryItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemMapOutput)
}

type InventoryItemOutput struct{ *pulumi.OutputState }

func (InventoryItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryItem)(nil)).Elem()
}

func (o InventoryItemOutput) ToInventoryItemOutput() InventoryItemOutput {
	return o
}

func (o InventoryItemOutput) ToInventoryItemOutputWithContext(ctx context.Context) InventoryItemOutput {
	return o
}

func (o InventoryItemOutput) AssetTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.AssetTag }).(pulumi.StringPtrOutput)
}

// Required when `componentType` is set.
func (o InventoryItemOutput) ComponentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.IntPtrOutput { return v.ComponentId }).(pulumi.IntPtrOutput)
}

func (o InventoryItemOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.ComponentType }).(pulumi.StringPtrOutput)
}

func (o InventoryItemOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o InventoryItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InventoryItemOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

// Defaults to `false`.
func (o InventoryItemOutput) Discovered() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.BoolPtrOutput { return v.Discovered }).(pulumi.BoolPtrOutput)
}

func (o InventoryItemOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

func (o InventoryItemOutput) ManufacturerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.IntPtrOutput { return v.ManufacturerId }).(pulumi.IntPtrOutput)
}

func (o InventoryItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InventoryItemOutput) ParentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.IntPtrOutput { return v.ParentId }).(pulumi.IntPtrOutput)
}

func (o InventoryItemOutput) PartId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.PartId }).(pulumi.StringPtrOutput)
}

func (o InventoryItemOutput) RoleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.IntPtrOutput { return v.RoleId }).(pulumi.IntPtrOutput)
}

func (o InventoryItemOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringPtrOutput { return v.Serial }).(pulumi.StringPtrOutput)
}

func (o InventoryItemOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InventoryItem) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type InventoryItemArrayOutput struct{ *pulumi.OutputState }

func (InventoryItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryItem)(nil)).Elem()
}

func (o InventoryItemArrayOutput) ToInventoryItemArrayOutput() InventoryItemArrayOutput {
	return o
}

func (o InventoryItemArrayOutput) ToInventoryItemArrayOutputWithContext(ctx context.Context) InventoryItemArrayOutput {
	return o
}

func (o InventoryItemArrayOutput) Index(i pulumi.IntInput) InventoryItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InventoryItem {
		return vs[0].([]*InventoryItem)[vs[1].(int)]
	}).(InventoryItemOutput)
}

type InventoryItemMapOutput struct{ *pulumi.OutputState }

func (InventoryItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryItem)(nil)).Elem()
}

func (o InventoryItemMapOutput) ToInventoryItemMapOutput() InventoryItemMapOutput {
	return o
}

func (o InventoryItemMapOutput) ToInventoryItemMapOutputWithContext(ctx context.Context) InventoryItemMapOutput {
	return o
}

func (o InventoryItemMapOutput) MapIndex(k pulumi.StringInput) InventoryItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InventoryItem {
		return vs[0].(map[string]*InventoryItem)[vs[1].(string)]
	}).(InventoryItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemInput)(nil)).Elem(), &InventoryItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemArrayInput)(nil)).Elem(), InventoryItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemMapInput)(nil)).Elem(), InventoryItemMap{})
	pulumi.RegisterOutputType(InventoryItemOutput{})
	pulumi.RegisterOutputType(InventoryItemArrayOutput{})
	pulumi.RegisterOutputType(InventoryItemMapOutput{})
}
