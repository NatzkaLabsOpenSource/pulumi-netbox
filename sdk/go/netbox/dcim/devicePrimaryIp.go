// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource is used to define the primary IP for a given device. The primary IP is reflected in the device Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Note that some terraform code is not included in the example for brevity
//			test, err := dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:         pulumi.String("%[1]s"),
//				DeviceTypeId: pulumi.Any(testNetboxDeviceType.Id),
//				RoleId:       pulumi.Any(testNetboxDeviceRole.Id),
//				SiteId:       pulumi.Any(testNetboxSite.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewIpAddress(ctx, "test_v4", &ipam.IpAddressArgs{
//				IpAddress:         pulumi.String("1.1.1.1/32"),
//				Status:            pulumi.String("active"),
//				DeviceInterfaceId: pulumi.Any(testNetboxDeviceInterface.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewDevicePrimaryIp(ctx, "test_v4", &dcim.DevicePrimaryIpArgs{
//				DeviceId:    test.ID(),
//				IpAddressId: pulumi.Any(testNetboxIpAddress.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicePrimaryIp struct {
	pulumi.CustomResourceState

	DeviceId    pulumi.IntOutput `pulumi:"deviceId"`
	IpAddressId pulumi.IntOutput `pulumi:"ipAddressId"`
	// Defaults to `4`.
	IpAddressVersion pulumi.IntPtrOutput `pulumi:"ipAddressVersion"`
}

// NewDevicePrimaryIp registers a new resource with the given unique name, arguments, and options.
func NewDevicePrimaryIp(ctx *pulumi.Context,
	name string, args *DevicePrimaryIpArgs, opts ...pulumi.ResourceOption) (*DevicePrimaryIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.IpAddressId == nil {
		return nil, errors.New("invalid value for required argument 'IpAddressId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePrimaryIp
	err := ctx.RegisterResource("netbox:dcim/devicePrimaryIp:DevicePrimaryIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePrimaryIp gets an existing DevicePrimaryIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePrimaryIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePrimaryIpState, opts ...pulumi.ResourceOption) (*DevicePrimaryIp, error) {
	var resource DevicePrimaryIp
	err := ctx.ReadResource("netbox:dcim/devicePrimaryIp:DevicePrimaryIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePrimaryIp resources.
type devicePrimaryIpState struct {
	DeviceId    *int `pulumi:"deviceId"`
	IpAddressId *int `pulumi:"ipAddressId"`
	// Defaults to `4`.
	IpAddressVersion *int `pulumi:"ipAddressVersion"`
}

type DevicePrimaryIpState struct {
	DeviceId    pulumi.IntPtrInput
	IpAddressId pulumi.IntPtrInput
	// Defaults to `4`.
	IpAddressVersion pulumi.IntPtrInput
}

func (DevicePrimaryIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePrimaryIpState)(nil)).Elem()
}

type devicePrimaryIpArgs struct {
	DeviceId    int `pulumi:"deviceId"`
	IpAddressId int `pulumi:"ipAddressId"`
	// Defaults to `4`.
	IpAddressVersion *int `pulumi:"ipAddressVersion"`
}

// The set of arguments for constructing a DevicePrimaryIp resource.
type DevicePrimaryIpArgs struct {
	DeviceId    pulumi.IntInput
	IpAddressId pulumi.IntInput
	// Defaults to `4`.
	IpAddressVersion pulumi.IntPtrInput
}

func (DevicePrimaryIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePrimaryIpArgs)(nil)).Elem()
}

type DevicePrimaryIpInput interface {
	pulumi.Input

	ToDevicePrimaryIpOutput() DevicePrimaryIpOutput
	ToDevicePrimaryIpOutputWithContext(ctx context.Context) DevicePrimaryIpOutput
}

func (*DevicePrimaryIp) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePrimaryIp)(nil)).Elem()
}

func (i *DevicePrimaryIp) ToDevicePrimaryIpOutput() DevicePrimaryIpOutput {
	return i.ToDevicePrimaryIpOutputWithContext(context.Background())
}

func (i *DevicePrimaryIp) ToDevicePrimaryIpOutputWithContext(ctx context.Context) DevicePrimaryIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePrimaryIpOutput)
}

// DevicePrimaryIpArrayInput is an input type that accepts DevicePrimaryIpArray and DevicePrimaryIpArrayOutput values.
// You can construct a concrete instance of `DevicePrimaryIpArrayInput` via:
//
//	DevicePrimaryIpArray{ DevicePrimaryIpArgs{...} }
type DevicePrimaryIpArrayInput interface {
	pulumi.Input

	ToDevicePrimaryIpArrayOutput() DevicePrimaryIpArrayOutput
	ToDevicePrimaryIpArrayOutputWithContext(context.Context) DevicePrimaryIpArrayOutput
}

type DevicePrimaryIpArray []DevicePrimaryIpInput

func (DevicePrimaryIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePrimaryIp)(nil)).Elem()
}

func (i DevicePrimaryIpArray) ToDevicePrimaryIpArrayOutput() DevicePrimaryIpArrayOutput {
	return i.ToDevicePrimaryIpArrayOutputWithContext(context.Background())
}

func (i DevicePrimaryIpArray) ToDevicePrimaryIpArrayOutputWithContext(ctx context.Context) DevicePrimaryIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePrimaryIpArrayOutput)
}

// DevicePrimaryIpMapInput is an input type that accepts DevicePrimaryIpMap and DevicePrimaryIpMapOutput values.
// You can construct a concrete instance of `DevicePrimaryIpMapInput` via:
//
//	DevicePrimaryIpMap{ "key": DevicePrimaryIpArgs{...} }
type DevicePrimaryIpMapInput interface {
	pulumi.Input

	ToDevicePrimaryIpMapOutput() DevicePrimaryIpMapOutput
	ToDevicePrimaryIpMapOutputWithContext(context.Context) DevicePrimaryIpMapOutput
}

type DevicePrimaryIpMap map[string]DevicePrimaryIpInput

func (DevicePrimaryIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePrimaryIp)(nil)).Elem()
}

func (i DevicePrimaryIpMap) ToDevicePrimaryIpMapOutput() DevicePrimaryIpMapOutput {
	return i.ToDevicePrimaryIpMapOutputWithContext(context.Background())
}

func (i DevicePrimaryIpMap) ToDevicePrimaryIpMapOutputWithContext(ctx context.Context) DevicePrimaryIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePrimaryIpMapOutput)
}

type DevicePrimaryIpOutput struct{ *pulumi.OutputState }

func (DevicePrimaryIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePrimaryIp)(nil)).Elem()
}

func (o DevicePrimaryIpOutput) ToDevicePrimaryIpOutput() DevicePrimaryIpOutput {
	return o
}

func (o DevicePrimaryIpOutput) ToDevicePrimaryIpOutputWithContext(ctx context.Context) DevicePrimaryIpOutput {
	return o
}

func (o DevicePrimaryIpOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DevicePrimaryIp) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

func (o DevicePrimaryIpOutput) IpAddressId() pulumi.IntOutput {
	return o.ApplyT(func(v *DevicePrimaryIp) pulumi.IntOutput { return v.IpAddressId }).(pulumi.IntOutput)
}

// Defaults to `4`.
func (o DevicePrimaryIpOutput) IpAddressVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePrimaryIp) pulumi.IntPtrOutput { return v.IpAddressVersion }).(pulumi.IntPtrOutput)
}

type DevicePrimaryIpArrayOutput struct{ *pulumi.OutputState }

func (DevicePrimaryIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePrimaryIp)(nil)).Elem()
}

func (o DevicePrimaryIpArrayOutput) ToDevicePrimaryIpArrayOutput() DevicePrimaryIpArrayOutput {
	return o
}

func (o DevicePrimaryIpArrayOutput) ToDevicePrimaryIpArrayOutputWithContext(ctx context.Context) DevicePrimaryIpArrayOutput {
	return o
}

func (o DevicePrimaryIpArrayOutput) Index(i pulumi.IntInput) DevicePrimaryIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePrimaryIp {
		return vs[0].([]*DevicePrimaryIp)[vs[1].(int)]
	}).(DevicePrimaryIpOutput)
}

type DevicePrimaryIpMapOutput struct{ *pulumi.OutputState }

func (DevicePrimaryIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePrimaryIp)(nil)).Elem()
}

func (o DevicePrimaryIpMapOutput) ToDevicePrimaryIpMapOutput() DevicePrimaryIpMapOutput {
	return o
}

func (o DevicePrimaryIpMapOutput) ToDevicePrimaryIpMapOutputWithContext(ctx context.Context) DevicePrimaryIpMapOutput {
	return o
}

func (o DevicePrimaryIpMapOutput) MapIndex(k pulumi.StringInput) DevicePrimaryIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePrimaryIp {
		return vs[0].(map[string]*DevicePrimaryIp)[vs[1].(string)]
	}).(DevicePrimaryIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePrimaryIpInput)(nil)).Elem(), &DevicePrimaryIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePrimaryIpArrayInput)(nil)).Elem(), DevicePrimaryIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePrimaryIpMapInput)(nil)).Elem(), DevicePrimaryIpMap{})
	pulumi.RegisterOutputType(DevicePrimaryIpOutput{})
	pulumi.RegisterOutputType(DevicePrimaryIpArrayOutput{})
	pulumi.RegisterOutputType(DevicePrimaryIpMapOutput{})
}
