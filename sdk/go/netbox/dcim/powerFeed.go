// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerfeed/):
//
// > A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewSite(ctx, "test", &dcim.SiteArgs{
//				Name:   pulumi.String("Site 1"),
//				Status: pulumi.String("active"),
//			})
//			if err != nil {
//				return err
//			}
//			testLocation, err := dcim.NewLocation(ctx, "test", &dcim.LocationArgs{
//				Name:   pulumi.String("Location 1"),
//				SiteId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			testPowerPanel, err := dcim.NewPowerPanel(ctx, "test", &dcim.PowerPanelArgs{
//				Name:       pulumi.String("Power Panel 1"),
//				SiteId:     test.ID(),
//				LocationId: testLocation.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewPowerFeed(ctx, "test", &dcim.PowerFeedArgs{
//				PowerPanelId:          testPowerPanel.ID(),
//				Name:                  pulumi.String("Power Feed 1"),
//				Status:                pulumi.String("active"),
//				Type:                  pulumi.String("primary"),
//				Supply:                pulumi.String("ac"),
//				Phase:                 pulumi.String("single-phase"),
//				Voltage:               pulumi.Int(250),
//				Amperage:              pulumi.Int(100),
//				MaxPercentUtilization: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PowerFeed struct {
	pulumi.CustomResourceState

	Amperage     pulumi.IntOutput       `pulumi:"amperage"`
	Comments     pulumi.StringPtrOutput `pulumi:"comments"`
	CustomFields pulumi.StringMapOutput `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	// Defaults to `false`.
	MarkConnected         pulumi.BoolPtrOutput `pulumi:"markConnected"`
	MaxPercentUtilization pulumi.IntOutput     `pulumi:"maxPercentUtilization"`
	Name                  pulumi.StringOutput  `pulumi:"name"`
	// One of [single-phase, three-phase].
	Phase        pulumi.StringOutput `pulumi:"phase"`
	PowerPanelId pulumi.IntOutput    `pulumi:"powerPanelId"`
	RackId       pulumi.IntPtrOutput `pulumi:"rackId"`
	// One of [offline, active, planned, failed].
	Status pulumi.StringOutput `pulumi:"status"`
	// One of [ac, dc].
	Supply pulumi.StringOutput      `pulumi:"supply"`
	Tags   pulumi.StringArrayOutput `pulumi:"tags"`
	// One of [primary, redundant].
	Type    pulumi.StringOutput `pulumi:"type"`
	Voltage pulumi.IntOutput    `pulumi:"voltage"`
}

// NewPowerFeed registers a new resource with the given unique name, arguments, and options.
func NewPowerFeed(ctx *pulumi.Context,
	name string, args *PowerFeedArgs, opts ...pulumi.ResourceOption) (*PowerFeed, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Amperage == nil {
		return nil, errors.New("invalid value for required argument 'Amperage'")
	}
	if args.MaxPercentUtilization == nil {
		return nil, errors.New("invalid value for required argument 'MaxPercentUtilization'")
	}
	if args.Phase == nil {
		return nil, errors.New("invalid value for required argument 'Phase'")
	}
	if args.PowerPanelId == nil {
		return nil, errors.New("invalid value for required argument 'PowerPanelId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Supply == nil {
		return nil, errors.New("invalid value for required argument 'Supply'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Voltage == nil {
		return nil, errors.New("invalid value for required argument 'Voltage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PowerFeed
	err := ctx.RegisterResource("netbox:dcim/powerFeed:PowerFeed", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPowerFeed gets an existing PowerFeed resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPowerFeed(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PowerFeedState, opts ...pulumi.ResourceOption) (*PowerFeed, error) {
	var resource PowerFeed
	err := ctx.ReadResource("netbox:dcim/powerFeed:PowerFeed", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PowerFeed resources.
type powerFeedState struct {
	Amperage     *int              `pulumi:"amperage"`
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Defaults to `false`.
	MarkConnected         *bool   `pulumi:"markConnected"`
	MaxPercentUtilization *int    `pulumi:"maxPercentUtilization"`
	Name                  *string `pulumi:"name"`
	// One of [single-phase, three-phase].
	Phase        *string `pulumi:"phase"`
	PowerPanelId *int    `pulumi:"powerPanelId"`
	RackId       *int    `pulumi:"rackId"`
	// One of [offline, active, planned, failed].
	Status *string `pulumi:"status"`
	// One of [ac, dc].
	Supply *string  `pulumi:"supply"`
	Tags   []string `pulumi:"tags"`
	// One of [primary, redundant].
	Type    *string `pulumi:"type"`
	Voltage *int    `pulumi:"voltage"`
}

type PowerFeedState struct {
	Amperage     pulumi.IntPtrInput
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected         pulumi.BoolPtrInput
	MaxPercentUtilization pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	// One of [single-phase, three-phase].
	Phase        pulumi.StringPtrInput
	PowerPanelId pulumi.IntPtrInput
	RackId       pulumi.IntPtrInput
	// One of [offline, active, planned, failed].
	Status pulumi.StringPtrInput
	// One of [ac, dc].
	Supply pulumi.StringPtrInput
	Tags   pulumi.StringArrayInput
	// One of [primary, redundant].
	Type    pulumi.StringPtrInput
	Voltage pulumi.IntPtrInput
}

func (PowerFeedState) ElementType() reflect.Type {
	return reflect.TypeOf((*powerFeedState)(nil)).Elem()
}

type powerFeedArgs struct {
	Amperage     int               `pulumi:"amperage"`
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Defaults to `false`.
	MarkConnected         *bool   `pulumi:"markConnected"`
	MaxPercentUtilization int     `pulumi:"maxPercentUtilization"`
	Name                  *string `pulumi:"name"`
	// One of [single-phase, three-phase].
	Phase        string `pulumi:"phase"`
	PowerPanelId int    `pulumi:"powerPanelId"`
	RackId       *int   `pulumi:"rackId"`
	// One of [offline, active, planned, failed].
	Status string `pulumi:"status"`
	// One of [ac, dc].
	Supply string   `pulumi:"supply"`
	Tags   []string `pulumi:"tags"`
	// One of [primary, redundant].
	Type    string `pulumi:"type"`
	Voltage int    `pulumi:"voltage"`
}

// The set of arguments for constructing a PowerFeed resource.
type PowerFeedArgs struct {
	Amperage     pulumi.IntInput
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected         pulumi.BoolPtrInput
	MaxPercentUtilization pulumi.IntInput
	Name                  pulumi.StringPtrInput
	// One of [single-phase, three-phase].
	Phase        pulumi.StringInput
	PowerPanelId pulumi.IntInput
	RackId       pulumi.IntPtrInput
	// One of [offline, active, planned, failed].
	Status pulumi.StringInput
	// One of [ac, dc].
	Supply pulumi.StringInput
	Tags   pulumi.StringArrayInput
	// One of [primary, redundant].
	Type    pulumi.StringInput
	Voltage pulumi.IntInput
}

func (PowerFeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*powerFeedArgs)(nil)).Elem()
}

type PowerFeedInput interface {
	pulumi.Input

	ToPowerFeedOutput() PowerFeedOutput
	ToPowerFeedOutputWithContext(ctx context.Context) PowerFeedOutput
}

func (*PowerFeed) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerFeed)(nil)).Elem()
}

func (i *PowerFeed) ToPowerFeedOutput() PowerFeedOutput {
	return i.ToPowerFeedOutputWithContext(context.Background())
}

func (i *PowerFeed) ToPowerFeedOutputWithContext(ctx context.Context) PowerFeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerFeedOutput)
}

// PowerFeedArrayInput is an input type that accepts PowerFeedArray and PowerFeedArrayOutput values.
// You can construct a concrete instance of `PowerFeedArrayInput` via:
//
//	PowerFeedArray{ PowerFeedArgs{...} }
type PowerFeedArrayInput interface {
	pulumi.Input

	ToPowerFeedArrayOutput() PowerFeedArrayOutput
	ToPowerFeedArrayOutputWithContext(context.Context) PowerFeedArrayOutput
}

type PowerFeedArray []PowerFeedInput

func (PowerFeedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PowerFeed)(nil)).Elem()
}

func (i PowerFeedArray) ToPowerFeedArrayOutput() PowerFeedArrayOutput {
	return i.ToPowerFeedArrayOutputWithContext(context.Background())
}

func (i PowerFeedArray) ToPowerFeedArrayOutputWithContext(ctx context.Context) PowerFeedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerFeedArrayOutput)
}

// PowerFeedMapInput is an input type that accepts PowerFeedMap and PowerFeedMapOutput values.
// You can construct a concrete instance of `PowerFeedMapInput` via:
//
//	PowerFeedMap{ "key": PowerFeedArgs{...} }
type PowerFeedMapInput interface {
	pulumi.Input

	ToPowerFeedMapOutput() PowerFeedMapOutput
	ToPowerFeedMapOutputWithContext(context.Context) PowerFeedMapOutput
}

type PowerFeedMap map[string]PowerFeedInput

func (PowerFeedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PowerFeed)(nil)).Elem()
}

func (i PowerFeedMap) ToPowerFeedMapOutput() PowerFeedMapOutput {
	return i.ToPowerFeedMapOutputWithContext(context.Background())
}

func (i PowerFeedMap) ToPowerFeedMapOutputWithContext(ctx context.Context) PowerFeedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerFeedMapOutput)
}

type PowerFeedOutput struct{ *pulumi.OutputState }

func (PowerFeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerFeed)(nil)).Elem()
}

func (o PowerFeedOutput) ToPowerFeedOutput() PowerFeedOutput {
	return o
}

func (o PowerFeedOutput) ToPowerFeedOutputWithContext(ctx context.Context) PowerFeedOutput {
	return o
}

func (o PowerFeedOutput) Amperage() pulumi.IntOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.IntOutput { return v.Amperage }).(pulumi.IntOutput)
}

func (o PowerFeedOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o PowerFeedOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o PowerFeedOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Defaults to `false`.
func (o PowerFeedOutput) MarkConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.BoolPtrOutput { return v.MarkConnected }).(pulumi.BoolPtrOutput)
}

func (o PowerFeedOutput) MaxPercentUtilization() pulumi.IntOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.IntOutput { return v.MaxPercentUtilization }).(pulumi.IntOutput)
}

func (o PowerFeedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One of [single-phase, three-phase].
func (o PowerFeedOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringOutput { return v.Phase }).(pulumi.StringOutput)
}

func (o PowerFeedOutput) PowerPanelId() pulumi.IntOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.IntOutput { return v.PowerPanelId }).(pulumi.IntOutput)
}

func (o PowerFeedOutput) RackId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.IntPtrOutput { return v.RackId }).(pulumi.IntPtrOutput)
}

// One of [offline, active, planned, failed].
func (o PowerFeedOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// One of [ac, dc].
func (o PowerFeedOutput) Supply() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringOutput { return v.Supply }).(pulumi.StringOutput)
}

func (o PowerFeedOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// One of [primary, redundant].
func (o PowerFeedOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o PowerFeedOutput) Voltage() pulumi.IntOutput {
	return o.ApplyT(func(v *PowerFeed) pulumi.IntOutput { return v.Voltage }).(pulumi.IntOutput)
}

type PowerFeedArrayOutput struct{ *pulumi.OutputState }

func (PowerFeedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PowerFeed)(nil)).Elem()
}

func (o PowerFeedArrayOutput) ToPowerFeedArrayOutput() PowerFeedArrayOutput {
	return o
}

func (o PowerFeedArrayOutput) ToPowerFeedArrayOutputWithContext(ctx context.Context) PowerFeedArrayOutput {
	return o
}

func (o PowerFeedArrayOutput) Index(i pulumi.IntInput) PowerFeedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PowerFeed {
		return vs[0].([]*PowerFeed)[vs[1].(int)]
	}).(PowerFeedOutput)
}

type PowerFeedMapOutput struct{ *pulumi.OutputState }

func (PowerFeedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PowerFeed)(nil)).Elem()
}

func (o PowerFeedMapOutput) ToPowerFeedMapOutput() PowerFeedMapOutput {
	return o
}

func (o PowerFeedMapOutput) ToPowerFeedMapOutputWithContext(ctx context.Context) PowerFeedMapOutput {
	return o
}

func (o PowerFeedMapOutput) MapIndex(k pulumi.StringInput) PowerFeedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PowerFeed {
		return vs[0].(map[string]*PowerFeed)[vs[1].(string)]
	}).(PowerFeedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PowerFeedInput)(nil)).Elem(), &PowerFeed{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerFeedArrayInput)(nil)).Elem(), PowerFeedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerFeedMapInput)(nil)).Elem(), PowerFeedMap{})
	pulumi.RegisterOutputType(PowerFeedOutput{})
	pulumi.RegisterOutputType(PowerFeedArrayOutput{})
	pulumi.RegisterOutputType(PowerFeedMapOutput{})
}
