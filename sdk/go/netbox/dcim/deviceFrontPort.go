// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/frontport/):
//
// > Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Note that some terraform code is not included in the example for brevity
//			test, err := dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:         pulumi.String("%[1]s"),
//				DeviceTypeId: pulumi.Any(testNetboxDeviceType.Id),
//				RoleId:       pulumi.Any(testNetboxDeviceRole.Id),
//				SiteId:       pulumi.Any(testNetboxSite.Id),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceRearPort, err := dcim.NewDeviceRearPort(ctx, "test", &dcim.DeviceRearPortArgs{
//				DeviceId:      test.ID(),
//				Name:          pulumi.String("rear port 1"),
//				Type:          pulumi.String("8p8c"),
//				Positions:     pulumi.Int(2),
//				MarkConnected: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewDeviceFrontPort(ctx, "test", &dcim.DeviceFrontPortArgs{
//				DeviceId:         test.ID(),
//				Name:             pulumi.String("front port 1"),
//				Type:             pulumi.String("8p8c"),
//				RearPortId:       testDeviceRearPort.ID(),
//				RearPortPosition: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeviceFrontPort struct {
	pulumi.CustomResourceState

	ColorHex     pulumi.StringPtrOutput `pulumi:"colorHex"`
	CustomFields pulumi.StringMapOutput `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	DeviceId     pulumi.IntOutput       `pulumi:"deviceId"`
	Label        pulumi.StringPtrOutput `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected    pulumi.BoolPtrOutput     `pulumi:"markConnected"`
	ModuleId         pulumi.IntPtrOutput      `pulumi:"moduleId"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	RearPortId       pulumi.IntOutput         `pulumi:"rearPortId"`
	RearPortPosition pulumi.IntOutput         `pulumi:"rearPortPosition"`
	Tags             pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls         pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDeviceFrontPort registers a new resource with the given unique name, arguments, and options.
func NewDeviceFrontPort(ctx *pulumi.Context,
	name string, args *DeviceFrontPortArgs, opts ...pulumi.ResourceOption) (*DeviceFrontPort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.RearPortId == nil {
		return nil, errors.New("invalid value for required argument 'RearPortId'")
	}
	if args.RearPortPosition == nil {
		return nil, errors.New("invalid value for required argument 'RearPortPosition'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeviceFrontPort
	err := ctx.RegisterResource("netbox:dcim/deviceFrontPort:DeviceFrontPort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceFrontPort gets an existing DeviceFrontPort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceFrontPort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceFrontPortState, opts ...pulumi.ResourceOption) (*DeviceFrontPort, error) {
	var resource DeviceFrontPort
	err := ctx.ReadResource("netbox:dcim/deviceFrontPort:DeviceFrontPort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceFrontPort resources.
type deviceFrontPortState struct {
	ColorHex     *string           `pulumi:"colorHex"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	DeviceId     *int              `pulumi:"deviceId"`
	Label        *string           `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected    *bool    `pulumi:"markConnected"`
	ModuleId         *int     `pulumi:"moduleId"`
	Name             *string  `pulumi:"name"`
	RearPortId       *int     `pulumi:"rearPortId"`
	RearPortPosition *int     `pulumi:"rearPortPosition"`
	Tags             []string `pulumi:"tags"`
	TagsAlls         []string `pulumi:"tagsAlls"`
	// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
	Type *string `pulumi:"type"`
}

type DeviceFrontPortState struct {
	ColorHex     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	DeviceId     pulumi.IntPtrInput
	Label        pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected    pulumi.BoolPtrInput
	ModuleId         pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	RearPortId       pulumi.IntPtrInput
	RearPortPosition pulumi.IntPtrInput
	Tags             pulumi.StringArrayInput
	TagsAlls         pulumi.StringArrayInput
	// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
	Type pulumi.StringPtrInput
}

func (DeviceFrontPortState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceFrontPortState)(nil)).Elem()
}

type deviceFrontPortArgs struct {
	ColorHex     *string           `pulumi:"colorHex"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	DeviceId     int               `pulumi:"deviceId"`
	Label        *string           `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected    *bool    `pulumi:"markConnected"`
	ModuleId         *int     `pulumi:"moduleId"`
	Name             *string  `pulumi:"name"`
	RearPortId       int      `pulumi:"rearPortId"`
	RearPortPosition int      `pulumi:"rearPortPosition"`
	Tags             []string `pulumi:"tags"`
	// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DeviceFrontPort resource.
type DeviceFrontPortArgs struct {
	ColorHex     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	DeviceId     pulumi.IntInput
	Label        pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected    pulumi.BoolPtrInput
	ModuleId         pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	RearPortId       pulumi.IntInput
	RearPortPosition pulumi.IntInput
	Tags             pulumi.StringArrayInput
	// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
	Type pulumi.StringInput
}

func (DeviceFrontPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceFrontPortArgs)(nil)).Elem()
}

type DeviceFrontPortInput interface {
	pulumi.Input

	ToDeviceFrontPortOutput() DeviceFrontPortOutput
	ToDeviceFrontPortOutputWithContext(ctx context.Context) DeviceFrontPortOutput
}

func (*DeviceFrontPort) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceFrontPort)(nil)).Elem()
}

func (i *DeviceFrontPort) ToDeviceFrontPortOutput() DeviceFrontPortOutput {
	return i.ToDeviceFrontPortOutputWithContext(context.Background())
}

func (i *DeviceFrontPort) ToDeviceFrontPortOutputWithContext(ctx context.Context) DeviceFrontPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFrontPortOutput)
}

// DeviceFrontPortArrayInput is an input type that accepts DeviceFrontPortArray and DeviceFrontPortArrayOutput values.
// You can construct a concrete instance of `DeviceFrontPortArrayInput` via:
//
//	DeviceFrontPortArray{ DeviceFrontPortArgs{...} }
type DeviceFrontPortArrayInput interface {
	pulumi.Input

	ToDeviceFrontPortArrayOutput() DeviceFrontPortArrayOutput
	ToDeviceFrontPortArrayOutputWithContext(context.Context) DeviceFrontPortArrayOutput
}

type DeviceFrontPortArray []DeviceFrontPortInput

func (DeviceFrontPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceFrontPort)(nil)).Elem()
}

func (i DeviceFrontPortArray) ToDeviceFrontPortArrayOutput() DeviceFrontPortArrayOutput {
	return i.ToDeviceFrontPortArrayOutputWithContext(context.Background())
}

func (i DeviceFrontPortArray) ToDeviceFrontPortArrayOutputWithContext(ctx context.Context) DeviceFrontPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFrontPortArrayOutput)
}

// DeviceFrontPortMapInput is an input type that accepts DeviceFrontPortMap and DeviceFrontPortMapOutput values.
// You can construct a concrete instance of `DeviceFrontPortMapInput` via:
//
//	DeviceFrontPortMap{ "key": DeviceFrontPortArgs{...} }
type DeviceFrontPortMapInput interface {
	pulumi.Input

	ToDeviceFrontPortMapOutput() DeviceFrontPortMapOutput
	ToDeviceFrontPortMapOutputWithContext(context.Context) DeviceFrontPortMapOutput
}

type DeviceFrontPortMap map[string]DeviceFrontPortInput

func (DeviceFrontPortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceFrontPort)(nil)).Elem()
}

func (i DeviceFrontPortMap) ToDeviceFrontPortMapOutput() DeviceFrontPortMapOutput {
	return i.ToDeviceFrontPortMapOutputWithContext(context.Background())
}

func (i DeviceFrontPortMap) ToDeviceFrontPortMapOutputWithContext(ctx context.Context) DeviceFrontPortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceFrontPortMapOutput)
}

type DeviceFrontPortOutput struct{ *pulumi.OutputState }

func (DeviceFrontPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceFrontPort)(nil)).Elem()
}

func (o DeviceFrontPortOutput) ToDeviceFrontPortOutput() DeviceFrontPortOutput {
	return o
}

func (o DeviceFrontPortOutput) ToDeviceFrontPortOutputWithContext(ctx context.Context) DeviceFrontPortOutput {
	return o
}

func (o DeviceFrontPortOutput) ColorHex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringPtrOutput { return v.ColorHex }).(pulumi.StringPtrOutput)
}

func (o DeviceFrontPortOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o DeviceFrontPortOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeviceFrontPortOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

func (o DeviceFrontPortOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// Defaults to `false`.
func (o DeviceFrontPortOutput) MarkConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.BoolPtrOutput { return v.MarkConnected }).(pulumi.BoolPtrOutput)
}

func (o DeviceFrontPortOutput) ModuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.IntPtrOutput { return v.ModuleId }).(pulumi.IntPtrOutput)
}

func (o DeviceFrontPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeviceFrontPortOutput) RearPortId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.IntOutput { return v.RearPortId }).(pulumi.IntOutput)
}

func (o DeviceFrontPortOutput) RearPortPosition() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.IntOutput { return v.RearPortPosition }).(pulumi.IntOutput)
}

func (o DeviceFrontPortOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DeviceFrontPortOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
func (o DeviceFrontPortOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceFrontPort) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DeviceFrontPortArrayOutput struct{ *pulumi.OutputState }

func (DeviceFrontPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceFrontPort)(nil)).Elem()
}

func (o DeviceFrontPortArrayOutput) ToDeviceFrontPortArrayOutput() DeviceFrontPortArrayOutput {
	return o
}

func (o DeviceFrontPortArrayOutput) ToDeviceFrontPortArrayOutputWithContext(ctx context.Context) DeviceFrontPortArrayOutput {
	return o
}

func (o DeviceFrontPortArrayOutput) Index(i pulumi.IntInput) DeviceFrontPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceFrontPort {
		return vs[0].([]*DeviceFrontPort)[vs[1].(int)]
	}).(DeviceFrontPortOutput)
}

type DeviceFrontPortMapOutput struct{ *pulumi.OutputState }

func (DeviceFrontPortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceFrontPort)(nil)).Elem()
}

func (o DeviceFrontPortMapOutput) ToDeviceFrontPortMapOutput() DeviceFrontPortMapOutput {
	return o
}

func (o DeviceFrontPortMapOutput) ToDeviceFrontPortMapOutputWithContext(ctx context.Context) DeviceFrontPortMapOutput {
	return o
}

func (o DeviceFrontPortMapOutput) MapIndex(k pulumi.StringInput) DeviceFrontPortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceFrontPort {
		return vs[0].(map[string]*DeviceFrontPort)[vs[1].(string)]
	}).(DeviceFrontPortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFrontPortInput)(nil)).Elem(), &DeviceFrontPort{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFrontPortArrayInput)(nil)).Elem(), DeviceFrontPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceFrontPortMapInput)(nil)).Elem(), DeviceFrontPortMap{})
	pulumi.RegisterOutputType(DeviceFrontPortOutput{})
	pulumi.RegisterOutputType(DeviceFrontPortArrayOutput{})
	pulumi.RegisterOutputType(DeviceFrontPortMapOutput{})
}
