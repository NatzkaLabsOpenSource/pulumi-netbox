// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#devices):
//
// > Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewSite(ctx, "test", &dcim.SiteArgs{
//				Name: pulumi.String("%[1]s"),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceRole, err := dcim.NewDeviceRole(ctx, "test", &dcim.DeviceRoleArgs{
//				Name:     pulumi.String("%[1]s"),
//				ColorHex: pulumi.String("123456"),
//			})
//			if err != nil {
//				return err
//			}
//			testManufacturer, err := dcim.NewManufacturer(ctx, "test", &dcim.ManufacturerArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceType, err := dcim.NewDeviceType(ctx, "test", &dcim.DeviceTypeArgs{
//				Model:          pulumi.String("test"),
//				ManufacturerId: testManufacturer.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"setting_a": "Some Setting",
//				"setting_b": 42,
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:             pulumi.String("%[1]s"),
//				DeviceTypeId:     testDeviceType.ID(),
//				RoleId:           testDeviceRole.ID(),
//				SiteId:           test.ID(),
//				LocalContextData: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Device struct {
	pulumi.CustomResourceState

	AssetTag         pulumi.StringPtrOutput `pulumi:"assetTag"`
	ClusterId        pulumi.IntPtrOutput    `pulumi:"clusterId"`
	Comments         pulumi.StringPtrOutput `pulumi:"comments"`
	ConfigTemplateId pulumi.IntPtrOutput    `pulumi:"configTemplateId"`
	CustomFields     pulumi.StringMapOutput `pulumi:"customFields"`
	Description      pulumi.StringPtrOutput `pulumi:"description"`
	DeviceTypeId     pulumi.IntOutput       `pulumi:"deviceTypeId"`
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData pulumi.StringPtrOutput `pulumi:"localContextData"`
	LocationId       pulumi.IntPtrOutput    `pulumi:"locationId"`
	Name             pulumi.StringOutput    `pulumi:"name"`
	PlatformId       pulumi.IntPtrOutput    `pulumi:"platformId"`
	PrimaryIpv4      pulumi.IntOutput       `pulumi:"primaryIpv4"`
	PrimaryIpv6      pulumi.IntOutput       `pulumi:"primaryIpv6"`
	// Valid values are `front` and `rear`. Required when `rackPosition` is set.
	RackFace     pulumi.StringPtrOutput  `pulumi:"rackFace"`
	RackId       pulumi.IntPtrOutput     `pulumi:"rackId"`
	RackPosition pulumi.Float64PtrOutput `pulumi:"rackPosition"`
	RoleId       pulumi.IntOutput        `pulumi:"roleId"`
	Serial       pulumi.StringPtrOutput  `pulumi:"serial"`
	SiteId       pulumi.IntOutput        `pulumi:"siteId"`
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
	Status   pulumi.StringPtrOutput   `pulumi:"status"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TenantId pulumi.IntPtrOutput      `pulumi:"tenantId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisId pulumi.IntPtrOutput `pulumi:"virtualChassisId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisMaster   pulumi.BoolPtrOutput `pulumi:"virtualChassisMaster"`
	VirtualChassisPosition pulumi.IntPtrOutput  `pulumi:"virtualChassisPosition"`
	VirtualChassisPriority pulumi.IntPtrOutput  `pulumi:"virtualChassisPriority"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceTypeId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypeId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("netbox:dcim/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("netbox:dcim/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	AssetTag         *string           `pulumi:"assetTag"`
	ClusterId        *int              `pulumi:"clusterId"`
	Comments         *string           `pulumi:"comments"`
	ConfigTemplateId *int              `pulumi:"configTemplateId"`
	CustomFields     map[string]string `pulumi:"customFields"`
	Description      *string           `pulumi:"description"`
	DeviceTypeId     *int              `pulumi:"deviceTypeId"`
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData *string `pulumi:"localContextData"`
	LocationId       *int    `pulumi:"locationId"`
	Name             *string `pulumi:"name"`
	PlatformId       *int    `pulumi:"platformId"`
	PrimaryIpv4      *int    `pulumi:"primaryIpv4"`
	PrimaryIpv6      *int    `pulumi:"primaryIpv6"`
	// Valid values are `front` and `rear`. Required when `rackPosition` is set.
	RackFace     *string  `pulumi:"rackFace"`
	RackId       *int     `pulumi:"rackId"`
	RackPosition *float64 `pulumi:"rackPosition"`
	RoleId       *int     `pulumi:"roleId"`
	Serial       *string  `pulumi:"serial"`
	SiteId       *int     `pulumi:"siteId"`
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TagsAlls []string `pulumi:"tagsAlls"`
	TenantId *int     `pulumi:"tenantId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisId *int `pulumi:"virtualChassisId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisMaster   *bool `pulumi:"virtualChassisMaster"`
	VirtualChassisPosition *int  `pulumi:"virtualChassisPosition"`
	VirtualChassisPriority *int  `pulumi:"virtualChassisPriority"`
}

type DeviceState struct {
	AssetTag         pulumi.StringPtrInput
	ClusterId        pulumi.IntPtrInput
	Comments         pulumi.StringPtrInput
	ConfigTemplateId pulumi.IntPtrInput
	CustomFields     pulumi.StringMapInput
	Description      pulumi.StringPtrInput
	DeviceTypeId     pulumi.IntPtrInput
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData pulumi.StringPtrInput
	LocationId       pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	PlatformId       pulumi.IntPtrInput
	PrimaryIpv4      pulumi.IntPtrInput
	PrimaryIpv6      pulumi.IntPtrInput
	// Valid values are `front` and `rear`. Required when `rackPosition` is set.
	RackFace     pulumi.StringPtrInput
	RackId       pulumi.IntPtrInput
	RackPosition pulumi.Float64PtrInput
	RoleId       pulumi.IntPtrInput
	Serial       pulumi.StringPtrInput
	SiteId       pulumi.IntPtrInput
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TagsAlls pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisId pulumi.IntPtrInput
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisMaster   pulumi.BoolPtrInput
	VirtualChassisPosition pulumi.IntPtrInput
	VirtualChassisPriority pulumi.IntPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	AssetTag         *string           `pulumi:"assetTag"`
	ClusterId        *int              `pulumi:"clusterId"`
	Comments         *string           `pulumi:"comments"`
	ConfigTemplateId *int              `pulumi:"configTemplateId"`
	CustomFields     map[string]string `pulumi:"customFields"`
	Description      *string           `pulumi:"description"`
	DeviceTypeId     int               `pulumi:"deviceTypeId"`
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData *string `pulumi:"localContextData"`
	LocationId       *int    `pulumi:"locationId"`
	Name             *string `pulumi:"name"`
	PlatformId       *int    `pulumi:"platformId"`
	// Valid values are `front` and `rear`. Required when `rackPosition` is set.
	RackFace     *string  `pulumi:"rackFace"`
	RackId       *int     `pulumi:"rackId"`
	RackPosition *float64 `pulumi:"rackPosition"`
	RoleId       int      `pulumi:"roleId"`
	Serial       *string  `pulumi:"serial"`
	SiteId       int      `pulumi:"siteId"`
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisId *int `pulumi:"virtualChassisId"`
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisMaster   *bool `pulumi:"virtualChassisMaster"`
	VirtualChassisPosition *int  `pulumi:"virtualChassisPosition"`
	VirtualChassisPriority *int  `pulumi:"virtualChassisPriority"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	AssetTag         pulumi.StringPtrInput
	ClusterId        pulumi.IntPtrInput
	Comments         pulumi.StringPtrInput
	ConfigTemplateId pulumi.IntPtrInput
	CustomFields     pulumi.StringMapInput
	Description      pulumi.StringPtrInput
	DeviceTypeId     pulumi.IntInput
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData pulumi.StringPtrInput
	LocationId       pulumi.IntPtrInput
	Name             pulumi.StringPtrInput
	PlatformId       pulumi.IntPtrInput
	// Valid values are `front` and `rear`. Required when `rackPosition` is set.
	RackFace     pulumi.StringPtrInput
	RackId       pulumi.IntPtrInput
	RackPosition pulumi.Float64PtrInput
	RoleId       pulumi.IntInput
	Serial       pulumi.StringPtrInput
	SiteId       pulumi.IntInput
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisId pulumi.IntPtrInput
	// Required when `virtualChassisMaster` and `virtualChassisId` is set.
	VirtualChassisMaster   pulumi.BoolPtrInput
	VirtualChassisPosition pulumi.IntPtrInput
	VirtualChassisPriority pulumi.IntPtrInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

// DeviceArrayInput is an input type that accepts DeviceArray and DeviceArrayOutput values.
// You can construct a concrete instance of `DeviceArrayInput` via:
//
//	DeviceArray{ DeviceArgs{...} }
type DeviceArrayInput interface {
	pulumi.Input

	ToDeviceArrayOutput() DeviceArrayOutput
	ToDeviceArrayOutputWithContext(context.Context) DeviceArrayOutput
}

type DeviceArray []DeviceInput

func (DeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (i DeviceArray) ToDeviceArrayOutput() DeviceArrayOutput {
	return i.ToDeviceArrayOutputWithContext(context.Background())
}

func (i DeviceArray) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceArrayOutput)
}

// DeviceMapInput is an input type that accepts DeviceMap and DeviceMapOutput values.
// You can construct a concrete instance of `DeviceMapInput` via:
//
//	DeviceMap{ "key": DeviceArgs{...} }
type DeviceMapInput interface {
	pulumi.Input

	ToDeviceMapOutput() DeviceMapOutput
	ToDeviceMapOutputWithContext(context.Context) DeviceMapOutput
}

type DeviceMap map[string]DeviceInput

func (DeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (i DeviceMap) ToDeviceMapOutput() DeviceMapOutput {
	return i.ToDeviceMapOutputWithContext(context.Background())
}

func (i DeviceMap) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceMapOutput)
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) AssetTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.AssetTag }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) ClusterId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.ClusterId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) ConfigTemplateId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.ConfigTemplateId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Device) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o DeviceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) DeviceTypeId() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.DeviceTypeId }).(pulumi.IntOutput)
}

// This is best managed through the use of `jsonencode` and a map of settings.
func (o DeviceOutput) LocalContextData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.LocalContextData }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) LocationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.LocationId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DeviceOutput) PlatformId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.PlatformId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) PrimaryIpv4() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.PrimaryIpv4 }).(pulumi.IntOutput)
}

func (o DeviceOutput) PrimaryIpv6() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.PrimaryIpv6 }).(pulumi.IntOutput)
}

// Valid values are `front` and `rear`. Required when `rackPosition` is set.
func (o DeviceOutput) RackFace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.RackFace }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) RackId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.RackId }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) RackPosition() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Device) pulumi.Float64PtrOutput { return v.RackPosition }).(pulumi.Float64PtrOutput)
}

func (o DeviceOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

func (o DeviceOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Serial }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *Device) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

// Valid values are `offline`, `active`, `planned`, `staged`, `failed`, `inventory` and `decommissioning`. Defaults to `active`.
func (o DeviceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o DeviceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DeviceOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Device) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o DeviceOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

// Required when `virtualChassisMaster` and `virtualChassisId` is set.
func (o DeviceOutput) VirtualChassisId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.VirtualChassisId }).(pulumi.IntPtrOutput)
}

// Required when `virtualChassisMaster` and `virtualChassisId` is set.
func (o DeviceOutput) VirtualChassisMaster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.BoolPtrOutput { return v.VirtualChassisMaster }).(pulumi.BoolPtrOutput)
}

func (o DeviceOutput) VirtualChassisPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.VirtualChassisPosition }).(pulumi.IntPtrOutput)
}

func (o DeviceOutput) VirtualChassisPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.IntPtrOutput { return v.VirtualChassisPriority }).(pulumi.IntPtrOutput)
}

type DeviceArrayOutput struct{ *pulumi.OutputState }

func (DeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Device)(nil)).Elem()
}

func (o DeviceArrayOutput) ToDeviceArrayOutput() DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) ToDeviceArrayOutputWithContext(ctx context.Context) DeviceArrayOutput {
	return o
}

func (o DeviceArrayOutput) Index(i pulumi.IntInput) DeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Device {
		return vs[0].([]*Device)[vs[1].(int)]
	}).(DeviceOutput)
}

type DeviceMapOutput struct{ *pulumi.OutputState }

func (DeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Device)(nil)).Elem()
}

func (o DeviceMapOutput) ToDeviceMapOutput() DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) ToDeviceMapOutputWithContext(ctx context.Context) DeviceMapOutput {
	return o
}

func (o DeviceMapOutput) MapIndex(k pulumi.StringInput) DeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Device {
		return vs[0].(map[string]*Device)[vs[1].(string)]
	}).(DeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInput)(nil)).Elem(), &Device{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceArrayInput)(nil)).Elem(), DeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceMapInput)(nil)).Elem(), DeviceMap{})
	pulumi.RegisterOutputType(DeviceOutput{})
	pulumi.RegisterOutputType(DeviceArrayOutput{})
	pulumi.RegisterOutputType(DeviceMapOutput{})
}
