// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerpanel/):
//
// > A power panel represents the origin point in NetBox for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewSite(ctx, "test", &dcim.SiteArgs{
//				Name:   pulumi.String("Site 1"),
//				Status: pulumi.String("active"),
//			})
//			if err != nil {
//				return err
//			}
//			testLocation, err := dcim.NewLocation(ctx, "test", &dcim.LocationArgs{
//				Name:   pulumi.String("Location 1"),
//				SiteId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewPowerPanel(ctx, "test", &dcim.PowerPanelArgs{
//				Name:       pulumi.String("Power Panel 1"),
//				SiteId:     test.ID(),
//				LocationId: testLocation.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PowerPanel struct {
	pulumi.CustomResourceState

	Comments     pulumi.StringPtrOutput   `pulumi:"comments"`
	CustomFields pulumi.StringMapOutput   `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	LocationId   pulumi.IntPtrOutput      `pulumi:"locationId"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	SiteId       pulumi.IntOutput         `pulumi:"siteId"`
	Tags         pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewPowerPanel registers a new resource with the given unique name, arguments, and options.
func NewPowerPanel(ctx *pulumi.Context,
	name string, args *PowerPanelArgs, opts ...pulumi.ResourceOption) (*PowerPanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PowerPanel
	err := ctx.RegisterResource("netbox:dcim/powerPanel:PowerPanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPowerPanel gets an existing PowerPanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPowerPanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PowerPanelState, opts ...pulumi.ResourceOption) (*PowerPanel, error) {
	var resource PowerPanel
	err := ctx.ReadResource("netbox:dcim/powerPanel:PowerPanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PowerPanel resources.
type powerPanelState struct {
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	LocationId   *int              `pulumi:"locationId"`
	Name         *string           `pulumi:"name"`
	SiteId       *int              `pulumi:"siteId"`
	Tags         []string          `pulumi:"tags"`
}

type PowerPanelState struct {
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	LocationId   pulumi.IntPtrInput
	Name         pulumi.StringPtrInput
	SiteId       pulumi.IntPtrInput
	Tags         pulumi.StringArrayInput
}

func (PowerPanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*powerPanelState)(nil)).Elem()
}

type powerPanelArgs struct {
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	LocationId   *int              `pulumi:"locationId"`
	Name         *string           `pulumi:"name"`
	SiteId       int               `pulumi:"siteId"`
	Tags         []string          `pulumi:"tags"`
}

// The set of arguments for constructing a PowerPanel resource.
type PowerPanelArgs struct {
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	LocationId   pulumi.IntPtrInput
	Name         pulumi.StringPtrInput
	SiteId       pulumi.IntInput
	Tags         pulumi.StringArrayInput
}

func (PowerPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*powerPanelArgs)(nil)).Elem()
}

type PowerPanelInput interface {
	pulumi.Input

	ToPowerPanelOutput() PowerPanelOutput
	ToPowerPanelOutputWithContext(ctx context.Context) PowerPanelOutput
}

func (*PowerPanel) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerPanel)(nil)).Elem()
}

func (i *PowerPanel) ToPowerPanelOutput() PowerPanelOutput {
	return i.ToPowerPanelOutputWithContext(context.Background())
}

func (i *PowerPanel) ToPowerPanelOutputWithContext(ctx context.Context) PowerPanelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerPanelOutput)
}

// PowerPanelArrayInput is an input type that accepts PowerPanelArray and PowerPanelArrayOutput values.
// You can construct a concrete instance of `PowerPanelArrayInput` via:
//
//	PowerPanelArray{ PowerPanelArgs{...} }
type PowerPanelArrayInput interface {
	pulumi.Input

	ToPowerPanelArrayOutput() PowerPanelArrayOutput
	ToPowerPanelArrayOutputWithContext(context.Context) PowerPanelArrayOutput
}

type PowerPanelArray []PowerPanelInput

func (PowerPanelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PowerPanel)(nil)).Elem()
}

func (i PowerPanelArray) ToPowerPanelArrayOutput() PowerPanelArrayOutput {
	return i.ToPowerPanelArrayOutputWithContext(context.Background())
}

func (i PowerPanelArray) ToPowerPanelArrayOutputWithContext(ctx context.Context) PowerPanelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerPanelArrayOutput)
}

// PowerPanelMapInput is an input type that accepts PowerPanelMap and PowerPanelMapOutput values.
// You can construct a concrete instance of `PowerPanelMapInput` via:
//
//	PowerPanelMap{ "key": PowerPanelArgs{...} }
type PowerPanelMapInput interface {
	pulumi.Input

	ToPowerPanelMapOutput() PowerPanelMapOutput
	ToPowerPanelMapOutputWithContext(context.Context) PowerPanelMapOutput
}

type PowerPanelMap map[string]PowerPanelInput

func (PowerPanelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PowerPanel)(nil)).Elem()
}

func (i PowerPanelMap) ToPowerPanelMapOutput() PowerPanelMapOutput {
	return i.ToPowerPanelMapOutputWithContext(context.Background())
}

func (i PowerPanelMap) ToPowerPanelMapOutputWithContext(ctx context.Context) PowerPanelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerPanelMapOutput)
}

type PowerPanelOutput struct{ *pulumi.OutputState }

func (PowerPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerPanel)(nil)).Elem()
}

func (o PowerPanelOutput) ToPowerPanelOutput() PowerPanelOutput {
	return o
}

func (o PowerPanelOutput) ToPowerPanelOutputWithContext(ctx context.Context) PowerPanelOutput {
	return o
}

func (o PowerPanelOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o PowerPanelOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o PowerPanelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PowerPanelOutput) LocationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.IntPtrOutput { return v.LocationId }).(pulumi.IntPtrOutput)
}

func (o PowerPanelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PowerPanelOutput) SiteId() pulumi.IntOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.IntOutput { return v.SiteId }).(pulumi.IntOutput)
}

func (o PowerPanelOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PowerPanel) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type PowerPanelArrayOutput struct{ *pulumi.OutputState }

func (PowerPanelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PowerPanel)(nil)).Elem()
}

func (o PowerPanelArrayOutput) ToPowerPanelArrayOutput() PowerPanelArrayOutput {
	return o
}

func (o PowerPanelArrayOutput) ToPowerPanelArrayOutputWithContext(ctx context.Context) PowerPanelArrayOutput {
	return o
}

func (o PowerPanelArrayOutput) Index(i pulumi.IntInput) PowerPanelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PowerPanel {
		return vs[0].([]*PowerPanel)[vs[1].(int)]
	}).(PowerPanelOutput)
}

type PowerPanelMapOutput struct{ *pulumi.OutputState }

func (PowerPanelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PowerPanel)(nil)).Elem()
}

func (o PowerPanelMapOutput) ToPowerPanelMapOutput() PowerPanelMapOutput {
	return o
}

func (o PowerPanelMapOutput) ToPowerPanelMapOutputWithContext(ctx context.Context) PowerPanelMapOutput {
	return o
}

func (o PowerPanelMapOutput) MapIndex(k pulumi.StringInput) PowerPanelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PowerPanel {
		return vs[0].(map[string]*PowerPanel)[vs[1].(string)]
	}).(PowerPanelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PowerPanelInput)(nil)).Elem(), &PowerPanel{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerPanelArrayInput)(nil)).Elem(), PowerPanelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PowerPanelMapInput)(nil)).Elem(), PowerPanelMap{})
	pulumi.RegisterOutputType(PowerPanelOutput{})
	pulumi.RegisterOutputType(PowerPanelArrayOutput{})
	pulumi.RegisterOutputType(PowerPanelMapOutput{})
}
