// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/inventoryitemrole/):
//
// > Inventory items can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for power supplies, fans, interface optics, etc.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Note that some terraform code is not included in the example for brevity
//			test, err := dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:         pulumi.String("%[1]s"),
//				DeviceTypeId: pulumi.Any(testNetboxDeviceType.Id),
//				TenantId:     pulumi.Any(testNetboxTenant.Id),
//				RoleId:       pulumi.Any(testNetboxDeviceRole.Id),
//				SiteId:       pulumi.Any(testNetboxSite.Id),
//			})
//			if err != nil {
//				return err
//			}
//			testInventoryItemRole, err := dcim.NewInventoryItemRole(ctx, "test", &dcim.InventoryItemRoleArgs{
//				Name:     pulumi.String("Role 1"),
//				Slug:     pulumi.String("role-1-slug"),
//				ColorHex: pulumi.String("123456"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewInventoryItem(ctx, "parent", &dcim.InventoryItemArgs{
//				DeviceId: test.ID(),
//				Name:     pulumi.String("Inventory Item 1"),
//				RoleId:   testInventoryItemRole.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InventoryItemRole struct {
	pulumi.CustomResourceState

	ColorHex     pulumi.StringOutput      `pulumi:"colorHex"`
	CustomFields pulumi.StringMapOutput   `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	Slug         pulumi.StringOutput      `pulumi:"slug"`
	Tags         pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewInventoryItemRole registers a new resource with the given unique name, arguments, and options.
func NewInventoryItemRole(ctx *pulumi.Context,
	name string, args *InventoryItemRoleArgs, opts ...pulumi.ResourceOption) (*InventoryItemRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColorHex == nil {
		return nil, errors.New("invalid value for required argument 'ColorHex'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InventoryItemRole
	err := ctx.RegisterResource("netbox:dcim/inventoryItemRole:InventoryItemRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventoryItemRole gets an existing InventoryItemRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventoryItemRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryItemRoleState, opts ...pulumi.ResourceOption) (*InventoryItemRole, error) {
	var resource InventoryItemRole
	err := ctx.ReadResource("netbox:dcim/inventoryItemRole:InventoryItemRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InventoryItemRole resources.
type inventoryItemRoleState struct {
	ColorHex     *string           `pulumi:"colorHex"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	Slug         *string           `pulumi:"slug"`
	Tags         []string          `pulumi:"tags"`
}

type InventoryItemRoleState struct {
	ColorHex     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Slug         pulumi.StringPtrInput
	Tags         pulumi.StringArrayInput
}

func (InventoryItemRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryItemRoleState)(nil)).Elem()
}

type inventoryItemRoleArgs struct {
	ColorHex     string            `pulumi:"colorHex"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	Slug         string            `pulumi:"slug"`
	Tags         []string          `pulumi:"tags"`
}

// The set of arguments for constructing a InventoryItemRole resource.
type InventoryItemRoleArgs struct {
	ColorHex     pulumi.StringInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Slug         pulumi.StringInput
	Tags         pulumi.StringArrayInput
}

func (InventoryItemRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryItemRoleArgs)(nil)).Elem()
}

type InventoryItemRoleInput interface {
	pulumi.Input

	ToInventoryItemRoleOutput() InventoryItemRoleOutput
	ToInventoryItemRoleOutputWithContext(ctx context.Context) InventoryItemRoleOutput
}

func (*InventoryItemRole) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryItemRole)(nil)).Elem()
}

func (i *InventoryItemRole) ToInventoryItemRoleOutput() InventoryItemRoleOutput {
	return i.ToInventoryItemRoleOutputWithContext(context.Background())
}

func (i *InventoryItemRole) ToInventoryItemRoleOutputWithContext(ctx context.Context) InventoryItemRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemRoleOutput)
}

// InventoryItemRoleArrayInput is an input type that accepts InventoryItemRoleArray and InventoryItemRoleArrayOutput values.
// You can construct a concrete instance of `InventoryItemRoleArrayInput` via:
//
//	InventoryItemRoleArray{ InventoryItemRoleArgs{...} }
type InventoryItemRoleArrayInput interface {
	pulumi.Input

	ToInventoryItemRoleArrayOutput() InventoryItemRoleArrayOutput
	ToInventoryItemRoleArrayOutputWithContext(context.Context) InventoryItemRoleArrayOutput
}

type InventoryItemRoleArray []InventoryItemRoleInput

func (InventoryItemRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryItemRole)(nil)).Elem()
}

func (i InventoryItemRoleArray) ToInventoryItemRoleArrayOutput() InventoryItemRoleArrayOutput {
	return i.ToInventoryItemRoleArrayOutputWithContext(context.Background())
}

func (i InventoryItemRoleArray) ToInventoryItemRoleArrayOutputWithContext(ctx context.Context) InventoryItemRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemRoleArrayOutput)
}

// InventoryItemRoleMapInput is an input type that accepts InventoryItemRoleMap and InventoryItemRoleMapOutput values.
// You can construct a concrete instance of `InventoryItemRoleMapInput` via:
//
//	InventoryItemRoleMap{ "key": InventoryItemRoleArgs{...} }
type InventoryItemRoleMapInput interface {
	pulumi.Input

	ToInventoryItemRoleMapOutput() InventoryItemRoleMapOutput
	ToInventoryItemRoleMapOutputWithContext(context.Context) InventoryItemRoleMapOutput
}

type InventoryItemRoleMap map[string]InventoryItemRoleInput

func (InventoryItemRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryItemRole)(nil)).Elem()
}

func (i InventoryItemRoleMap) ToInventoryItemRoleMapOutput() InventoryItemRoleMapOutput {
	return i.ToInventoryItemRoleMapOutputWithContext(context.Background())
}

func (i InventoryItemRoleMap) ToInventoryItemRoleMapOutputWithContext(ctx context.Context) InventoryItemRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryItemRoleMapOutput)
}

type InventoryItemRoleOutput struct{ *pulumi.OutputState }

func (InventoryItemRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryItemRole)(nil)).Elem()
}

func (o InventoryItemRoleOutput) ToInventoryItemRoleOutput() InventoryItemRoleOutput {
	return o
}

func (o InventoryItemRoleOutput) ToInventoryItemRoleOutputWithContext(ctx context.Context) InventoryItemRoleOutput {
	return o
}

func (o InventoryItemRoleOutput) ColorHex() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringOutput { return v.ColorHex }).(pulumi.StringOutput)
}

func (o InventoryItemRoleOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o InventoryItemRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o InventoryItemRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InventoryItemRoleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o InventoryItemRoleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InventoryItemRole) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type InventoryItemRoleArrayOutput struct{ *pulumi.OutputState }

func (InventoryItemRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryItemRole)(nil)).Elem()
}

func (o InventoryItemRoleArrayOutput) ToInventoryItemRoleArrayOutput() InventoryItemRoleArrayOutput {
	return o
}

func (o InventoryItemRoleArrayOutput) ToInventoryItemRoleArrayOutputWithContext(ctx context.Context) InventoryItemRoleArrayOutput {
	return o
}

func (o InventoryItemRoleArrayOutput) Index(i pulumi.IntInput) InventoryItemRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InventoryItemRole {
		return vs[0].([]*InventoryItemRole)[vs[1].(int)]
	}).(InventoryItemRoleOutput)
}

type InventoryItemRoleMapOutput struct{ *pulumi.OutputState }

func (InventoryItemRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryItemRole)(nil)).Elem()
}

func (o InventoryItemRoleMapOutput) ToInventoryItemRoleMapOutput() InventoryItemRoleMapOutput {
	return o
}

func (o InventoryItemRoleMapOutput) ToInventoryItemRoleMapOutputWithContext(ctx context.Context) InventoryItemRoleMapOutput {
	return o
}

func (o InventoryItemRoleMapOutput) MapIndex(k pulumi.StringInput) InventoryItemRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InventoryItemRole {
		return vs[0].(map[string]*InventoryItemRole)[vs[1].(string)]
	}).(InventoryItemRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemRoleInput)(nil)).Elem(), &InventoryItemRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemRoleArrayInput)(nil)).Elem(), InventoryItemRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryItemRoleMapInput)(nil)).Elem(), InventoryItemRoleMap{})
	pulumi.RegisterOutputType(InventoryItemRoleOutput{})
	pulumi.RegisterOutputType(InventoryItemRoleArrayOutput{})
	pulumi.RegisterOutputType(InventoryItemRoleMapOutput{})
}
