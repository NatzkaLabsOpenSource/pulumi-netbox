// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRackRole(ctx *pulumi.Context, args *LookupRackRoleArgs, opts ...pulumi.InvokeOption) (*LookupRackRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRackRoleResult
	err := ctx.Invoke("netbox:dcim/getRackRole:getRackRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRackRole.
type LookupRackRoleArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getRackRole.
type LookupRackRoleResult struct {
	ColorHex    string `pulumi:"colorHex"`
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id   string   `pulumi:"id"`
	Name string   `pulumi:"name"`
	Slug string   `pulumi:"slug"`
	Tags []string `pulumi:"tags"`
}

func LookupRackRoleOutput(ctx *pulumi.Context, args LookupRackRoleOutputArgs, opts ...pulumi.InvokeOption) LookupRackRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRackRoleResult, error) {
			args := v.(LookupRackRoleArgs)
			r, err := LookupRackRole(ctx, &args, opts...)
			var s LookupRackRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRackRoleResultOutput)
}

// A collection of arguments for invoking getRackRole.
type LookupRackRoleOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRackRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRackRoleArgs)(nil)).Elem()
}

// A collection of values returned by getRackRole.
type LookupRackRoleResultOutput struct{ *pulumi.OutputState }

func (LookupRackRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRackRoleResult)(nil)).Elem()
}

func (o LookupRackRoleResultOutput) ToLookupRackRoleResultOutput() LookupRackRoleResultOutput {
	return o
}

func (o LookupRackRoleResultOutput) ToLookupRackRoleResultOutputWithContext(ctx context.Context) LookupRackRoleResultOutput {
	return o
}

func (o LookupRackRoleResultOutput) ColorHex() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRackRoleResult) string { return v.ColorHex }).(pulumi.StringOutput)
}

func (o LookupRackRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRackRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRackRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRackRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRackRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRackRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRackRoleResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRackRoleResult) string { return v.Slug }).(pulumi.StringOutput)
}

func (o LookupRackRoleResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRackRoleResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRackRoleResultOutput{})
}
