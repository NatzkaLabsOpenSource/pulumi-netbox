// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dcim.LookupPlatform(ctx, &dcim.LookupPlatformArgs{
//				Name: "PANOS",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPlatform(ctx *pulumi.Context, args *LookupPlatformArgs, opts ...pulumi.InvokeOption) (*LookupPlatformResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPlatformResult
	err := ctx.Invoke("netbox:dcim/getPlatform:getPlatform", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlatform.
type LookupPlatformArgs struct {
	ManufacturerId *int   `pulumi:"manufacturerId"`
	Name           string `pulumi:"name"`
}

// A collection of values returned by getPlatform.
type LookupPlatformResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	ManufacturerId *int   `pulumi:"manufacturerId"`
	Name           string `pulumi:"name"`
	Slug           string `pulumi:"slug"`
}

func LookupPlatformOutput(ctx *pulumi.Context, args LookupPlatformOutputArgs, opts ...pulumi.InvokeOption) LookupPlatformResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPlatformResultOutput, error) {
			args := v.(LookupPlatformArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("netbox:dcim/getPlatform:getPlatform", args, LookupPlatformResultOutput{}, options).(LookupPlatformResultOutput), nil
		}).(LookupPlatformResultOutput)
}

// A collection of arguments for invoking getPlatform.
type LookupPlatformOutputArgs struct {
	ManufacturerId pulumi.IntPtrInput `pulumi:"manufacturerId"`
	Name           pulumi.StringInput `pulumi:"name"`
}

func (LookupPlatformOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlatformArgs)(nil)).Elem()
}

// A collection of values returned by getPlatform.
type LookupPlatformResultOutput struct{ *pulumi.OutputState }

func (LookupPlatformResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPlatformResult)(nil)).Elem()
}

func (o LookupPlatformResultOutput) ToLookupPlatformResultOutput() LookupPlatformResultOutput {
	return o
}

func (o LookupPlatformResultOutput) ToLookupPlatformResultOutputWithContext(ctx context.Context) LookupPlatformResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPlatformResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlatformResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPlatformResultOutput) ManufacturerId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPlatformResult) *int { return v.ManufacturerId }).(pulumi.IntPtrOutput)
}

func (o LookupPlatformResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlatformResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPlatformResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPlatformResult) string { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPlatformResultOutput{})
}
