// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerport/):
//
// > A power port is a device component which draws power from some external source (e.g. an upstream power outlet), and generally represents a power supply internal to a device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testDevice, err := dcim.NewDevice(ctx, "testDevice", &dcim.DeviceArgs{
//				DeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),
//				RoleId:       pulumi.Any(netbox_device_role.Test.Id),
//				SiteId:       pulumi.Any(netbox_site.Test.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewDevicePowerPort(ctx, "testDevicePowerPort", &dcim.DevicePowerPortArgs{
//				DeviceId:      testDevice.ID(),
//				MaximumDraw:   pulumi.Int(750),
//				AllocatedDraw: pulumi.Int(500),
//				Type:          pulumi.String("iec-60320-c6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DevicePowerPort struct {
	pulumi.CustomResourceState

	AllocatedDraw pulumi.IntPtrOutput    `pulumi:"allocatedDraw"`
	CustomFields  pulumi.StringMapOutput `pulumi:"customFields"`
	Description   pulumi.StringPtrOutput `pulumi:"description"`
	DeviceId      pulumi.IntOutput       `pulumi:"deviceId"`
	Label         pulumi.StringPtrOutput `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected pulumi.BoolPtrOutput     `pulumi:"markConnected"`
	MaximumDraw   pulumi.IntPtrOutput      `pulumi:"maximumDraw"`
	ModuleId      pulumi.IntPtrOutput      `pulumi:"moduleId"`
	Name          pulumi.StringOutput      `pulumi:"name"`
	Tags          pulumi.StringArrayOutput `pulumi:"tags"`
	// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewDevicePowerPort registers a new resource with the given unique name, arguments, and options.
func NewDevicePowerPort(ctx *pulumi.Context,
	name string, args *DevicePowerPortArgs, opts ...pulumi.ResourceOption) (*DevicePowerPort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DevicePowerPort
	err := ctx.RegisterResource("netbox:dcim/devicePowerPort:DevicePowerPort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevicePowerPort gets an existing DevicePowerPort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevicePowerPort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DevicePowerPortState, opts ...pulumi.ResourceOption) (*DevicePowerPort, error) {
	var resource DevicePowerPort
	err := ctx.ReadResource("netbox:dcim/devicePowerPort:DevicePowerPort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DevicePowerPort resources.
type devicePowerPortState struct {
	AllocatedDraw *int              `pulumi:"allocatedDraw"`
	CustomFields  map[string]string `pulumi:"customFields"`
	Description   *string           `pulumi:"description"`
	DeviceId      *int              `pulumi:"deviceId"`
	Label         *string           `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected *bool    `pulumi:"markConnected"`
	MaximumDraw   *int     `pulumi:"maximumDraw"`
	ModuleId      *int     `pulumi:"moduleId"`
	Name          *string  `pulumi:"name"`
	Tags          []string `pulumi:"tags"`
	// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
	Type *string `pulumi:"type"`
}

type DevicePowerPortState struct {
	AllocatedDraw pulumi.IntPtrInput
	CustomFields  pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	DeviceId      pulumi.IntPtrInput
	Label         pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected pulumi.BoolPtrInput
	MaximumDraw   pulumi.IntPtrInput
	ModuleId      pulumi.IntPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringArrayInput
	// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
	Type pulumi.StringPtrInput
}

func (DevicePowerPortState) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePowerPortState)(nil)).Elem()
}

type devicePowerPortArgs struct {
	AllocatedDraw *int              `pulumi:"allocatedDraw"`
	CustomFields  map[string]string `pulumi:"customFields"`
	Description   *string           `pulumi:"description"`
	DeviceId      int               `pulumi:"deviceId"`
	Label         *string           `pulumi:"label"`
	// Defaults to `false`.
	MarkConnected *bool    `pulumi:"markConnected"`
	MaximumDraw   *int     `pulumi:"maximumDraw"`
	ModuleId      *int     `pulumi:"moduleId"`
	Name          *string  `pulumi:"name"`
	Tags          []string `pulumi:"tags"`
	// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DevicePowerPort resource.
type DevicePowerPortArgs struct {
	AllocatedDraw pulumi.IntPtrInput
	CustomFields  pulumi.StringMapInput
	Description   pulumi.StringPtrInput
	DeviceId      pulumi.IntInput
	Label         pulumi.StringPtrInput
	// Defaults to `false`.
	MarkConnected pulumi.BoolPtrInput
	MaximumDraw   pulumi.IntPtrInput
	ModuleId      pulumi.IntPtrInput
	Name          pulumi.StringPtrInput
	Tags          pulumi.StringArrayInput
	// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
	Type pulumi.StringPtrInput
}

func (DevicePowerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*devicePowerPortArgs)(nil)).Elem()
}

type DevicePowerPortInput interface {
	pulumi.Input

	ToDevicePowerPortOutput() DevicePowerPortOutput
	ToDevicePowerPortOutputWithContext(ctx context.Context) DevicePowerPortOutput
}

func (*DevicePowerPort) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePowerPort)(nil)).Elem()
}

func (i *DevicePowerPort) ToDevicePowerPortOutput() DevicePowerPortOutput {
	return i.ToDevicePowerPortOutputWithContext(context.Background())
}

func (i *DevicePowerPort) ToDevicePowerPortOutputWithContext(ctx context.Context) DevicePowerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePowerPortOutput)
}

// DevicePowerPortArrayInput is an input type that accepts DevicePowerPortArray and DevicePowerPortArrayOutput values.
// You can construct a concrete instance of `DevicePowerPortArrayInput` via:
//
//	DevicePowerPortArray{ DevicePowerPortArgs{...} }
type DevicePowerPortArrayInput interface {
	pulumi.Input

	ToDevicePowerPortArrayOutput() DevicePowerPortArrayOutput
	ToDevicePowerPortArrayOutputWithContext(context.Context) DevicePowerPortArrayOutput
}

type DevicePowerPortArray []DevicePowerPortInput

func (DevicePowerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePowerPort)(nil)).Elem()
}

func (i DevicePowerPortArray) ToDevicePowerPortArrayOutput() DevicePowerPortArrayOutput {
	return i.ToDevicePowerPortArrayOutputWithContext(context.Background())
}

func (i DevicePowerPortArray) ToDevicePowerPortArrayOutputWithContext(ctx context.Context) DevicePowerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePowerPortArrayOutput)
}

// DevicePowerPortMapInput is an input type that accepts DevicePowerPortMap and DevicePowerPortMapOutput values.
// You can construct a concrete instance of `DevicePowerPortMapInput` via:
//
//	DevicePowerPortMap{ "key": DevicePowerPortArgs{...} }
type DevicePowerPortMapInput interface {
	pulumi.Input

	ToDevicePowerPortMapOutput() DevicePowerPortMapOutput
	ToDevicePowerPortMapOutputWithContext(context.Context) DevicePowerPortMapOutput
}

type DevicePowerPortMap map[string]DevicePowerPortInput

func (DevicePowerPortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePowerPort)(nil)).Elem()
}

func (i DevicePowerPortMap) ToDevicePowerPortMapOutput() DevicePowerPortMapOutput {
	return i.ToDevicePowerPortMapOutputWithContext(context.Background())
}

func (i DevicePowerPortMap) ToDevicePowerPortMapOutputWithContext(ctx context.Context) DevicePowerPortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DevicePowerPortMapOutput)
}

type DevicePowerPortOutput struct{ *pulumi.OutputState }

func (DevicePowerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DevicePowerPort)(nil)).Elem()
}

func (o DevicePowerPortOutput) ToDevicePowerPortOutput() DevicePowerPortOutput {
	return o
}

func (o DevicePowerPortOutput) ToDevicePowerPortOutputWithContext(ctx context.Context) DevicePowerPortOutput {
	return o
}

func (o DevicePowerPortOutput) AllocatedDraw() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.IntPtrOutput { return v.AllocatedDraw }).(pulumi.IntPtrOutput)
}

func (o DevicePowerPortOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o DevicePowerPortOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DevicePowerPortOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

func (o DevicePowerPortOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// Defaults to `false`.
func (o DevicePowerPortOutput) MarkConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.BoolPtrOutput { return v.MarkConnected }).(pulumi.BoolPtrOutput)
}

func (o DevicePowerPortOutput) MaximumDraw() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.IntPtrOutput { return v.MaximumDraw }).(pulumi.IntPtrOutput)
}

func (o DevicePowerPortOutput) ModuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.IntPtrOutput { return v.ModuleId }).(pulumi.IntPtrOutput)
}

func (o DevicePowerPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DevicePowerPortOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].
func (o DevicePowerPortOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DevicePowerPort) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type DevicePowerPortArrayOutput struct{ *pulumi.OutputState }

func (DevicePowerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DevicePowerPort)(nil)).Elem()
}

func (o DevicePowerPortArrayOutput) ToDevicePowerPortArrayOutput() DevicePowerPortArrayOutput {
	return o
}

func (o DevicePowerPortArrayOutput) ToDevicePowerPortArrayOutputWithContext(ctx context.Context) DevicePowerPortArrayOutput {
	return o
}

func (o DevicePowerPortArrayOutput) Index(i pulumi.IntInput) DevicePowerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DevicePowerPort {
		return vs[0].([]*DevicePowerPort)[vs[1].(int)]
	}).(DevicePowerPortOutput)
}

type DevicePowerPortMapOutput struct{ *pulumi.OutputState }

func (DevicePowerPortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DevicePowerPort)(nil)).Elem()
}

func (o DevicePowerPortMapOutput) ToDevicePowerPortMapOutput() DevicePowerPortMapOutput {
	return o
}

func (o DevicePowerPortMapOutput) ToDevicePowerPortMapOutputWithContext(ctx context.Context) DevicePowerPortMapOutput {
	return o
}

func (o DevicePowerPortMapOutput) MapIndex(k pulumi.StringInput) DevicePowerPortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DevicePowerPort {
		return vs[0].(map[string]*DevicePowerPort)[vs[1].(string)]
	}).(DevicePowerPortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePowerPortInput)(nil)).Elem(), &DevicePowerPort{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePowerPortArrayInput)(nil)).Elem(), DevicePowerPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DevicePowerPortMapInput)(nil)).Elem(), DevicePowerPortMap{})
	pulumi.RegisterOutputType(DevicePowerPortOutput{})
	pulumi.RegisterOutputType(DevicePowerPortArrayOutput{})
	pulumi.RegisterOutputType(DevicePowerPortMapOutput{})
}
