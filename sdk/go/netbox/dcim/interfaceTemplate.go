// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/interfacetemplate/):
//
// > A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewManufacturer(ctx, "test", &dcim.ManufacturerArgs{
//				Name: pulumi.String("my-manufacturer"),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceType, err := dcim.NewDeviceType(ctx, "test", &dcim.DeviceTypeArgs{
//				Model:          pulumi.String("test-model"),
//				Slug:           pulumi.String("test-model"),
//				PartNumber:     pulumi.String("test-part-number"),
//				ManufacturerId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewInterfaceTemplate(ctx, "test", &dcim.InterfaceTemplateArgs{
//				Name:         pulumi.String("eth0"),
//				Description:  pulumi.String("eth0 description"),
//				Label:        pulumi.String("eth0 label"),
//				DeviceTypeId: testDeviceType.ID(),
//				Type:         pulumi.String("100base-tx"),
//				MgmtOnly:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InterfaceTemplate struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	DeviceTypeId pulumi.IntPtrOutput    `pulumi:"deviceTypeId"`
	Label        pulumi.StringPtrOutput `pulumi:"label"`
	MgmtOnly     pulumi.BoolPtrOutput   `pulumi:"mgmtOnly"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	ModuleTypeId pulumi.IntPtrOutput `pulumi:"moduleTypeId"`
	Name         pulumi.StringOutput `pulumi:"name"`
	Type         pulumi.StringOutput `pulumi:"type"`
}

// NewInterfaceTemplate registers a new resource with the given unique name, arguments, and options.
func NewInterfaceTemplate(ctx *pulumi.Context,
	name string, args *InterfaceTemplateArgs, opts ...pulumi.ResourceOption) (*InterfaceTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceTemplate
	err := ctx.RegisterResource("netbox:dcim/interfaceTemplate:InterfaceTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceTemplate gets an existing InterfaceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceTemplateState, opts ...pulumi.ResourceOption) (*InterfaceTemplate, error) {
	var resource InterfaceTemplate
	err := ctx.ReadResource("netbox:dcim/interfaceTemplate:InterfaceTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceTemplate resources.
type interfaceTemplateState struct {
	Description *string `pulumi:"description"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	DeviceTypeId *int    `pulumi:"deviceTypeId"`
	Label        *string `pulumi:"label"`
	MgmtOnly     *bool   `pulumi:"mgmtOnly"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	ModuleTypeId *int    `pulumi:"moduleTypeId"`
	Name         *string `pulumi:"name"`
	Type         *string `pulumi:"type"`
}

type InterfaceTemplateState struct {
	Description pulumi.StringPtrInput
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	DeviceTypeId pulumi.IntPtrInput
	Label        pulumi.StringPtrInput
	MgmtOnly     pulumi.BoolPtrInput
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	ModuleTypeId pulumi.IntPtrInput
	Name         pulumi.StringPtrInput
	Type         pulumi.StringPtrInput
}

func (InterfaceTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceTemplateState)(nil)).Elem()
}

type interfaceTemplateArgs struct {
	Description *string `pulumi:"description"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	DeviceTypeId *int    `pulumi:"deviceTypeId"`
	Label        *string `pulumi:"label"`
	MgmtOnly     *bool   `pulumi:"mgmtOnly"`
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	ModuleTypeId *int    `pulumi:"moduleTypeId"`
	Name         *string `pulumi:"name"`
	Type         string  `pulumi:"type"`
}

// The set of arguments for constructing a InterfaceTemplate resource.
type InterfaceTemplateArgs struct {
	Description pulumi.StringPtrInput
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	DeviceTypeId pulumi.IntPtrInput
	Label        pulumi.StringPtrInput
	MgmtOnly     pulumi.BoolPtrInput
	// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
	ModuleTypeId pulumi.IntPtrInput
	Name         pulumi.StringPtrInput
	Type         pulumi.StringInput
}

func (InterfaceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceTemplateArgs)(nil)).Elem()
}

type InterfaceTemplateInput interface {
	pulumi.Input

	ToInterfaceTemplateOutput() InterfaceTemplateOutput
	ToInterfaceTemplateOutputWithContext(ctx context.Context) InterfaceTemplateOutput
}

func (*InterfaceTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceTemplate)(nil)).Elem()
}

func (i *InterfaceTemplate) ToInterfaceTemplateOutput() InterfaceTemplateOutput {
	return i.ToInterfaceTemplateOutputWithContext(context.Background())
}

func (i *InterfaceTemplate) ToInterfaceTemplateOutputWithContext(ctx context.Context) InterfaceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTemplateOutput)
}

// InterfaceTemplateArrayInput is an input type that accepts InterfaceTemplateArray and InterfaceTemplateArrayOutput values.
// You can construct a concrete instance of `InterfaceTemplateArrayInput` via:
//
//	InterfaceTemplateArray{ InterfaceTemplateArgs{...} }
type InterfaceTemplateArrayInput interface {
	pulumi.Input

	ToInterfaceTemplateArrayOutput() InterfaceTemplateArrayOutput
	ToInterfaceTemplateArrayOutputWithContext(context.Context) InterfaceTemplateArrayOutput
}

type InterfaceTemplateArray []InterfaceTemplateInput

func (InterfaceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceTemplate)(nil)).Elem()
}

func (i InterfaceTemplateArray) ToInterfaceTemplateArrayOutput() InterfaceTemplateArrayOutput {
	return i.ToInterfaceTemplateArrayOutputWithContext(context.Background())
}

func (i InterfaceTemplateArray) ToInterfaceTemplateArrayOutputWithContext(ctx context.Context) InterfaceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTemplateArrayOutput)
}

// InterfaceTemplateMapInput is an input type that accepts InterfaceTemplateMap and InterfaceTemplateMapOutput values.
// You can construct a concrete instance of `InterfaceTemplateMapInput` via:
//
//	InterfaceTemplateMap{ "key": InterfaceTemplateArgs{...} }
type InterfaceTemplateMapInput interface {
	pulumi.Input

	ToInterfaceTemplateMapOutput() InterfaceTemplateMapOutput
	ToInterfaceTemplateMapOutputWithContext(context.Context) InterfaceTemplateMapOutput
}

type InterfaceTemplateMap map[string]InterfaceTemplateInput

func (InterfaceTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceTemplate)(nil)).Elem()
}

func (i InterfaceTemplateMap) ToInterfaceTemplateMapOutput() InterfaceTemplateMapOutput {
	return i.ToInterfaceTemplateMapOutputWithContext(context.Background())
}

func (i InterfaceTemplateMap) ToInterfaceTemplateMapOutputWithContext(ctx context.Context) InterfaceTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTemplateMapOutput)
}

type InterfaceTemplateOutput struct{ *pulumi.OutputState }

func (InterfaceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceTemplate)(nil)).Elem()
}

func (o InterfaceTemplateOutput) ToInterfaceTemplateOutput() InterfaceTemplateOutput {
	return o
}

func (o InterfaceTemplateOutput) ToInterfaceTemplateOutputWithContext(ctx context.Context) InterfaceTemplateOutput {
	return o
}

func (o InterfaceTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
func (o InterfaceTemplateOutput) DeviceTypeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.IntPtrOutput { return v.DeviceTypeId }).(pulumi.IntPtrOutput)
}

func (o InterfaceTemplateOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

func (o InterfaceTemplateOutput) MgmtOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.BoolPtrOutput { return v.MgmtOnly }).(pulumi.BoolPtrOutput)
}

// Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
func (o InterfaceTemplateOutput) ModuleTypeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.IntPtrOutput { return v.ModuleTypeId }).(pulumi.IntPtrOutput)
}

func (o InterfaceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o InterfaceTemplateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceTemplate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InterfaceTemplateArrayOutput struct{ *pulumi.OutputState }

func (InterfaceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceTemplate)(nil)).Elem()
}

func (o InterfaceTemplateArrayOutput) ToInterfaceTemplateArrayOutput() InterfaceTemplateArrayOutput {
	return o
}

func (o InterfaceTemplateArrayOutput) ToInterfaceTemplateArrayOutputWithContext(ctx context.Context) InterfaceTemplateArrayOutput {
	return o
}

func (o InterfaceTemplateArrayOutput) Index(i pulumi.IntInput) InterfaceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceTemplate {
		return vs[0].([]*InterfaceTemplate)[vs[1].(int)]
	}).(InterfaceTemplateOutput)
}

type InterfaceTemplateMapOutput struct{ *pulumi.OutputState }

func (InterfaceTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceTemplate)(nil)).Elem()
}

func (o InterfaceTemplateMapOutput) ToInterfaceTemplateMapOutput() InterfaceTemplateMapOutput {
	return o
}

func (o InterfaceTemplateMapOutput) ToInterfaceTemplateMapOutputWithContext(ctx context.Context) InterfaceTemplateMapOutput {
	return o
}

func (o InterfaceTemplateMapOutput) MapIndex(k pulumi.StringInput) InterfaceTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceTemplate {
		return vs[0].(map[string]*InterfaceTemplate)[vs[1].(string)]
	}).(InterfaceTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTemplateInput)(nil)).Elem(), &InterfaceTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTemplateArrayInput)(nil)).Elem(), InterfaceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTemplateMapInput)(nil)).Elem(), InterfaceTemplateMap{})
	pulumi.RegisterOutputType(InterfaceTemplateOutput{})
	pulumi.RegisterOutputType(InterfaceTemplateArrayOutput{})
	pulumi.RegisterOutputType(InterfaceTemplateMapOutput{})
}
