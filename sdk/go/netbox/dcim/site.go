// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#sites):
//
// > How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two colocation facilities.
// >
// > Each site must be assigned a unique name and may optionally be assigned to a region and/or tenant.
type Site struct {
	pulumi.CustomResourceState

	AsnIds          pulumi.IntArrayOutput   `pulumi:"asnIds"`
	Comments        pulumi.StringPtrOutput  `pulumi:"comments"`
	CustomFields    pulumi.StringMapOutput  `pulumi:"customFields"`
	Description     pulumi.StringPtrOutput  `pulumi:"description"`
	Facility        pulumi.StringPtrOutput  `pulumi:"facility"`
	GroupId         pulumi.IntPtrOutput     `pulumi:"groupId"`
	Latitude        pulumi.Float64PtrOutput `pulumi:"latitude"`
	Longitude       pulumi.Float64PtrOutput `pulumi:"longitude"`
	Name            pulumi.StringOutput     `pulumi:"name"`
	PhysicalAddress pulumi.StringPtrOutput  `pulumi:"physicalAddress"`
	RegionId        pulumi.IntPtrOutput     `pulumi:"regionId"`
	ShippingAddress pulumi.StringPtrOutput  `pulumi:"shippingAddress"`
	Slug            pulumi.StringOutput     `pulumi:"slug"`
	// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
	Status   pulumi.StringPtrOutput   `pulumi:"status"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TenantId pulumi.IntPtrOutput      `pulumi:"tenantId"`
	Timezone pulumi.StringPtrOutput   `pulumi:"timezone"`
}

// NewSite registers a new resource with the given unique name, arguments, and options.
func NewSite(ctx *pulumi.Context,
	name string, args *SiteArgs, opts ...pulumi.ResourceOption) (*Site, error) {
	if args == nil {
		args = &SiteArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Site
	err := ctx.RegisterResource("netbox:dcim/site:Site", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSite gets an existing Site resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteState, opts ...pulumi.ResourceOption) (*Site, error) {
	var resource Site
	err := ctx.ReadResource("netbox:dcim/site:Site", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Site resources.
type siteState struct {
	AsnIds          []int             `pulumi:"asnIds"`
	Comments        *string           `pulumi:"comments"`
	CustomFields    map[string]string `pulumi:"customFields"`
	Description     *string           `pulumi:"description"`
	Facility        *string           `pulumi:"facility"`
	GroupId         *int              `pulumi:"groupId"`
	Latitude        *float64          `pulumi:"latitude"`
	Longitude       *float64          `pulumi:"longitude"`
	Name            *string           `pulumi:"name"`
	PhysicalAddress *string           `pulumi:"physicalAddress"`
	RegionId        *int              `pulumi:"regionId"`
	ShippingAddress *string           `pulumi:"shippingAddress"`
	Slug            *string           `pulumi:"slug"`
	// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TagsAlls []string `pulumi:"tagsAlls"`
	TenantId *int     `pulumi:"tenantId"`
	Timezone *string  `pulumi:"timezone"`
}

type SiteState struct {
	AsnIds          pulumi.IntArrayInput
	Comments        pulumi.StringPtrInput
	CustomFields    pulumi.StringMapInput
	Description     pulumi.StringPtrInput
	Facility        pulumi.StringPtrInput
	GroupId         pulumi.IntPtrInput
	Latitude        pulumi.Float64PtrInput
	Longitude       pulumi.Float64PtrInput
	Name            pulumi.StringPtrInput
	PhysicalAddress pulumi.StringPtrInput
	RegionId        pulumi.IntPtrInput
	ShippingAddress pulumi.StringPtrInput
	Slug            pulumi.StringPtrInput
	// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TagsAlls pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	Timezone pulumi.StringPtrInput
}

func (SiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteState)(nil)).Elem()
}

type siteArgs struct {
	AsnIds          []int             `pulumi:"asnIds"`
	Comments        *string           `pulumi:"comments"`
	CustomFields    map[string]string `pulumi:"customFields"`
	Description     *string           `pulumi:"description"`
	Facility        *string           `pulumi:"facility"`
	GroupId         *int              `pulumi:"groupId"`
	Latitude        *float64          `pulumi:"latitude"`
	Longitude       *float64          `pulumi:"longitude"`
	Name            *string           `pulumi:"name"`
	PhysicalAddress *string           `pulumi:"physicalAddress"`
	RegionId        *int              `pulumi:"regionId"`
	ShippingAddress *string           `pulumi:"shippingAddress"`
	Slug            *string           `pulumi:"slug"`
	// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	Timezone *string  `pulumi:"timezone"`
}

// The set of arguments for constructing a Site resource.
type SiteArgs struct {
	AsnIds          pulumi.IntArrayInput
	Comments        pulumi.StringPtrInput
	CustomFields    pulumi.StringMapInput
	Description     pulumi.StringPtrInput
	Facility        pulumi.StringPtrInput
	GroupId         pulumi.IntPtrInput
	Latitude        pulumi.Float64PtrInput
	Longitude       pulumi.Float64PtrInput
	Name            pulumi.StringPtrInput
	PhysicalAddress pulumi.StringPtrInput
	RegionId        pulumi.IntPtrInput
	ShippingAddress pulumi.StringPtrInput
	Slug            pulumi.StringPtrInput
	// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	Timezone pulumi.StringPtrInput
}

func (SiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteArgs)(nil)).Elem()
}

type SiteInput interface {
	pulumi.Input

	ToSiteOutput() SiteOutput
	ToSiteOutputWithContext(ctx context.Context) SiteOutput
}

func (*Site) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (i *Site) ToSiteOutput() SiteOutput {
	return i.ToSiteOutputWithContext(context.Background())
}

func (i *Site) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteOutput)
}

// SiteArrayInput is an input type that accepts SiteArray and SiteArrayOutput values.
// You can construct a concrete instance of `SiteArrayInput` via:
//
//	SiteArray{ SiteArgs{...} }
type SiteArrayInput interface {
	pulumi.Input

	ToSiteArrayOutput() SiteArrayOutput
	ToSiteArrayOutputWithContext(context.Context) SiteArrayOutput
}

type SiteArray []SiteInput

func (SiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (i SiteArray) ToSiteArrayOutput() SiteArrayOutput {
	return i.ToSiteArrayOutputWithContext(context.Background())
}

func (i SiteArray) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteArrayOutput)
}

// SiteMapInput is an input type that accepts SiteMap and SiteMapOutput values.
// You can construct a concrete instance of `SiteMapInput` via:
//
//	SiteMap{ "key": SiteArgs{...} }
type SiteMapInput interface {
	pulumi.Input

	ToSiteMapOutput() SiteMapOutput
	ToSiteMapOutputWithContext(context.Context) SiteMapOutput
}

type SiteMap map[string]SiteInput

func (SiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (i SiteMap) ToSiteMapOutput() SiteMapOutput {
	return i.ToSiteMapOutputWithContext(context.Background())
}

func (i SiteMap) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteMapOutput)
}

type SiteOutput struct{ *pulumi.OutputState }

func (SiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Site)(nil)).Elem()
}

func (o SiteOutput) ToSiteOutput() SiteOutput {
	return o
}

func (o SiteOutput) ToSiteOutputWithContext(ctx context.Context) SiteOutput {
	return o
}

func (o SiteOutput) AsnIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Site) pulumi.IntArrayOutput { return v.AsnIds }).(pulumi.IntArrayOutput)
}

func (o SiteOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Site) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o SiteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Facility }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

func (o SiteOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Site) pulumi.Float64PtrOutput { return v.Latitude }).(pulumi.Float64PtrOutput)
}

func (o SiteOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Site) pulumi.Float64PtrOutput { return v.Longitude }).(pulumi.Float64PtrOutput)
}

func (o SiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SiteOutput) PhysicalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.PhysicalAddress }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) RegionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.IntPtrOutput { return v.RegionId }).(pulumi.IntPtrOutput)
}

func (o SiteOutput) ShippingAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.ShippingAddress }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Site) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
func (o SiteOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o SiteOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Site) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o SiteOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Site) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o SiteOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o SiteOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Site) pulumi.StringPtrOutput { return v.Timezone }).(pulumi.StringPtrOutput)
}

type SiteArrayOutput struct{ *pulumi.OutputState }

func (SiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Site)(nil)).Elem()
}

func (o SiteArrayOutput) ToSiteArrayOutput() SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) ToSiteArrayOutputWithContext(ctx context.Context) SiteArrayOutput {
	return o
}

func (o SiteArrayOutput) Index(i pulumi.IntInput) SiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Site {
		return vs[0].([]*Site)[vs[1].(int)]
	}).(SiteOutput)
}

type SiteMapOutput struct{ *pulumi.OutputState }

func (SiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Site)(nil)).Elem()
}

func (o SiteMapOutput) ToSiteMapOutput() SiteMapOutput {
	return o
}

func (o SiteMapOutput) ToSiteMapOutputWithContext(ctx context.Context) SiteMapOutput {
	return o
}

func (o SiteMapOutput) MapIndex(k pulumi.StringInput) SiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Site {
		return vs[0].(map[string]*Site)[vs[1].(string)]
	}).(SiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SiteInput)(nil)).Elem(), &Site{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteArrayInput)(nil)).Elem(), SiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteMapInput)(nil)).Elem(), SiteMap{})
	pulumi.RegisterOutputType(SiteOutput{})
	pulumi.RegisterOutputType(SiteArrayOutput{})
	pulumi.RegisterOutputType(SiteMapOutput{})
}
