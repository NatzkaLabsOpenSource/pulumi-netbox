// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/facilities/#site-groups):
//
// > Like regions, site groups can be arranged in a recursive hierarchy for grouping sites. However, whereas regions are intended for geographic organization, site groups may be used for functional grouping. For example, you might classify sites as corporate, branch, or customer sites in addition to where they are physically located.
// >
// > The use of both regions and site groups affords to independent but complementary dimensions across which sites can be organized.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			parent, err := dcim.NewSiteGroup(ctx, "parent", &dcim.SiteGroupArgs{
//				Name:        pulumi.String("parent"),
//				Description: pulumi.String("sample description"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewSiteGroup(ctx, "child", &dcim.SiteGroupArgs{
//				Name:        pulumi.String("child"),
//				Description: pulumi.String("sample description"),
//				ParentId:    parent.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SiteGroup struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	ParentId    pulumi.IntPtrOutput    `pulumi:"parentId"`
	Slug        pulumi.StringOutput    `pulumi:"slug"`
}

// NewSiteGroup registers a new resource with the given unique name, arguments, and options.
func NewSiteGroup(ctx *pulumi.Context,
	name string, args *SiteGroupArgs, opts ...pulumi.ResourceOption) (*SiteGroup, error) {
	if args == nil {
		args = &SiteGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SiteGroup
	err := ctx.RegisterResource("netbox:dcim/siteGroup:SiteGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteGroup gets an existing SiteGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteGroupState, opts ...pulumi.ResourceOption) (*SiteGroup, error) {
	var resource SiteGroup
	err := ctx.ReadResource("netbox:dcim/siteGroup:SiteGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteGroup resources.
type siteGroupState struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	ParentId    *int    `pulumi:"parentId"`
	Slug        *string `pulumi:"slug"`
}

type SiteGroupState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ParentId    pulumi.IntPtrInput
	Slug        pulumi.StringPtrInput
}

func (SiteGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteGroupState)(nil)).Elem()
}

type siteGroupArgs struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
	ParentId    *int    `pulumi:"parentId"`
	Slug        *string `pulumi:"slug"`
}

// The set of arguments for constructing a SiteGroup resource.
type SiteGroupArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	ParentId    pulumi.IntPtrInput
	Slug        pulumi.StringPtrInput
}

func (SiteGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteGroupArgs)(nil)).Elem()
}

type SiteGroupInput interface {
	pulumi.Input

	ToSiteGroupOutput() SiteGroupOutput
	ToSiteGroupOutputWithContext(ctx context.Context) SiteGroupOutput
}

func (*SiteGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteGroup)(nil)).Elem()
}

func (i *SiteGroup) ToSiteGroupOutput() SiteGroupOutput {
	return i.ToSiteGroupOutputWithContext(context.Background())
}

func (i *SiteGroup) ToSiteGroupOutputWithContext(ctx context.Context) SiteGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteGroupOutput)
}

// SiteGroupArrayInput is an input type that accepts SiteGroupArray and SiteGroupArrayOutput values.
// You can construct a concrete instance of `SiteGroupArrayInput` via:
//
//	SiteGroupArray{ SiteGroupArgs{...} }
type SiteGroupArrayInput interface {
	pulumi.Input

	ToSiteGroupArrayOutput() SiteGroupArrayOutput
	ToSiteGroupArrayOutputWithContext(context.Context) SiteGroupArrayOutput
}

type SiteGroupArray []SiteGroupInput

func (SiteGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SiteGroup)(nil)).Elem()
}

func (i SiteGroupArray) ToSiteGroupArrayOutput() SiteGroupArrayOutput {
	return i.ToSiteGroupArrayOutputWithContext(context.Background())
}

func (i SiteGroupArray) ToSiteGroupArrayOutputWithContext(ctx context.Context) SiteGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteGroupArrayOutput)
}

// SiteGroupMapInput is an input type that accepts SiteGroupMap and SiteGroupMapOutput values.
// You can construct a concrete instance of `SiteGroupMapInput` via:
//
//	SiteGroupMap{ "key": SiteGroupArgs{...} }
type SiteGroupMapInput interface {
	pulumi.Input

	ToSiteGroupMapOutput() SiteGroupMapOutput
	ToSiteGroupMapOutputWithContext(context.Context) SiteGroupMapOutput
}

type SiteGroupMap map[string]SiteGroupInput

func (SiteGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SiteGroup)(nil)).Elem()
}

func (i SiteGroupMap) ToSiteGroupMapOutput() SiteGroupMapOutput {
	return i.ToSiteGroupMapOutputWithContext(context.Background())
}

func (i SiteGroupMap) ToSiteGroupMapOutputWithContext(ctx context.Context) SiteGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteGroupMapOutput)
}

type SiteGroupOutput struct{ *pulumi.OutputState }

func (SiteGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteGroup)(nil)).Elem()
}

func (o SiteGroupOutput) ToSiteGroupOutput() SiteGroupOutput {
	return o
}

func (o SiteGroupOutput) ToSiteGroupOutputWithContext(ctx context.Context) SiteGroupOutput {
	return o
}

func (o SiteGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SiteGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SiteGroupOutput) ParentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SiteGroup) pulumi.IntPtrOutput { return v.ParentId }).(pulumi.IntPtrOutput)
}

func (o SiteGroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SiteGroup) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type SiteGroupArrayOutput struct{ *pulumi.OutputState }

func (SiteGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SiteGroup)(nil)).Elem()
}

func (o SiteGroupArrayOutput) ToSiteGroupArrayOutput() SiteGroupArrayOutput {
	return o
}

func (o SiteGroupArrayOutput) ToSiteGroupArrayOutputWithContext(ctx context.Context) SiteGroupArrayOutput {
	return o
}

func (o SiteGroupArrayOutput) Index(i pulumi.IntInput) SiteGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SiteGroup {
		return vs[0].([]*SiteGroup)[vs[1].(int)]
	}).(SiteGroupOutput)
}

type SiteGroupMapOutput struct{ *pulumi.OutputState }

func (SiteGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SiteGroup)(nil)).Elem()
}

func (o SiteGroupMapOutput) ToSiteGroupMapOutput() SiteGroupMapOutput {
	return o
}

func (o SiteGroupMapOutput) ToSiteGroupMapOutputWithContext(ctx context.Context) SiteGroupMapOutput {
	return o
}

func (o SiteGroupMapOutput) MapIndex(k pulumi.StringInput) SiteGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SiteGroup {
		return vs[0].(map[string]*SiteGroup)[vs[1].(string)]
	}).(SiteGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SiteGroupInput)(nil)).Elem(), &SiteGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteGroupArrayInput)(nil)).Elem(), SiteGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SiteGroupMapInput)(nil)).Elem(), SiteGroupMap{})
	pulumi.RegisterOutputType(SiteGroupOutput{})
	pulumi.RegisterOutputType(SiteGroupArrayOutput{})
	pulumi.RegisterOutputType(SiteGroupMapOutput{})
}
