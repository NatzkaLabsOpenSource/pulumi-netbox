// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):
//
// > Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assumes a device with ID 123 exists
//			_, err := dcim.NewDeviceInterface(ctx, "test", &dcim.DeviceInterfaceArgs{
//				Name:     pulumi.String("testinterface"),
//				DeviceId: pulumi.Int(123),
//				Type:     pulumi.String("1000base-t"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeviceInterface struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	DeviceId    pulumi.IntOutput       `pulumi:"deviceId"`
	// Defaults to `true`.
	Enabled pulumi.BoolPtrOutput   `pulumi:"enabled"`
	Label   pulumi.StringPtrOutput `pulumi:"label"`
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceId pulumi.IntPtrOutput `pulumi:"lagDeviceInterfaceId"`
	// The MAC address as string from the first MAC address assigned to this interface, if any.
	MacAddress   pulumi.StringOutput                  `pulumi:"macAddress"`
	MacAddresses DeviceInterfaceMacAddressArrayOutput `pulumi:"macAddresses"`
	Mgmtonly     pulumi.BoolPtrOutput                 `pulumi:"mgmtonly"`
	// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	Mtu  pulumi.IntPtrOutput    `pulumi:"mtu"`
	Name pulumi.StringOutput    `pulumi:"name"`
	// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceId pulumi.IntPtrOutput      `pulumi:"parentDeviceInterfaceId"`
	Speed                   pulumi.IntPtrOutput      `pulumi:"speed"`
	TaggedVlans             pulumi.IntArrayOutput    `pulumi:"taggedVlans"`
	Tags                    pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls                pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	Type                    pulumi.StringOutput      `pulumi:"type"`
	UntaggedVlan            pulumi.IntPtrOutput      `pulumi:"untaggedVlan"`
}

// NewDeviceInterface registers a new resource with the given unique name, arguments, and options.
func NewDeviceInterface(ctx *pulumi.Context,
	name string, args *DeviceInterfaceArgs, opts ...pulumi.ResourceOption) (*DeviceInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeviceInterface
	err := ctx.RegisterResource("netbox:dcim/deviceInterface:DeviceInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceInterface gets an existing DeviceInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceInterfaceState, opts ...pulumi.ResourceOption) (*DeviceInterface, error) {
	var resource DeviceInterface
	err := ctx.ReadResource("netbox:dcim/deviceInterface:DeviceInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceInterface resources.
type deviceInterfaceState struct {
	Description *string `pulumi:"description"`
	DeviceId    *int    `pulumi:"deviceId"`
	// Defaults to `true`.
	Enabled *bool   `pulumi:"enabled"`
	Label   *string `pulumi:"label"`
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceId *int `pulumi:"lagDeviceInterfaceId"`
	// The MAC address as string from the first MAC address assigned to this interface, if any.
	MacAddress   *string                     `pulumi:"macAddress"`
	MacAddresses []DeviceInterfaceMacAddress `pulumi:"macAddresses"`
	Mgmtonly     *bool                       `pulumi:"mgmtonly"`
	// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
	Mode *string `pulumi:"mode"`
	Mtu  *int    `pulumi:"mtu"`
	Name *string `pulumi:"name"`
	// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceId *int     `pulumi:"parentDeviceInterfaceId"`
	Speed                   *int     `pulumi:"speed"`
	TaggedVlans             []int    `pulumi:"taggedVlans"`
	Tags                    []string `pulumi:"tags"`
	TagsAlls                []string `pulumi:"tagsAlls"`
	Type                    *string  `pulumi:"type"`
	UntaggedVlan            *int     `pulumi:"untaggedVlan"`
}

type DeviceInterfaceState struct {
	Description pulumi.StringPtrInput
	DeviceId    pulumi.IntPtrInput
	// Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	Label   pulumi.StringPtrInput
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceId pulumi.IntPtrInput
	// The MAC address as string from the first MAC address assigned to this interface, if any.
	MacAddress   pulumi.StringPtrInput
	MacAddresses DeviceInterfaceMacAddressArrayInput
	Mgmtonly     pulumi.BoolPtrInput
	// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
	Mode pulumi.StringPtrInput
	Mtu  pulumi.IntPtrInput
	Name pulumi.StringPtrInput
	// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceId pulumi.IntPtrInput
	Speed                   pulumi.IntPtrInput
	TaggedVlans             pulumi.IntArrayInput
	Tags                    pulumi.StringArrayInput
	TagsAlls                pulumi.StringArrayInput
	Type                    pulumi.StringPtrInput
	UntaggedVlan            pulumi.IntPtrInput
}

func (DeviceInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceInterfaceState)(nil)).Elem()
}

type deviceInterfaceArgs struct {
	Description *string `pulumi:"description"`
	DeviceId    int     `pulumi:"deviceId"`
	// Defaults to `true`.
	Enabled *bool   `pulumi:"enabled"`
	Label   *string `pulumi:"label"`
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceId *int  `pulumi:"lagDeviceInterfaceId"`
	Mgmtonly             *bool `pulumi:"mgmtonly"`
	// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
	Mode *string `pulumi:"mode"`
	Mtu  *int    `pulumi:"mtu"`
	Name *string `pulumi:"name"`
	// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceId *int     `pulumi:"parentDeviceInterfaceId"`
	Speed                   *int     `pulumi:"speed"`
	TaggedVlans             []int    `pulumi:"taggedVlans"`
	Tags                    []string `pulumi:"tags"`
	Type                    string   `pulumi:"type"`
	UntaggedVlan            *int     `pulumi:"untaggedVlan"`
}

// The set of arguments for constructing a DeviceInterface resource.
type DeviceInterfaceArgs struct {
	Description pulumi.StringPtrInput
	DeviceId    pulumi.IntInput
	// Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	Label   pulumi.StringPtrInput
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceId pulumi.IntPtrInput
	Mgmtonly             pulumi.BoolPtrInput
	// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
	Mode pulumi.StringPtrInput
	Mtu  pulumi.IntPtrInput
	Name pulumi.StringPtrInput
	// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceId pulumi.IntPtrInput
	Speed                   pulumi.IntPtrInput
	TaggedVlans             pulumi.IntArrayInput
	Tags                    pulumi.StringArrayInput
	Type                    pulumi.StringInput
	UntaggedVlan            pulumi.IntPtrInput
}

func (DeviceInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceInterfaceArgs)(nil)).Elem()
}

type DeviceInterfaceInput interface {
	pulumi.Input

	ToDeviceInterfaceOutput() DeviceInterfaceOutput
	ToDeviceInterfaceOutputWithContext(ctx context.Context) DeviceInterfaceOutput
}

func (*DeviceInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceInterface)(nil)).Elem()
}

func (i *DeviceInterface) ToDeviceInterfaceOutput() DeviceInterfaceOutput {
	return i.ToDeviceInterfaceOutputWithContext(context.Background())
}

func (i *DeviceInterface) ToDeviceInterfaceOutputWithContext(ctx context.Context) DeviceInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceInterfaceOutput)
}

// DeviceInterfaceArrayInput is an input type that accepts DeviceInterfaceArray and DeviceInterfaceArrayOutput values.
// You can construct a concrete instance of `DeviceInterfaceArrayInput` via:
//
//	DeviceInterfaceArray{ DeviceInterfaceArgs{...} }
type DeviceInterfaceArrayInput interface {
	pulumi.Input

	ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput
	ToDeviceInterfaceArrayOutputWithContext(context.Context) DeviceInterfaceArrayOutput
}

type DeviceInterfaceArray []DeviceInterfaceInput

func (DeviceInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceInterface)(nil)).Elem()
}

func (i DeviceInterfaceArray) ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput {
	return i.ToDeviceInterfaceArrayOutputWithContext(context.Background())
}

func (i DeviceInterfaceArray) ToDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceInterfaceArrayOutput)
}

// DeviceInterfaceMapInput is an input type that accepts DeviceInterfaceMap and DeviceInterfaceMapOutput values.
// You can construct a concrete instance of `DeviceInterfaceMapInput` via:
//
//	DeviceInterfaceMap{ "key": DeviceInterfaceArgs{...} }
type DeviceInterfaceMapInput interface {
	pulumi.Input

	ToDeviceInterfaceMapOutput() DeviceInterfaceMapOutput
	ToDeviceInterfaceMapOutputWithContext(context.Context) DeviceInterfaceMapOutput
}

type DeviceInterfaceMap map[string]DeviceInterfaceInput

func (DeviceInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceInterface)(nil)).Elem()
}

func (i DeviceInterfaceMap) ToDeviceInterfaceMapOutput() DeviceInterfaceMapOutput {
	return i.ToDeviceInterfaceMapOutputWithContext(context.Background())
}

func (i DeviceInterfaceMap) ToDeviceInterfaceMapOutputWithContext(ctx context.Context) DeviceInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceInterfaceMapOutput)
}

type DeviceInterfaceOutput struct{ *pulumi.OutputState }

func (DeviceInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceInterface)(nil)).Elem()
}

func (o DeviceInterfaceOutput) ToDeviceInterfaceOutput() DeviceInterfaceOutput {
	return o
}

func (o DeviceInterfaceOutput) ToDeviceInterfaceOutputWithContext(ctx context.Context) DeviceInterfaceOutput {
	return o
}

func (o DeviceInterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o DeviceInterfaceOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

// Defaults to `true`.
func (o DeviceInterfaceOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o DeviceInterfaceOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

// If this device is a member of a LAG group, you can reference the LAG interface here.
func (o DeviceInterfaceOutput) LagDeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntPtrOutput { return v.LagDeviceInterfaceId }).(pulumi.IntPtrOutput)
}

// The MAC address as string from the first MAC address assigned to this interface, if any.
func (o DeviceInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

func (o DeviceInterfaceOutput) MacAddresses() DeviceInterfaceMacAddressArrayOutput {
	return o.ApplyT(func(v *DeviceInterface) DeviceInterfaceMacAddressArrayOutput { return v.MacAddresses }).(DeviceInterfaceMacAddressArrayOutput)
}

func (o DeviceInterfaceOutput) Mgmtonly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.BoolPtrOutput { return v.Mgmtonly }).(pulumi.BoolPtrOutput)
}

// Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
func (o DeviceInterfaceOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o DeviceInterfaceOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

func (o DeviceInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
func (o DeviceInterfaceOutput) ParentDeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntPtrOutput { return v.ParentDeviceInterfaceId }).(pulumi.IntPtrOutput)
}

func (o DeviceInterfaceOutput) Speed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntPtrOutput { return v.Speed }).(pulumi.IntPtrOutput)
}

func (o DeviceInterfaceOutput) TaggedVlans() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntArrayOutput { return v.TaggedVlans }).(pulumi.IntArrayOutput)
}

func (o DeviceInterfaceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DeviceInterfaceOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o DeviceInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o DeviceInterfaceOutput) UntaggedVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeviceInterface) pulumi.IntPtrOutput { return v.UntaggedVlan }).(pulumi.IntPtrOutput)
}

type DeviceInterfaceArrayOutput struct{ *pulumi.OutputState }

func (DeviceInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceInterface)(nil)).Elem()
}

func (o DeviceInterfaceArrayOutput) ToDeviceInterfaceArrayOutput() DeviceInterfaceArrayOutput {
	return o
}

func (o DeviceInterfaceArrayOutput) ToDeviceInterfaceArrayOutputWithContext(ctx context.Context) DeviceInterfaceArrayOutput {
	return o
}

func (o DeviceInterfaceArrayOutput) Index(i pulumi.IntInput) DeviceInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceInterface {
		return vs[0].([]*DeviceInterface)[vs[1].(int)]
	}).(DeviceInterfaceOutput)
}

type DeviceInterfaceMapOutput struct{ *pulumi.OutputState }

func (DeviceInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceInterface)(nil)).Elem()
}

func (o DeviceInterfaceMapOutput) ToDeviceInterfaceMapOutput() DeviceInterfaceMapOutput {
	return o
}

func (o DeviceInterfaceMapOutput) ToDeviceInterfaceMapOutputWithContext(ctx context.Context) DeviceInterfaceMapOutput {
	return o
}

func (o DeviceInterfaceMapOutput) MapIndex(k pulumi.StringInput) DeviceInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceInterface {
		return vs[0].(map[string]*DeviceInterface)[vs[1].(string)]
	}).(DeviceInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInterfaceInput)(nil)).Elem(), &DeviceInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInterfaceArrayInput)(nil)).Elem(), DeviceInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceInterfaceMapInput)(nil)).Elem(), DeviceInterfaceMap{})
	pulumi.RegisterOutputType(DeviceInterfaceOutput{})
	pulumi.RegisterOutputType(DeviceInterfaceArrayOutput{})
	pulumi.RegisterOutputType(DeviceInterfaceMapOutput{})
}
