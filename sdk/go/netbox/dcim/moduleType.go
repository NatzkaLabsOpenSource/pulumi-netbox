// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/moduletype/):
//
// > A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewManufacturer(ctx, "test", &dcim.ManufacturerArgs{
//				Name: pulumi.String("Dell"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewModuleType(ctx, "test", &dcim.ModuleTypeArgs{
//				ManufacturerId: test.ID(),
//				Model:          pulumi.String("Networking"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ModuleType struct {
	pulumi.CustomResourceState

	Comments       pulumi.StringPtrOutput   `pulumi:"comments"`
	CustomFields   pulumi.StringMapOutput   `pulumi:"customFields"`
	Description    pulumi.StringPtrOutput   `pulumi:"description"`
	ManufacturerId pulumi.IntOutput         `pulumi:"manufacturerId"`
	Model          pulumi.StringOutput      `pulumi:"model"`
	PartNumber     pulumi.StringPtrOutput   `pulumi:"partNumber"`
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
	Weight         pulumi.Float64PtrOutput  `pulumi:"weight"`
	// One of [kg, g, lb, oz]. Required when `weight` is set.
	WeightUnit pulumi.StringPtrOutput `pulumi:"weightUnit"`
}

// NewModuleType registers a new resource with the given unique name, arguments, and options.
func NewModuleType(ctx *pulumi.Context,
	name string, args *ModuleTypeArgs, opts ...pulumi.ResourceOption) (*ModuleType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManufacturerId == nil {
		return nil, errors.New("invalid value for required argument 'ManufacturerId'")
	}
	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ModuleType
	err := ctx.RegisterResource("netbox:dcim/moduleType:ModuleType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModuleType gets an existing ModuleType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModuleType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleTypeState, opts ...pulumi.ResourceOption) (*ModuleType, error) {
	var resource ModuleType
	err := ctx.ReadResource("netbox:dcim/moduleType:ModuleType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ModuleType resources.
type moduleTypeState struct {
	Comments       *string           `pulumi:"comments"`
	CustomFields   map[string]string `pulumi:"customFields"`
	Description    *string           `pulumi:"description"`
	ManufacturerId *int              `pulumi:"manufacturerId"`
	Model          *string           `pulumi:"model"`
	PartNumber     *string           `pulumi:"partNumber"`
	Tags           []string          `pulumi:"tags"`
	Weight         *float64          `pulumi:"weight"`
	// One of [kg, g, lb, oz]. Required when `weight` is set.
	WeightUnit *string `pulumi:"weightUnit"`
}

type ModuleTypeState struct {
	Comments       pulumi.StringPtrInput
	CustomFields   pulumi.StringMapInput
	Description    pulumi.StringPtrInput
	ManufacturerId pulumi.IntPtrInput
	Model          pulumi.StringPtrInput
	PartNumber     pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	Weight         pulumi.Float64PtrInput
	// One of [kg, g, lb, oz]. Required when `weight` is set.
	WeightUnit pulumi.StringPtrInput
}

func (ModuleTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleTypeState)(nil)).Elem()
}

type moduleTypeArgs struct {
	Comments       *string           `pulumi:"comments"`
	CustomFields   map[string]string `pulumi:"customFields"`
	Description    *string           `pulumi:"description"`
	ManufacturerId int               `pulumi:"manufacturerId"`
	Model          string            `pulumi:"model"`
	PartNumber     *string           `pulumi:"partNumber"`
	Tags           []string          `pulumi:"tags"`
	Weight         *float64          `pulumi:"weight"`
	// One of [kg, g, lb, oz]. Required when `weight` is set.
	WeightUnit *string `pulumi:"weightUnit"`
}

// The set of arguments for constructing a ModuleType resource.
type ModuleTypeArgs struct {
	Comments       pulumi.StringPtrInput
	CustomFields   pulumi.StringMapInput
	Description    pulumi.StringPtrInput
	ManufacturerId pulumi.IntInput
	Model          pulumi.StringInput
	PartNumber     pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	Weight         pulumi.Float64PtrInput
	// One of [kg, g, lb, oz]. Required when `weight` is set.
	WeightUnit pulumi.StringPtrInput
}

func (ModuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleTypeArgs)(nil)).Elem()
}

type ModuleTypeInput interface {
	pulumi.Input

	ToModuleTypeOutput() ModuleTypeOutput
	ToModuleTypeOutputWithContext(ctx context.Context) ModuleTypeOutput
}

func (*ModuleType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleType)(nil)).Elem()
}

func (i *ModuleType) ToModuleTypeOutput() ModuleTypeOutput {
	return i.ToModuleTypeOutputWithContext(context.Background())
}

func (i *ModuleType) ToModuleTypeOutputWithContext(ctx context.Context) ModuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleTypeOutput)
}

// ModuleTypeArrayInput is an input type that accepts ModuleTypeArray and ModuleTypeArrayOutput values.
// You can construct a concrete instance of `ModuleTypeArrayInput` via:
//
//	ModuleTypeArray{ ModuleTypeArgs{...} }
type ModuleTypeArrayInput interface {
	pulumi.Input

	ToModuleTypeArrayOutput() ModuleTypeArrayOutput
	ToModuleTypeArrayOutputWithContext(context.Context) ModuleTypeArrayOutput
}

type ModuleTypeArray []ModuleTypeInput

func (ModuleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModuleType)(nil)).Elem()
}

func (i ModuleTypeArray) ToModuleTypeArrayOutput() ModuleTypeArrayOutput {
	return i.ToModuleTypeArrayOutputWithContext(context.Background())
}

func (i ModuleTypeArray) ToModuleTypeArrayOutputWithContext(ctx context.Context) ModuleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleTypeArrayOutput)
}

// ModuleTypeMapInput is an input type that accepts ModuleTypeMap and ModuleTypeMapOutput values.
// You can construct a concrete instance of `ModuleTypeMapInput` via:
//
//	ModuleTypeMap{ "key": ModuleTypeArgs{...} }
type ModuleTypeMapInput interface {
	pulumi.Input

	ToModuleTypeMapOutput() ModuleTypeMapOutput
	ToModuleTypeMapOutputWithContext(context.Context) ModuleTypeMapOutput
}

type ModuleTypeMap map[string]ModuleTypeInput

func (ModuleTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModuleType)(nil)).Elem()
}

func (i ModuleTypeMap) ToModuleTypeMapOutput() ModuleTypeMapOutput {
	return i.ToModuleTypeMapOutputWithContext(context.Background())
}

func (i ModuleTypeMap) ToModuleTypeMapOutputWithContext(ctx context.Context) ModuleTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleTypeMapOutput)
}

type ModuleTypeOutput struct{ *pulumi.OutputState }

func (ModuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModuleType)(nil)).Elem()
}

func (o ModuleTypeOutput) ToModuleTypeOutput() ModuleTypeOutput {
	return o
}

func (o ModuleTypeOutput) ToModuleTypeOutputWithContext(ctx context.Context) ModuleTypeOutput {
	return o
}

func (o ModuleTypeOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o ModuleTypeOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o ModuleTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ModuleTypeOutput) ManufacturerId() pulumi.IntOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.IntOutput { return v.ManufacturerId }).(pulumi.IntOutput)
}

func (o ModuleTypeOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

func (o ModuleTypeOutput) PartNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringPtrOutput { return v.PartNumber }).(pulumi.StringPtrOutput)
}

func (o ModuleTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o ModuleTypeOutput) Weight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.Float64PtrOutput { return v.Weight }).(pulumi.Float64PtrOutput)
}

// One of [kg, g, lb, oz]. Required when `weight` is set.
func (o ModuleTypeOutput) WeightUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModuleType) pulumi.StringPtrOutput { return v.WeightUnit }).(pulumi.StringPtrOutput)
}

type ModuleTypeArrayOutput struct{ *pulumi.OutputState }

func (ModuleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ModuleType)(nil)).Elem()
}

func (o ModuleTypeArrayOutput) ToModuleTypeArrayOutput() ModuleTypeArrayOutput {
	return o
}

func (o ModuleTypeArrayOutput) ToModuleTypeArrayOutputWithContext(ctx context.Context) ModuleTypeArrayOutput {
	return o
}

func (o ModuleTypeArrayOutput) Index(i pulumi.IntInput) ModuleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ModuleType {
		return vs[0].([]*ModuleType)[vs[1].(int)]
	}).(ModuleTypeOutput)
}

type ModuleTypeMapOutput struct{ *pulumi.OutputState }

func (ModuleTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ModuleType)(nil)).Elem()
}

func (o ModuleTypeMapOutput) ToModuleTypeMapOutput() ModuleTypeMapOutput {
	return o
}

func (o ModuleTypeMapOutput) ToModuleTypeMapOutputWithContext(ctx context.Context) ModuleTypeMapOutput {
	return o
}

func (o ModuleTypeMapOutput) MapIndex(k pulumi.StringInput) ModuleTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ModuleType {
		return vs[0].(map[string]*ModuleType)[vs[1].(string)]
	}).(ModuleTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleTypeInput)(nil)).Elem(), &ModuleType{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleTypeArrayInput)(nil)).Elem(), ModuleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleTypeMapInput)(nil)).Elem(), ModuleTypeMap{})
	pulumi.RegisterOutputType(ModuleTypeOutput{})
	pulumi.RegisterOutputType(ModuleTypeArrayOutput{})
	pulumi.RegisterOutputType(ModuleTypeMapOutput{})
}
