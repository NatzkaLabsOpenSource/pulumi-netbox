// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#locations):
//
// > Racks and devices can be grouped by location within a site. A location may represent a floor, room, cage, or similar organizational unit. Locations can be nested to form a hierarchy. For example, you may have floors within a site, and rooms within a floor.
//
// Each location must have a name that is unique within its parent site and location, if any.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/tenancy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewSite(ctx, "test", &dcim.SiteArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			testTenant, err := tenancy.NewTenant(ctx, "test", &tenancy.TenantArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewLocation(ctx, "test", &dcim.LocationArgs{
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("my description"),
//				SiteId:      test.ID(),
//				TenantId:    testTenant.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Location struct {
	pulumi.CustomResourceState

	CustomFields pulumi.StringMapOutput   `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	ParentId     pulumi.IntPtrOutput      `pulumi:"parentId"`
	SiteId       pulumi.IntPtrOutput      `pulumi:"siteId"`
	Slug         pulumi.StringOutput      `pulumi:"slug"`
	Tags         pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId     pulumi.IntPtrOutput      `pulumi:"tenantId"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		args = &LocationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Location
	err := ctx.RegisterResource("netbox:dcim/location:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("netbox:dcim/location:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	ParentId     *int              `pulumi:"parentId"`
	SiteId       *int              `pulumi:"siteId"`
	Slug         *string           `pulumi:"slug"`
	Tags         []string          `pulumi:"tags"`
	TenantId     *int              `pulumi:"tenantId"`
}

type LocationState struct {
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	ParentId     pulumi.IntPtrInput
	SiteId       pulumi.IntPtrInput
	Slug         pulumi.StringPtrInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	ParentId     *int              `pulumi:"parentId"`
	SiteId       *int              `pulumi:"siteId"`
	Slug         *string           `pulumi:"slug"`
	Tags         []string          `pulumi:"tags"`
	TenantId     *int              `pulumi:"tenantId"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	ParentId     pulumi.IntPtrInput
	SiteId       pulumi.IntPtrInput
	Slug         pulumi.StringPtrInput
	Tags         pulumi.StringArrayInput
	TenantId     pulumi.IntPtrInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// LocationMapInput is an input type that accepts LocationMap and LocationMapOutput values.
// You can construct a concrete instance of `LocationMapInput` via:
//
//	LocationMap{ "key": LocationArgs{...} }
type LocationMapInput interface {
	pulumi.Input

	ToLocationMapOutput() LocationMapOutput
	ToLocationMapOutputWithContext(context.Context) LocationMapOutput
}

type LocationMap map[string]LocationInput

func (LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (i LocationMap) ToLocationMapOutput() LocationMapOutput {
	return i.ToLocationMapOutputWithContext(context.Background())
}

func (i LocationMap) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationMapOutput)
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

func (o LocationOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Location) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o LocationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LocationOutput) ParentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.IntPtrOutput { return v.ParentId }).(pulumi.IntPtrOutput)
}

func (o LocationOutput) SiteId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.IntPtrOutput { return v.SiteId }).(pulumi.IntPtrOutput)
}

func (o LocationOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o LocationOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Location) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o LocationOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Location) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Location {
		return vs[0].([]*Location)[vs[1].(int)]
	}).(LocationOutput)
}

type LocationMapOutput struct{ *pulumi.OutputState }

func (LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (o LocationMapOutput) ToLocationMapOutput() LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return o
}

func (o LocationMapOutput) MapIndex(k pulumi.StringInput) LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Location {
		return vs[0].(map[string]*Location)[vs[1].(string)]
	}).(LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationMapInput)(nil)).Elem(), LocationMap{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationMapOutput{})
}
