// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/device-types/#device-types_1):
//
// > A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := dcim.NewManufacturer(ctx, "test", &dcim.ManufacturerArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewDeviceType(ctx, "test", &dcim.DeviceTypeArgs{
//				Model:          pulumi.String("test"),
//				PartNumber:     pulumi.String("123"),
//				ManufacturerId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeviceType struct {
	pulumi.CustomResourceState

	IsFullDepth    pulumi.BoolPtrOutput     `pulumi:"isFullDepth"`
	ManufacturerId pulumi.IntOutput         `pulumi:"manufacturerId"`
	Model          pulumi.StringOutput      `pulumi:"model"`
	PartNumber     pulumi.StringPtrOutput   `pulumi:"partNumber"`
	Slug           pulumi.StringOutput      `pulumi:"slug"`
	Tags           pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls       pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	// Defaults to `1.0`.
	UHeight pulumi.Float64PtrOutput `pulumi:"uHeight"`
}

// NewDeviceType registers a new resource with the given unique name, arguments, and options.
func NewDeviceType(ctx *pulumi.Context,
	name string, args *DeviceTypeArgs, opts ...pulumi.ResourceOption) (*DeviceType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ManufacturerId == nil {
		return nil, errors.New("invalid value for required argument 'ManufacturerId'")
	}
	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeviceType
	err := ctx.RegisterResource("netbox:dcim/deviceType:DeviceType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeviceType gets an existing DeviceType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeviceType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceTypeState, opts ...pulumi.ResourceOption) (*DeviceType, error) {
	var resource DeviceType
	err := ctx.ReadResource("netbox:dcim/deviceType:DeviceType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeviceType resources.
type deviceTypeState struct {
	IsFullDepth    *bool    `pulumi:"isFullDepth"`
	ManufacturerId *int     `pulumi:"manufacturerId"`
	Model          *string  `pulumi:"model"`
	PartNumber     *string  `pulumi:"partNumber"`
	Slug           *string  `pulumi:"slug"`
	Tags           []string `pulumi:"tags"`
	TagsAlls       []string `pulumi:"tagsAlls"`
	// Defaults to `1.0`.
	UHeight *float64 `pulumi:"uHeight"`
}

type DeviceTypeState struct {
	IsFullDepth    pulumi.BoolPtrInput
	ManufacturerId pulumi.IntPtrInput
	Model          pulumi.StringPtrInput
	PartNumber     pulumi.StringPtrInput
	Slug           pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	TagsAlls       pulumi.StringArrayInput
	// Defaults to `1.0`.
	UHeight pulumi.Float64PtrInput
}

func (DeviceTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTypeState)(nil)).Elem()
}

type deviceTypeArgs struct {
	IsFullDepth    *bool    `pulumi:"isFullDepth"`
	ManufacturerId int      `pulumi:"manufacturerId"`
	Model          string   `pulumi:"model"`
	PartNumber     *string  `pulumi:"partNumber"`
	Slug           *string  `pulumi:"slug"`
	Tags           []string `pulumi:"tags"`
	// Defaults to `1.0`.
	UHeight *float64 `pulumi:"uHeight"`
}

// The set of arguments for constructing a DeviceType resource.
type DeviceTypeArgs struct {
	IsFullDepth    pulumi.BoolPtrInput
	ManufacturerId pulumi.IntInput
	Model          pulumi.StringInput
	PartNumber     pulumi.StringPtrInput
	Slug           pulumi.StringPtrInput
	Tags           pulumi.StringArrayInput
	// Defaults to `1.0`.
	UHeight pulumi.Float64PtrInput
}

func (DeviceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceTypeArgs)(nil)).Elem()
}

type DeviceTypeInput interface {
	pulumi.Input

	ToDeviceTypeOutput() DeviceTypeOutput
	ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput
}

func (*DeviceType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceType)(nil)).Elem()
}

func (i *DeviceType) ToDeviceTypeOutput() DeviceTypeOutput {
	return i.ToDeviceTypeOutputWithContext(context.Background())
}

func (i *DeviceType) ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeOutput)
}

// DeviceTypeArrayInput is an input type that accepts DeviceTypeArray and DeviceTypeArrayOutput values.
// You can construct a concrete instance of `DeviceTypeArrayInput` via:
//
//	DeviceTypeArray{ DeviceTypeArgs{...} }
type DeviceTypeArrayInput interface {
	pulumi.Input

	ToDeviceTypeArrayOutput() DeviceTypeArrayOutput
	ToDeviceTypeArrayOutputWithContext(context.Context) DeviceTypeArrayOutput
}

type DeviceTypeArray []DeviceTypeInput

func (DeviceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceType)(nil)).Elem()
}

func (i DeviceTypeArray) ToDeviceTypeArrayOutput() DeviceTypeArrayOutput {
	return i.ToDeviceTypeArrayOutputWithContext(context.Background())
}

func (i DeviceTypeArray) ToDeviceTypeArrayOutputWithContext(ctx context.Context) DeviceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeArrayOutput)
}

// DeviceTypeMapInput is an input type that accepts DeviceTypeMap and DeviceTypeMapOutput values.
// You can construct a concrete instance of `DeviceTypeMapInput` via:
//
//	DeviceTypeMap{ "key": DeviceTypeArgs{...} }
type DeviceTypeMapInput interface {
	pulumi.Input

	ToDeviceTypeMapOutput() DeviceTypeMapOutput
	ToDeviceTypeMapOutputWithContext(context.Context) DeviceTypeMapOutput
}

type DeviceTypeMap map[string]DeviceTypeInput

func (DeviceTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceType)(nil)).Elem()
}

func (i DeviceTypeMap) ToDeviceTypeMapOutput() DeviceTypeMapOutput {
	return i.ToDeviceTypeMapOutputWithContext(context.Background())
}

func (i DeviceTypeMap) ToDeviceTypeMapOutputWithContext(ctx context.Context) DeviceTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceTypeMapOutput)
}

type DeviceTypeOutput struct{ *pulumi.OutputState }

func (DeviceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeviceType)(nil)).Elem()
}

func (o DeviceTypeOutput) ToDeviceTypeOutput() DeviceTypeOutput {
	return o
}

func (o DeviceTypeOutput) ToDeviceTypeOutputWithContext(ctx context.Context) DeviceTypeOutput {
	return o
}

func (o DeviceTypeOutput) IsFullDepth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.BoolPtrOutput { return v.IsFullDepth }).(pulumi.BoolPtrOutput)
}

func (o DeviceTypeOutput) ManufacturerId() pulumi.IntOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.IntOutput { return v.ManufacturerId }).(pulumi.IntOutput)
}

func (o DeviceTypeOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

func (o DeviceTypeOutput) PartNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringPtrOutput { return v.PartNumber }).(pulumi.StringPtrOutput)
}

func (o DeviceTypeOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o DeviceTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o DeviceTypeOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

// Defaults to `1.0`.
func (o DeviceTypeOutput) UHeight() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DeviceType) pulumi.Float64PtrOutput { return v.UHeight }).(pulumi.Float64PtrOutput)
}

type DeviceTypeArrayOutput struct{ *pulumi.OutputState }

func (DeviceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeviceType)(nil)).Elem()
}

func (o DeviceTypeArrayOutput) ToDeviceTypeArrayOutput() DeviceTypeArrayOutput {
	return o
}

func (o DeviceTypeArrayOutput) ToDeviceTypeArrayOutputWithContext(ctx context.Context) DeviceTypeArrayOutput {
	return o
}

func (o DeviceTypeArrayOutput) Index(i pulumi.IntInput) DeviceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeviceType {
		return vs[0].([]*DeviceType)[vs[1].(int)]
	}).(DeviceTypeOutput)
}

type DeviceTypeMapOutput struct{ *pulumi.OutputState }

func (DeviceTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeviceType)(nil)).Elem()
}

func (o DeviceTypeMapOutput) ToDeviceTypeMapOutput() DeviceTypeMapOutput {
	return o
}

func (o DeviceTypeMapOutput) ToDeviceTypeMapOutputWithContext(ctx context.Context) DeviceTypeMapOutput {
	return o
}

func (o DeviceTypeMapOutput) MapIndex(k pulumi.StringInput) DeviceTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeviceType {
		return vs[0].(map[string]*DeviceType)[vs[1].(string)]
	}).(DeviceTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeInput)(nil)).Elem(), &DeviceType{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeArrayInput)(nil)).Elem(), DeviceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeviceTypeMapInput)(nil)).Elem(), DeviceTypeMap{})
	pulumi.RegisterOutputType(DeviceTypeOutput{})
	pulumi.RegisterOutputType(DeviceTypeArrayOutput{})
	pulumi.RegisterOutputType(DeviceTypeMapOutput{})
}
