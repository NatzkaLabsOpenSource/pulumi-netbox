// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcim

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/module/):
//
// > A module is a field-replaceable hardware component installed within a device which houses its own child components. The most common example is a chassis-based router or switch.
//
// Similar to devices, modules are instantiated from module types, and any components associated with the module type are automatically instantiated on the new model. Each module must be installed within a module bay on a device, and each module bay may have only one module installed in it.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Note that some terraform code is not included in the example for brevity
//			test, err := dcim.NewDevice(ctx, "test", &dcim.DeviceArgs{
//				Name:         pulumi.String("%[1]s"),
//				DeviceTypeId: pulumi.Any(testNetboxDeviceType.Id),
//				RoleId:       pulumi.Any(testNetboxDeviceRole.Id),
//				SiteId:       pulumi.Any(testNetboxSite.Id),
//			})
//			if err != nil {
//				return err
//			}
//			testDeviceModuleBay, err := dcim.NewDeviceModuleBay(ctx, "test", &dcim.DeviceModuleBayArgs{
//				DeviceId: test.ID(),
//				Name:     pulumi.String("SFP"),
//			})
//			if err != nil {
//				return err
//			}
//			testManufacturer, err := dcim.NewManufacturer(ctx, "test", &dcim.ManufacturerArgs{
//				Name: pulumi.String("Dell"),
//			})
//			if err != nil {
//				return err
//			}
//			testModuleType, err := dcim.NewModuleType(ctx, "test", &dcim.ModuleTypeArgs{
//				ManufacturerId: testManufacturer.ID(),
//				Model:          pulumi.String("Networking"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = dcim.NewModule(ctx, "test", &dcim.ModuleArgs{
//				DeviceId:     test.ID(),
//				ModuleBayId:  testDeviceModuleBay.ID(),
//				ModuleTypeId: testModuleType.ID(),
//				Status:       pulumi.String("active"),
//				Description:  pulumi.String("SFP card"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Module struct {
	pulumi.CustomResourceState

	AssetTag     pulumi.StringPtrOutput `pulumi:"assetTag"`
	Comments     pulumi.StringPtrOutput `pulumi:"comments"`
	CustomFields pulumi.StringMapOutput `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	DeviceId     pulumi.IntOutput       `pulumi:"deviceId"`
	ModuleBayId  pulumi.IntOutput       `pulumi:"moduleBayId"`
	ModuleTypeId pulumi.IntOutput       `pulumi:"moduleTypeId"`
	Serial       pulumi.StringPtrOutput `pulumi:"serial"`
	// One of [offline, active, planned, staged, failed, decommissioning].
	Status pulumi.StringOutput      `pulumi:"status"`
	Tags   pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewModule registers a new resource with the given unique name, arguments, and options.
func NewModule(ctx *pulumi.Context,
	name string, args *ModuleArgs, opts ...pulumi.ResourceOption) (*Module, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceId == nil {
		return nil, errors.New("invalid value for required argument 'DeviceId'")
	}
	if args.ModuleBayId == nil {
		return nil, errors.New("invalid value for required argument 'ModuleBayId'")
	}
	if args.ModuleTypeId == nil {
		return nil, errors.New("invalid value for required argument 'ModuleTypeId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Module
	err := ctx.RegisterResource("netbox:dcim/module:Module", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetModule gets an existing Module resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetModule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ModuleState, opts ...pulumi.ResourceOption) (*Module, error) {
	var resource Module
	err := ctx.ReadResource("netbox:dcim/module:Module", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Module resources.
type moduleState struct {
	AssetTag     *string           `pulumi:"assetTag"`
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	DeviceId     *int              `pulumi:"deviceId"`
	ModuleBayId  *int              `pulumi:"moduleBayId"`
	ModuleTypeId *int              `pulumi:"moduleTypeId"`
	Serial       *string           `pulumi:"serial"`
	// One of [offline, active, planned, staged, failed, decommissioning].
	Status *string  `pulumi:"status"`
	Tags   []string `pulumi:"tags"`
}

type ModuleState struct {
	AssetTag     pulumi.StringPtrInput
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	DeviceId     pulumi.IntPtrInput
	ModuleBayId  pulumi.IntPtrInput
	ModuleTypeId pulumi.IntPtrInput
	Serial       pulumi.StringPtrInput
	// One of [offline, active, planned, staged, failed, decommissioning].
	Status pulumi.StringPtrInput
	Tags   pulumi.StringArrayInput
}

func (ModuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleState)(nil)).Elem()
}

type moduleArgs struct {
	AssetTag     *string           `pulumi:"assetTag"`
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	DeviceId     int               `pulumi:"deviceId"`
	ModuleBayId  int               `pulumi:"moduleBayId"`
	ModuleTypeId int               `pulumi:"moduleTypeId"`
	Serial       *string           `pulumi:"serial"`
	// One of [offline, active, planned, staged, failed, decommissioning].
	Status string   `pulumi:"status"`
	Tags   []string `pulumi:"tags"`
}

// The set of arguments for constructing a Module resource.
type ModuleArgs struct {
	AssetTag     pulumi.StringPtrInput
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	DeviceId     pulumi.IntInput
	ModuleBayId  pulumi.IntInput
	ModuleTypeId pulumi.IntInput
	Serial       pulumi.StringPtrInput
	// One of [offline, active, planned, staged, failed, decommissioning].
	Status pulumi.StringInput
	Tags   pulumi.StringArrayInput
}

func (ModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*moduleArgs)(nil)).Elem()
}

type ModuleInput interface {
	pulumi.Input

	ToModuleOutput() ModuleOutput
	ToModuleOutputWithContext(ctx context.Context) ModuleOutput
}

func (*Module) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (i *Module) ToModuleOutput() ModuleOutput {
	return i.ToModuleOutputWithContext(context.Background())
}

func (i *Module) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleOutput)
}

// ModuleArrayInput is an input type that accepts ModuleArray and ModuleArrayOutput values.
// You can construct a concrete instance of `ModuleArrayInput` via:
//
//	ModuleArray{ ModuleArgs{...} }
type ModuleArrayInput interface {
	pulumi.Input

	ToModuleArrayOutput() ModuleArrayOutput
	ToModuleArrayOutputWithContext(context.Context) ModuleArrayOutput
}

type ModuleArray []ModuleInput

func (ModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (i ModuleArray) ToModuleArrayOutput() ModuleArrayOutput {
	return i.ToModuleArrayOutputWithContext(context.Background())
}

func (i ModuleArray) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleArrayOutput)
}

// ModuleMapInput is an input type that accepts ModuleMap and ModuleMapOutput values.
// You can construct a concrete instance of `ModuleMapInput` via:
//
//	ModuleMap{ "key": ModuleArgs{...} }
type ModuleMapInput interface {
	pulumi.Input

	ToModuleMapOutput() ModuleMapOutput
	ToModuleMapOutputWithContext(context.Context) ModuleMapOutput
}

type ModuleMap map[string]ModuleInput

func (ModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (i ModuleMap) ToModuleMapOutput() ModuleMapOutput {
	return i.ToModuleMapOutputWithContext(context.Background())
}

func (i ModuleMap) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModuleMapOutput)
}

type ModuleOutput struct{ *pulumi.OutputState }

func (ModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Module)(nil)).Elem()
}

func (o ModuleOutput) ToModuleOutput() ModuleOutput {
	return o
}

func (o ModuleOutput) ToModuleOutputWithContext(ctx context.Context) ModuleOutput {
	return o
}

func (o ModuleOutput) AssetTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.AssetTag }).(pulumi.StringPtrOutput)
}

func (o ModuleOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o ModuleOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Module) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o ModuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ModuleOutput) DeviceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Module) pulumi.IntOutput { return v.DeviceId }).(pulumi.IntOutput)
}

func (o ModuleOutput) ModuleBayId() pulumi.IntOutput {
	return o.ApplyT(func(v *Module) pulumi.IntOutput { return v.ModuleBayId }).(pulumi.IntOutput)
}

func (o ModuleOutput) ModuleTypeId() pulumi.IntOutput {
	return o.ApplyT(func(v *Module) pulumi.IntOutput { return v.ModuleTypeId }).(pulumi.IntOutput)
}

func (o ModuleOutput) Serial() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Module) pulumi.StringPtrOutput { return v.Serial }).(pulumi.StringPtrOutput)
}

// One of [offline, active, planned, staged, failed, decommissioning].
func (o ModuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Module) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ModuleOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Module) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type ModuleArrayOutput struct{ *pulumi.OutputState }

func (ModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Module)(nil)).Elem()
}

func (o ModuleArrayOutput) ToModuleArrayOutput() ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) ToModuleArrayOutputWithContext(ctx context.Context) ModuleArrayOutput {
	return o
}

func (o ModuleArrayOutput) Index(i pulumi.IntInput) ModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Module {
		return vs[0].([]*Module)[vs[1].(int)]
	}).(ModuleOutput)
}

type ModuleMapOutput struct{ *pulumi.OutputState }

func (ModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Module)(nil)).Elem()
}

func (o ModuleMapOutput) ToModuleMapOutput() ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) ToModuleMapOutputWithContext(ctx context.Context) ModuleMapOutput {
	return o
}

func (o ModuleMapOutput) MapIndex(k pulumi.StringInput) ModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Module {
		return vs[0].(map[string]*Module)[vs[1].(string)]
	}).(ModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleInput)(nil)).Elem(), &Module{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleArrayInput)(nil)).Elem(), ModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModuleMapInput)(nil)).Elem(), ModuleMap{})
	pulumi.RegisterOutputType(ModuleOutput{})
	pulumi.RegisterOutputType(ModuleArrayOutput{})
	pulumi.RegisterOutputType(ModuleMapOutput{})
}
