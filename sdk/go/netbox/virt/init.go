// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package virt

import (
	"fmt"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "netbox:virt/cluster:Cluster":
		r = &Cluster{}
	case "netbox:virt/clusterGroup:ClusterGroup":
		r = &ClusterGroup{}
	case "netbox:virt/clusterType:ClusterType":
		r = &ClusterType{}
	case "netbox:virt/interface:Interface":
		r = &Interface{}
	case "netbox:virt/primaryIp:PrimaryIp":
		r = &PrimaryIp{}
	case "netbox:virt/virtualMachine:VirtualMachine":
		r = &VirtualMachine{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/cluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/clusterGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/clusterType",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/interface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/primaryIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"netbox",
		"virt/virtualMachine",
		&module{version},
	)
}
