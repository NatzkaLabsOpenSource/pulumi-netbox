// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):
//
// > Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.
//
// > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"name": "my-hostname",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = netbox.NewConfigTemplate(ctx, "test", &netbox.ConfigTemplateArgs{
//				Name:              pulumi.String("test"),
//				Description:       pulumi.String("test description"),
//				TemplateCode:      pulumi.String("hostname {{ name }}"),
//				EnvironmentParams: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigTemplate struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Defaults to `{}`.
	EnvironmentParams pulumi.StringPtrOutput   `pulumi:"environmentParams"`
	Name              pulumi.StringOutput      `pulumi:"name"`
	Tags              pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls          pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TemplateCode      pulumi.StringOutput      `pulumi:"templateCode"`
}

// NewConfigTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigTemplate(ctx *pulumi.Context,
	name string, args *ConfigTemplateArgs, opts ...pulumi.ResourceOption) (*ConfigTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateCode == nil {
		return nil, errors.New("invalid value for required argument 'TemplateCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigTemplate
	err := ctx.RegisterResource("netbox:index/configTemplate:ConfigTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigTemplate gets an existing ConfigTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigTemplateState, opts ...pulumi.ResourceOption) (*ConfigTemplate, error) {
	var resource ConfigTemplate
	err := ctx.ReadResource("netbox:index/configTemplate:ConfigTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigTemplate resources.
type configTemplateState struct {
	Description *string `pulumi:"description"`
	// Defaults to `{}`.
	EnvironmentParams *string  `pulumi:"environmentParams"`
	Name              *string  `pulumi:"name"`
	Tags              []string `pulumi:"tags"`
	TagsAlls          []string `pulumi:"tagsAlls"`
	TemplateCode      *string  `pulumi:"templateCode"`
}

type ConfigTemplateState struct {
	Description pulumi.StringPtrInput
	// Defaults to `{}`.
	EnvironmentParams pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Tags              pulumi.StringArrayInput
	TagsAlls          pulumi.StringArrayInput
	TemplateCode      pulumi.StringPtrInput
}

func (ConfigTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplateState)(nil)).Elem()
}

type configTemplateArgs struct {
	Description *string `pulumi:"description"`
	// Defaults to `{}`.
	EnvironmentParams *string  `pulumi:"environmentParams"`
	Name              *string  `pulumi:"name"`
	Tags              []string `pulumi:"tags"`
	TemplateCode      string   `pulumi:"templateCode"`
}

// The set of arguments for constructing a ConfigTemplate resource.
type ConfigTemplateArgs struct {
	Description pulumi.StringPtrInput
	// Defaults to `{}`.
	EnvironmentParams pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Tags              pulumi.StringArrayInput
	TemplateCode      pulumi.StringInput
}

func (ConfigTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplateArgs)(nil)).Elem()
}

type ConfigTemplateInput interface {
	pulumi.Input

	ToConfigTemplateOutput() ConfigTemplateOutput
	ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput
}

func (*ConfigTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplate)(nil)).Elem()
}

func (i *ConfigTemplate) ToConfigTemplateOutput() ConfigTemplateOutput {
	return i.ToConfigTemplateOutputWithContext(context.Background())
}

func (i *ConfigTemplate) ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateOutput)
}

// ConfigTemplateArrayInput is an input type that accepts ConfigTemplateArray and ConfigTemplateArrayOutput values.
// You can construct a concrete instance of `ConfigTemplateArrayInput` via:
//
//	ConfigTemplateArray{ ConfigTemplateArgs{...} }
type ConfigTemplateArrayInput interface {
	pulumi.Input

	ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput
	ToConfigTemplateArrayOutputWithContext(context.Context) ConfigTemplateArrayOutput
}

type ConfigTemplateArray []ConfigTemplateInput

func (ConfigTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplate)(nil)).Elem()
}

func (i ConfigTemplateArray) ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput {
	return i.ToConfigTemplateArrayOutputWithContext(context.Background())
}

func (i ConfigTemplateArray) ToConfigTemplateArrayOutputWithContext(ctx context.Context) ConfigTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateArrayOutput)
}

// ConfigTemplateMapInput is an input type that accepts ConfigTemplateMap and ConfigTemplateMapOutput values.
// You can construct a concrete instance of `ConfigTemplateMapInput` via:
//
//	ConfigTemplateMap{ "key": ConfigTemplateArgs{...} }
type ConfigTemplateMapInput interface {
	pulumi.Input

	ToConfigTemplateMapOutput() ConfigTemplateMapOutput
	ToConfigTemplateMapOutputWithContext(context.Context) ConfigTemplateMapOutput
}

type ConfigTemplateMap map[string]ConfigTemplateInput

func (ConfigTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplate)(nil)).Elem()
}

func (i ConfigTemplateMap) ToConfigTemplateMapOutput() ConfigTemplateMapOutput {
	return i.ToConfigTemplateMapOutputWithContext(context.Background())
}

func (i ConfigTemplateMap) ToConfigTemplateMapOutputWithContext(ctx context.Context) ConfigTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateMapOutput)
}

type ConfigTemplateOutput struct{ *pulumi.OutputState }

func (ConfigTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateOutput) ToConfigTemplateOutput() ConfigTemplateOutput {
	return o
}

func (o ConfigTemplateOutput) ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput {
	return o
}

func (o ConfigTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Defaults to `{}`.
func (o ConfigTemplateOutput) EnvironmentParams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringPtrOutput { return v.EnvironmentParams }).(pulumi.StringPtrOutput)
}

func (o ConfigTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConfigTemplateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o ConfigTemplateOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o ConfigTemplateOutput) TemplateCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.TemplateCode }).(pulumi.StringOutput)
}

type ConfigTemplateArrayOutput struct{ *pulumi.OutputState }

func (ConfigTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateArrayOutput) ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput {
	return o
}

func (o ConfigTemplateArrayOutput) ToConfigTemplateArrayOutputWithContext(ctx context.Context) ConfigTemplateArrayOutput {
	return o
}

func (o ConfigTemplateArrayOutput) Index(i pulumi.IntInput) ConfigTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigTemplate {
		return vs[0].([]*ConfigTemplate)[vs[1].(int)]
	}).(ConfigTemplateOutput)
}

type ConfigTemplateMapOutput struct{ *pulumi.OutputState }

func (ConfigTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateMapOutput) ToConfigTemplateMapOutput() ConfigTemplateMapOutput {
	return o
}

func (o ConfigTemplateMapOutput) ToConfigTemplateMapOutputWithContext(ctx context.Context) ConfigTemplateMapOutput {
	return o
}

func (o ConfigTemplateMapOutput) MapIndex(k pulumi.StringInput) ConfigTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigTemplate {
		return vs[0].(map[string]*ConfigTemplate)[vs[1].(string)]
	}).(ConfigTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateInput)(nil)).Elem(), &ConfigTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateArrayInput)(nil)).Elem(), ConfigTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateMapInput)(nil)).Elem(), ConfigTemplateMap{})
	pulumi.RegisterOutputType(ConfigTemplateOutput{})
	pulumi.RegisterOutputType(ConfigTemplateArrayOutput{})
	pulumi.RegisterOutputType(ConfigTemplateMapOutput{})
}
