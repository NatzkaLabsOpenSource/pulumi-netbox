// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://netboxlabs.com/docs/netbox/models/dcim/macaddress/):
//
// > A MAC address object in NetBox comprises a single Ethernet link layer address, and represents a MAC address as reported by or assigned to a network interface. MAC addresses can be assigned to device and virtual machine interfaces. A MAC address can be specified as the primary MAC address for a given device or VM interface.
//
// ## Example Usage
//
// ### Creating a MAC address that is assigned to a virtual machine interface
//
// With `virtualMachineInterfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/virt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a virtual machine with the id `123` exists
//			this, err := virt.NewInterface(ctx, "this", &virt.InterfaceArgs{
//				Name:             pulumi.String("eth0"),
//				VirtualMachineId: pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netbox.NewMacAddress(ctx, "this", &netbox.MacAddressArgs{
//				MacAddress:                pulumi.String("00:1A:2B:3C:4D:5E"),
//				VirtualMachineInterfaceId: this.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With `objectType` and `interfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/virt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a virtual machine with the id `123` exists
//			this, err := virt.NewInterface(ctx, "this", &virt.InterfaceArgs{
//				Name:             pulumi.String("eth0"),
//				VirtualMachineId: pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netbox.NewMacAddress(ctx, "this", &netbox.MacAddressArgs{
//				MacAddress:  pulumi.String("00:1A:2B:3C:4D:5E"),
//				InterfaceId: this.ID(),
//				ObjectType:  pulumi.String("virtualization.vminterface"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a MAC address that is assigned to a device interface
//
// With `deviceInterfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a device with the id `123` exists
//			this, err := dcim.NewDeviceInterface(ctx, "this", &dcim.DeviceInterfaceArgs{
//				Name:     pulumi.String("eth0"),
//				DeviceId: pulumi.Int(123),
//				Type:     pulumi.String("1000base-t"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netbox.NewMacAddress(ctx, "this", &netbox.MacAddressArgs{
//				MacAddress:        pulumi.String("00:1A:2B:3C:4D:5E"),
//				DeviceInterfaceId: this.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With `objectType` and `interfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a device with the id `123` exists
//			this, err := dcim.NewDeviceInterface(ctx, "this", &dcim.DeviceInterfaceArgs{
//				Name:     pulumi.String("eth0"),
//				DeviceId: pulumi.Int(123),
//				Type:     pulumi.String("1000base-t"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = netbox.NewMacAddress(ctx, "this", &netbox.MacAddressArgs{
//				MacAddress:  pulumi.String("00:1A:2B:3C:4D:5E"),
//				InterfaceId: this.ID(),
//				ObjectType:  pulumi.String("dcim.interface"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a MAC address that is not assigned to anything
//
// You can create a MAC address that is not assigned to anything by omitting the attributes mentioned above.
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := netbox.NewMacAddress(ctx, "this", &netbox.MacAddressArgs{
//				MacAddress: pulumi.String("00:1A:2B:3C:4D:5E"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MacAddress struct {
	pulumi.CustomResourceState

	Comments     pulumi.StringPtrOutput `pulumi:"comments"`
	CustomFields pulumi.StringMapOutput `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrOutput `pulumi:"deviceInterfaceId"`
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrOutput `pulumi:"interfaceId"`
	MacAddress  pulumi.StringOutput `pulumi:"macAddress"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrOutput   `pulumi:"objectType"`
	Tags       pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls   pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrOutput `pulumi:"virtualMachineInterfaceId"`
}

// NewMacAddress registers a new resource with the given unique name, arguments, and options.
func NewMacAddress(ctx *pulumi.Context,
	name string, args *MacAddressArgs, opts ...pulumi.ResourceOption) (*MacAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MacAddress == nil {
		return nil, errors.New("invalid value for required argument 'MacAddress'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MacAddress
	err := ctx.RegisterResource("netbox:index/macAddress:MacAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMacAddress gets an existing MacAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMacAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MacAddressState, opts ...pulumi.ResourceOption) (*MacAddress, error) {
	var resource MacAddress
	err := ctx.ReadResource("netbox:index/macAddress:MacAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MacAddress resources.
type macAddressState struct {
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int `pulumi:"deviceInterfaceId"`
	// Required when `objectType` is set.
	InterfaceId *int    `pulumi:"interfaceId"`
	MacAddress  *string `pulumi:"macAddress"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string  `pulumi:"objectType"`
	Tags       []string `pulumi:"tags"`
	TagsAlls   []string `pulumi:"tagsAlls"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
}

type MacAddressState struct {
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrInput
	MacAddress  pulumi.StringPtrInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	Tags       pulumi.StringArrayInput
	TagsAlls   pulumi.StringArrayInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
}

func (MacAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*macAddressState)(nil)).Elem()
}

type macAddressArgs struct {
	Comments     *string           `pulumi:"comments"`
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int `pulumi:"deviceInterfaceId"`
	// Required when `objectType` is set.
	InterfaceId *int   `pulumi:"interfaceId"`
	MacAddress  string `pulumi:"macAddress"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string  `pulumi:"objectType"`
	Tags       []string `pulumi:"tags"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
}

// The set of arguments for constructing a MacAddress resource.
type MacAddressArgs struct {
	Comments     pulumi.StringPtrInput
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrInput
	MacAddress  pulumi.StringInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	Tags       pulumi.StringArrayInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
}

func (MacAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*macAddressArgs)(nil)).Elem()
}

type MacAddressInput interface {
	pulumi.Input

	ToMacAddressOutput() MacAddressOutput
	ToMacAddressOutputWithContext(ctx context.Context) MacAddressOutput
}

func (*MacAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**MacAddress)(nil)).Elem()
}

func (i *MacAddress) ToMacAddressOutput() MacAddressOutput {
	return i.ToMacAddressOutputWithContext(context.Background())
}

func (i *MacAddress) ToMacAddressOutputWithContext(ctx context.Context) MacAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MacAddressOutput)
}

// MacAddressArrayInput is an input type that accepts MacAddressArray and MacAddressArrayOutput values.
// You can construct a concrete instance of `MacAddressArrayInput` via:
//
//	MacAddressArray{ MacAddressArgs{...} }
type MacAddressArrayInput interface {
	pulumi.Input

	ToMacAddressArrayOutput() MacAddressArrayOutput
	ToMacAddressArrayOutputWithContext(context.Context) MacAddressArrayOutput
}

type MacAddressArray []MacAddressInput

func (MacAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MacAddress)(nil)).Elem()
}

func (i MacAddressArray) ToMacAddressArrayOutput() MacAddressArrayOutput {
	return i.ToMacAddressArrayOutputWithContext(context.Background())
}

func (i MacAddressArray) ToMacAddressArrayOutputWithContext(ctx context.Context) MacAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MacAddressArrayOutput)
}

// MacAddressMapInput is an input type that accepts MacAddressMap and MacAddressMapOutput values.
// You can construct a concrete instance of `MacAddressMapInput` via:
//
//	MacAddressMap{ "key": MacAddressArgs{...} }
type MacAddressMapInput interface {
	pulumi.Input

	ToMacAddressMapOutput() MacAddressMapOutput
	ToMacAddressMapOutputWithContext(context.Context) MacAddressMapOutput
}

type MacAddressMap map[string]MacAddressInput

func (MacAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MacAddress)(nil)).Elem()
}

func (i MacAddressMap) ToMacAddressMapOutput() MacAddressMapOutput {
	return i.ToMacAddressMapOutputWithContext(context.Background())
}

func (i MacAddressMap) ToMacAddressMapOutputWithContext(ctx context.Context) MacAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MacAddressMapOutput)
}

type MacAddressOutput struct{ *pulumi.OutputState }

func (MacAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MacAddress)(nil)).Elem()
}

func (o MacAddressOutput) ToMacAddressOutput() MacAddressOutput {
	return o
}

func (o MacAddressOutput) ToMacAddressOutputWithContext(ctx context.Context) MacAddressOutput {
	return o
}

func (o MacAddressOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

func (o MacAddressOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o MacAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
func (o MacAddressOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.IntPtrOutput { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

// Required when `objectType` is set.
func (o MacAddressOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.IntPtrOutput { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

func (o MacAddressOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
func (o MacAddressOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringPtrOutput { return v.ObjectType }).(pulumi.StringPtrOutput)
}

func (o MacAddressOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o MacAddressOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

// Conflicts with `interfaceId` and `deviceInterfaceId`.
func (o MacAddressOutput) VirtualMachineInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MacAddress) pulumi.IntPtrOutput { return v.VirtualMachineInterfaceId }).(pulumi.IntPtrOutput)
}

type MacAddressArrayOutput struct{ *pulumi.OutputState }

func (MacAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MacAddress)(nil)).Elem()
}

func (o MacAddressArrayOutput) ToMacAddressArrayOutput() MacAddressArrayOutput {
	return o
}

func (o MacAddressArrayOutput) ToMacAddressArrayOutputWithContext(ctx context.Context) MacAddressArrayOutput {
	return o
}

func (o MacAddressArrayOutput) Index(i pulumi.IntInput) MacAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MacAddress {
		return vs[0].([]*MacAddress)[vs[1].(int)]
	}).(MacAddressOutput)
}

type MacAddressMapOutput struct{ *pulumi.OutputState }

func (MacAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MacAddress)(nil)).Elem()
}

func (o MacAddressMapOutput) ToMacAddressMapOutput() MacAddressMapOutput {
	return o
}

func (o MacAddressMapOutput) ToMacAddressMapOutputWithContext(ctx context.Context) MacAddressMapOutput {
	return o
}

func (o MacAddressMapOutput) MapIndex(k pulumi.StringInput) MacAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MacAddress {
		return vs[0].(map[string]*MacAddress)[vs[1].(string)]
	}).(MacAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MacAddressInput)(nil)).Elem(), &MacAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*MacAddressArrayInput)(nil)).Elem(), MacAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MacAddressMapInput)(nil)).Elem(), MacAddressMap{})
	pulumi.RegisterOutputType(MacAddressOutput{})
	pulumi.RegisterOutputType(MacAddressArrayOutput{})
	pulumi.RegisterOutputType(MacAddressMapOutput{})
}
