// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/rest-api/authentication/#tokens):
//
// > A token is a unique identifier mapped to a NetBox user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/auth"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := auth.NewUser(ctx, "test", &auth.UserArgs{
//				Username: pulumi.String("johndoe"),
//				Password: pulumi.String("Abcdefghijkl1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = auth.NewToken(ctx, "test_basic", &auth.TokenArgs{
//				UserId: test.ID(),
//				Key:    pulumi.String("0123456789012345678901234567890123456789"),
//				AllowedIps: pulumi.StringArray{
//					pulumi.String("2.4.8.16/32"),
//				},
//				WriteEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Token struct {
	pulumi.CustomResourceState

	AllowedIps   pulumi.StringArrayOutput `pulumi:"allowedIps"`
	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	Expires      pulumi.StringOutput      `pulumi:"expires"`
	Key          pulumi.StringPtrOutput   `pulumi:"key"`
	LastUsed     pulumi.StringOutput      `pulumi:"lastUsed"`
	UserId       pulumi.IntOutput         `pulumi:"userId"`
	WriteEnabled pulumi.BoolPtrOutput     `pulumi:"writeEnabled"`
}

// NewToken registers a new resource with the given unique name, arguments, and options.
func NewToken(ctx *pulumi.Context,
	name string, args *TokenArgs, opts ...pulumi.ResourceOption) (*Token, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Token
	err := ctx.RegisterResource("netbox:auth/token:Token", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetToken gets an existing Token resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenState, opts ...pulumi.ResourceOption) (*Token, error) {
	var resource Token
	err := ctx.ReadResource("netbox:auth/token:Token", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Token resources.
type tokenState struct {
	AllowedIps   []string `pulumi:"allowedIps"`
	Description  *string  `pulumi:"description"`
	Expires      *string  `pulumi:"expires"`
	Key          *string  `pulumi:"key"`
	LastUsed     *string  `pulumi:"lastUsed"`
	UserId       *int     `pulumi:"userId"`
	WriteEnabled *bool    `pulumi:"writeEnabled"`
}

type TokenState struct {
	AllowedIps   pulumi.StringArrayInput
	Description  pulumi.StringPtrInput
	Expires      pulumi.StringPtrInput
	Key          pulumi.StringPtrInput
	LastUsed     pulumi.StringPtrInput
	UserId       pulumi.IntPtrInput
	WriteEnabled pulumi.BoolPtrInput
}

func (TokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenState)(nil)).Elem()
}

type tokenArgs struct {
	AllowedIps   []string `pulumi:"allowedIps"`
	Description  *string  `pulumi:"description"`
	Key          *string  `pulumi:"key"`
	UserId       int      `pulumi:"userId"`
	WriteEnabled *bool    `pulumi:"writeEnabled"`
}

// The set of arguments for constructing a Token resource.
type TokenArgs struct {
	AllowedIps   pulumi.StringArrayInput
	Description  pulumi.StringPtrInput
	Key          pulumi.StringPtrInput
	UserId       pulumi.IntInput
	WriteEnabled pulumi.BoolPtrInput
}

func (TokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenArgs)(nil)).Elem()
}

type TokenInput interface {
	pulumi.Input

	ToTokenOutput() TokenOutput
	ToTokenOutputWithContext(ctx context.Context) TokenOutput
}

func (*Token) ElementType() reflect.Type {
	return reflect.TypeOf((**Token)(nil)).Elem()
}

func (i *Token) ToTokenOutput() TokenOutput {
	return i.ToTokenOutputWithContext(context.Background())
}

func (i *Token) ToTokenOutputWithContext(ctx context.Context) TokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenOutput)
}

// TokenArrayInput is an input type that accepts TokenArray and TokenArrayOutput values.
// You can construct a concrete instance of `TokenArrayInput` via:
//
//	TokenArray{ TokenArgs{...} }
type TokenArrayInput interface {
	pulumi.Input

	ToTokenArrayOutput() TokenArrayOutput
	ToTokenArrayOutputWithContext(context.Context) TokenArrayOutput
}

type TokenArray []TokenInput

func (TokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Token)(nil)).Elem()
}

func (i TokenArray) ToTokenArrayOutput() TokenArrayOutput {
	return i.ToTokenArrayOutputWithContext(context.Background())
}

func (i TokenArray) ToTokenArrayOutputWithContext(ctx context.Context) TokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenArrayOutput)
}

// TokenMapInput is an input type that accepts TokenMap and TokenMapOutput values.
// You can construct a concrete instance of `TokenMapInput` via:
//
//	TokenMap{ "key": TokenArgs{...} }
type TokenMapInput interface {
	pulumi.Input

	ToTokenMapOutput() TokenMapOutput
	ToTokenMapOutputWithContext(context.Context) TokenMapOutput
}

type TokenMap map[string]TokenInput

func (TokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Token)(nil)).Elem()
}

func (i TokenMap) ToTokenMapOutput() TokenMapOutput {
	return i.ToTokenMapOutputWithContext(context.Background())
}

func (i TokenMap) ToTokenMapOutputWithContext(ctx context.Context) TokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenMapOutput)
}

type TokenOutput struct{ *pulumi.OutputState }

func (TokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Token)(nil)).Elem()
}

func (o TokenOutput) ToTokenOutput() TokenOutput {
	return o
}

func (o TokenOutput) ToTokenOutputWithContext(ctx context.Context) TokenOutput {
	return o
}

func (o TokenOutput) AllowedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Token) pulumi.StringArrayOutput { return v.AllowedIps }).(pulumi.StringArrayOutput)
}

func (o TokenOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Token) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TokenOutput) Expires() pulumi.StringOutput {
	return o.ApplyT(func(v *Token) pulumi.StringOutput { return v.Expires }).(pulumi.StringOutput)
}

func (o TokenOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Token) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

func (o TokenOutput) LastUsed() pulumi.StringOutput {
	return o.ApplyT(func(v *Token) pulumi.StringOutput { return v.LastUsed }).(pulumi.StringOutput)
}

func (o TokenOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *Token) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

func (o TokenOutput) WriteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Token) pulumi.BoolPtrOutput { return v.WriteEnabled }).(pulumi.BoolPtrOutput)
}

type TokenArrayOutput struct{ *pulumi.OutputState }

func (TokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Token)(nil)).Elem()
}

func (o TokenArrayOutput) ToTokenArrayOutput() TokenArrayOutput {
	return o
}

func (o TokenArrayOutput) ToTokenArrayOutputWithContext(ctx context.Context) TokenArrayOutput {
	return o
}

func (o TokenArrayOutput) Index(i pulumi.IntInput) TokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Token {
		return vs[0].([]*Token)[vs[1].(int)]
	}).(TokenOutput)
}

type TokenMapOutput struct{ *pulumi.OutputState }

func (TokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Token)(nil)).Elem()
}

func (o TokenMapOutput) ToTokenMapOutput() TokenMapOutput {
	return o
}

func (o TokenMapOutput) ToTokenMapOutputWithContext(ctx context.Context) TokenMapOutput {
	return o
}

func (o TokenMapOutput) MapIndex(k pulumi.StringInput) TokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Token {
		return vs[0].(map[string]*Token)[vs[1].(string)]
	}).(TokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenInput)(nil)).Elem(), &Token{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenArrayInput)(nil)).Elem(), TokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenMapInput)(nil)).Elem(), TokenMap{})
	pulumi.RegisterOutputType(TokenOutput{})
	pulumi.RegisterOutputType(TokenArrayOutput{})
	pulumi.RegisterOutputType(TokenMapOutput{})
}
