// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package auth

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource manages the object-based permissions for Netbox users, built into the application.
//
// > Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.
// For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/auth"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := auth.NewUser(ctx, "test", &auth.UserArgs{
//				Username: pulumi.String("johndoe"),
//				Password: pulumi.String("Abcdefghijkl1"),
//				Active:   pulumi.Bool(true),
//				Staff:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal([]map[string]interface{}{
//				map[string]interface{}{
//					"status": "active",
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = auth.NewPermission(ctx, "test", &auth.PermissionArgs{
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("my description"),
//				Enabled:     pulumi.Bool(true),
//				ObjectTypes: pulumi.StringArray{
//					pulumi.String("ipam.prefix"),
//				},
//				Actions: pulumi.StringArray{
//					pulumi.String("add"),
//					pulumi.String("change"),
//				},
//				Users: pulumi.IntArray{
//					test.ID(),
//				},
//				Constraints: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Permission struct {
	pulumi.CustomResourceState

	// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
	Actions pulumi.StringArrayOutput `pulumi:"actions"`
	// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
	Constraints pulumi.StringPtrOutput `pulumi:"constraints"`
	// The description of the permission object.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the permission object is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A list of group IDs that have been assigned to this permission object.
	Groups pulumi.IntArrayOutput `pulumi:"groups"`
	// The name of the permission object.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
	ObjectTypes pulumi.StringArrayOutput `pulumi:"objectTypes"`
	// A list of user IDs that have been assigned to this permission object.
	Users pulumi.IntArrayOutput `pulumi:"users"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.ObjectTypes == nil {
		return nil, errors.New("invalid value for required argument 'ObjectTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("netbox:auth/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("netbox:auth/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
	Actions []string `pulumi:"actions"`
	// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
	Constraints *string `pulumi:"constraints"`
	// The description of the permission object.
	Description *string `pulumi:"description"`
	// Whether the permission object is enabled or not. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A list of group IDs that have been assigned to this permission object.
	Groups []int `pulumi:"groups"`
	// The name of the permission object.
	Name *string `pulumi:"name"`
	// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
	ObjectTypes []string `pulumi:"objectTypes"`
	// A list of user IDs that have been assigned to this permission object.
	Users []int `pulumi:"users"`
}

type PermissionState struct {
	// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
	Actions pulumi.StringArrayInput
	// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
	Constraints pulumi.StringPtrInput
	// The description of the permission object.
	Description pulumi.StringPtrInput
	// Whether the permission object is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A list of group IDs that have been assigned to this permission object.
	Groups pulumi.IntArrayInput
	// The name of the permission object.
	Name pulumi.StringPtrInput
	// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
	ObjectTypes pulumi.StringArrayInput
	// A list of user IDs that have been assigned to this permission object.
	Users pulumi.IntArrayInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
	Actions []string `pulumi:"actions"`
	// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
	Constraints *string `pulumi:"constraints"`
	// The description of the permission object.
	Description *string `pulumi:"description"`
	// Whether the permission object is enabled or not. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A list of group IDs that have been assigned to this permission object.
	Groups []int `pulumi:"groups"`
	// The name of the permission object.
	Name *string `pulumi:"name"`
	// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
	ObjectTypes []string `pulumi:"objectTypes"`
	// A list of user IDs that have been assigned to this permission object.
	Users []int `pulumi:"users"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
	Actions pulumi.StringArrayInput
	// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
	Constraints pulumi.StringPtrInput
	// The description of the permission object.
	Description pulumi.StringPtrInput
	// Whether the permission object is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A list of group IDs that have been assigned to this permission object.
	Groups pulumi.IntArrayInput
	// The name of the permission object.
	Name pulumi.StringPtrInput
	// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
	ObjectTypes pulumi.StringArrayInput
	// A list of user IDs that have been assigned to this permission object.
	Users pulumi.IntArrayInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// PermissionMapInput is an input type that accepts PermissionMap and PermissionMapOutput values.
// You can construct a concrete instance of `PermissionMapInput` via:
//
//	PermissionMap{ "key": PermissionArgs{...} }
type PermissionMapInput interface {
	pulumi.Input

	ToPermissionMapOutput() PermissionMapOutput
	ToPermissionMapOutputWithContext(context.Context) PermissionMapOutput
}

type PermissionMap map[string]PermissionInput

func (PermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (i PermissionMap) ToPermissionMapOutput() PermissionMapOutput {
	return i.ToPermissionMapOutputWithContext(context.Background())
}

func (i PermissionMap) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionMapOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
func (o PermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringArrayOutput { return v.Actions }).(pulumi.StringArrayOutput)
}

// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
func (o PermissionOutput) Constraints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.Constraints }).(pulumi.StringPtrOutput)
}

// The description of the permission object.
func (o PermissionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the permission object is enabled or not. Defaults to `true`.
func (o PermissionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Permission) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A list of group IDs that have been assigned to this permission object.
func (o PermissionOutput) Groups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Permission) pulumi.IntArrayOutput { return v.Groups }).(pulumi.IntArrayOutput)
}

// The name of the permission object.
func (o PermissionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
func (o PermissionOutput) ObjectTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringArrayOutput { return v.ObjectTypes }).(pulumi.StringArrayOutput)
}

// A list of user IDs that have been assigned to this permission object.
func (o PermissionOutput) Users() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Permission) pulumi.IntArrayOutput { return v.Users }).(pulumi.IntArrayOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].([]*Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

type PermissionMapOutput struct{ *pulumi.OutputState }

func (PermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (o PermissionMapOutput) ToPermissionMapOutput() PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) MapIndex(k pulumi.StringInput) PermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].(map[string]*Permission)[vs[1].(string)]
	}).(PermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionArrayInput)(nil)).Elem(), PermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionMapInput)(nil)).Elem(), PermissionMap{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionMapOutput{})
}
