// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/ipam/routetarget/):
//
// > A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in NetBox as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/tenancy"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := tenancy.NewTenant(ctx, "test", &tenancy.TenantArgs{
//				Name: pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewRouteTarget(ctx, "test", &ipam.RouteTargetArgs{
//				Name:        pulumi.String("test"),
//				Description: pulumi.String("my description"),
//				TenantId:    test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RouteTarget struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput   `pulumi:"description"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Tags        pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls    pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TenantId    pulumi.IntPtrOutput      `pulumi:"tenantId"`
}

// NewRouteTarget registers a new resource with the given unique name, arguments, and options.
func NewRouteTarget(ctx *pulumi.Context,
	name string, args *RouteTargetArgs, opts ...pulumi.ResourceOption) (*RouteTarget, error) {
	if args == nil {
		args = &RouteTargetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTarget
	err := ctx.RegisterResource("netbox:ipam/routeTarget:RouteTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTarget gets an existing RouteTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTargetState, opts ...pulumi.ResourceOption) (*RouteTarget, error) {
	var resource RouteTarget
	err := ctx.ReadResource("netbox:ipam/routeTarget:RouteTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTarget resources.
type routeTargetState struct {
	Description *string  `pulumi:"description"`
	Name        *string  `pulumi:"name"`
	Tags        []string `pulumi:"tags"`
	TagsAlls    []string `pulumi:"tagsAlls"`
	TenantId    *int     `pulumi:"tenantId"`
}

type RouteTargetState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
	TagsAlls    pulumi.StringArrayInput
	TenantId    pulumi.IntPtrInput
}

func (RouteTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTargetState)(nil)).Elem()
}

type routeTargetArgs struct {
	Description *string  `pulumi:"description"`
	Name        *string  `pulumi:"name"`
	Tags        []string `pulumi:"tags"`
	TenantId    *int     `pulumi:"tenantId"`
}

// The set of arguments for constructing a RouteTarget resource.
type RouteTargetArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Tags        pulumi.StringArrayInput
	TenantId    pulumi.IntPtrInput
}

func (RouteTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTargetArgs)(nil)).Elem()
}

type RouteTargetInput interface {
	pulumi.Input

	ToRouteTargetOutput() RouteTargetOutput
	ToRouteTargetOutputWithContext(ctx context.Context) RouteTargetOutput
}

func (*RouteTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTarget)(nil)).Elem()
}

func (i *RouteTarget) ToRouteTargetOutput() RouteTargetOutput {
	return i.ToRouteTargetOutputWithContext(context.Background())
}

func (i *RouteTarget) ToRouteTargetOutputWithContext(ctx context.Context) RouteTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetOutput)
}

// RouteTargetArrayInput is an input type that accepts RouteTargetArray and RouteTargetArrayOutput values.
// You can construct a concrete instance of `RouteTargetArrayInput` via:
//
//	RouteTargetArray{ RouteTargetArgs{...} }
type RouteTargetArrayInput interface {
	pulumi.Input

	ToRouteTargetArrayOutput() RouteTargetArrayOutput
	ToRouteTargetArrayOutputWithContext(context.Context) RouteTargetArrayOutput
}

type RouteTargetArray []RouteTargetInput

func (RouteTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTarget)(nil)).Elem()
}

func (i RouteTargetArray) ToRouteTargetArrayOutput() RouteTargetArrayOutput {
	return i.ToRouteTargetArrayOutputWithContext(context.Background())
}

func (i RouteTargetArray) ToRouteTargetArrayOutputWithContext(ctx context.Context) RouteTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetArrayOutput)
}

// RouteTargetMapInput is an input type that accepts RouteTargetMap and RouteTargetMapOutput values.
// You can construct a concrete instance of `RouteTargetMapInput` via:
//
//	RouteTargetMap{ "key": RouteTargetArgs{...} }
type RouteTargetMapInput interface {
	pulumi.Input

	ToRouteTargetMapOutput() RouteTargetMapOutput
	ToRouteTargetMapOutputWithContext(context.Context) RouteTargetMapOutput
}

type RouteTargetMap map[string]RouteTargetInput

func (RouteTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTarget)(nil)).Elem()
}

func (i RouteTargetMap) ToRouteTargetMapOutput() RouteTargetMapOutput {
	return i.ToRouteTargetMapOutputWithContext(context.Background())
}

func (i RouteTargetMap) ToRouteTargetMapOutputWithContext(ctx context.Context) RouteTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTargetMapOutput)
}

type RouteTargetOutput struct{ *pulumi.OutputState }

func (RouteTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTarget)(nil)).Elem()
}

func (o RouteTargetOutput) ToRouteTargetOutput() RouteTargetOutput {
	return o
}

func (o RouteTargetOutput) ToRouteTargetOutputWithContext(ctx context.Context) RouteTargetOutput {
	return o
}

func (o RouteTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTarget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RouteTargetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTarget) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RouteTargetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTarget) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o RouteTargetOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTarget) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o RouteTargetOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteTarget) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

type RouteTargetArrayOutput struct{ *pulumi.OutputState }

func (RouteTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTarget)(nil)).Elem()
}

func (o RouteTargetArrayOutput) ToRouteTargetArrayOutput() RouteTargetArrayOutput {
	return o
}

func (o RouteTargetArrayOutput) ToRouteTargetArrayOutputWithContext(ctx context.Context) RouteTargetArrayOutput {
	return o
}

func (o RouteTargetArrayOutput) Index(i pulumi.IntInput) RouteTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTarget {
		return vs[0].([]*RouteTarget)[vs[1].(int)]
	}).(RouteTargetOutput)
}

type RouteTargetMapOutput struct{ *pulumi.OutputState }

func (RouteTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTarget)(nil)).Elem()
}

func (o RouteTargetMapOutput) ToRouteTargetMapOutput() RouteTargetMapOutput {
	return o
}

func (o RouteTargetMapOutput) ToRouteTargetMapOutputWithContext(ctx context.Context) RouteTargetMapOutput {
	return o
}

func (o RouteTargetMapOutput) MapIndex(k pulumi.StringInput) RouteTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTarget {
		return vs[0].(map[string]*RouteTarget)[vs[1].(string)]
	}).(RouteTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTargetInput)(nil)).Elem(), &RouteTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTargetArrayInput)(nil)).Elem(), RouteTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTargetMapInput)(nil)).Elem(), RouteTargetMap{})
	pulumi.RegisterOutputType(RouteTargetOutput{})
	pulumi.RegisterOutputType(RouteTargetArrayOutput{})
	pulumi.RegisterOutputType(RouteTargetMapOutput{})
}
