// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#ip-addresses):
//
// > An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.
// >
// > Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.
//
// ## Example Usage
//
// ### Creating an IP address that is assigned to a virtual machine interface
//
// Starting with provider version 3.5.0, you can use the `virtualMachineInterfaceId` attribute to assign an IP address to a virtual machine interface.
// You can also use the `interfaceId` and `objectType` attributes instead.
//
// With `virtualMachineInterfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/virt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a virtual machine with the id `123` exists
//			this, err := virt.NewInterface(ctx, "this", &virt.InterfaceArgs{
//				Name:             pulumi.String("eth0"),
//				VirtualMachineId: pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewIpAddress(ctx, "this", &ipam.IpAddressArgs{
//				IpAddress:                 pulumi.String("10.0.0.60/24"),
//				Status:                    pulumi.String("active"),
//				VirtualMachineInterfaceId: this.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With `objectType` and `interfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/virt"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a virtual machine with the id `123` exists
//			this, err := virt.NewInterface(ctx, "this", &virt.InterfaceArgs{
//				Name:             pulumi.String("eth0"),
//				VirtualMachineId: pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewIpAddress(ctx, "this", &ipam.IpAddressArgs{
//				IpAddress:   pulumi.String("10.0.0.60/24"),
//				Status:      pulumi.String("active"),
//				InterfaceId: this.ID(),
//				ObjectType:  pulumi.String("virtualization.vminterface"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating an IP address that is assigned to a device interface
//
// Starting with provider version 3.5.0, you can use the `deviceInterfaceId` attribute to assign an IP address to a device interface.
// You can also use the `interfaceId` and `objectType` attributes instead.
//
// With `deviceInterfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a device with the id `123` exists
//			this, err := dcim.NewDeviceInterface(ctx, "this", &dcim.DeviceInterfaceArgs{
//				Name:     pulumi.String("eth0"),
//				DeviceId: pulumi.Int(123),
//				Type:     pulumi.String("1000base-t"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewIpAddress(ctx, "this", &ipam.IpAddressArgs{
//				IpAddress:         pulumi.String("10.0.0.60/24"),
//				Status:            pulumi.String("active"),
//				DeviceInterfaceId: this.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// With `objectType` and `interfaceId`:
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/dcim"
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Assuming a device with the id `123` exists
//			this, err := dcim.NewDeviceInterface(ctx, "this", &dcim.DeviceInterfaceArgs{
//				Name:     pulumi.String("eth0"),
//				DeviceId: pulumi.Int(123),
//				Type:     pulumi.String("1000base-t"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewIpAddress(ctx, "this", &ipam.IpAddressArgs{
//				IpAddress:   pulumi.String("10.0.0.60/24"),
//				Status:      pulumi.String("active"),
//				InterfaceId: this.ID(),
//				ObjectType:  pulumi.String("dcim.interface"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating an IP address that is not assigned to anything
//
// You can create an IP address that is not assigend to anything by omitting the attributes mentioned above.
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ipam.NewIpAddress(ctx, "this", &ipam.IpAddressArgs{
//				IpAddress: pulumi.String("10.0.0.50/24"),
//				Status:    pulumi.String("reserved"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpAddress struct {
	pulumi.CustomResourceState

	CustomFields pulumi.StringMapOutput `pulumi:"customFields"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrOutput    `pulumi:"deviceInterfaceId"`
	DnsName           pulumi.StringPtrOutput `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId         pulumi.IntPtrOutput                   `pulumi:"interfaceId"`
	IpAddress           pulumi.StringOutput                   `pulumi:"ipAddress"`
	NatInsideAddressId  pulumi.IntPtrOutput                   `pulumi:"natInsideAddressId"`
	NatOutsideAddresses IpAddressNatOutsideAddressArrayOutput `pulumi:"natOutsideAddresses"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrOutput `pulumi:"objectType"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status   pulumi.StringOutput      `pulumi:"status"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId pulumi.IntPtrOutput      `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrOutput `pulumi:"virtualMachineInterfaceId"`
	VrfId                     pulumi.IntPtrOutput `pulumi:"vrfId"`
}

// NewIpAddress registers a new resource with the given unique name, arguments, and options.
func NewIpAddress(ctx *pulumi.Context,
	name string, args *IpAddressArgs, opts ...pulumi.ResourceOption) (*IpAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddress == nil {
		return nil, errors.New("invalid value for required argument 'IpAddress'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpAddress
	err := ctx.RegisterResource("netbox:ipam/ipAddress:IpAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpAddress gets an existing IpAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpAddressState, opts ...pulumi.ResourceOption) (*IpAddress, error) {
	var resource IpAddress
	err := ctx.ReadResource("netbox:ipam/ipAddress:IpAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpAddress resources.
type ipAddressState struct {
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int    `pulumi:"deviceInterfaceId"`
	DnsName           *string `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId         *int                         `pulumi:"interfaceId"`
	IpAddress           *string                      `pulumi:"ipAddress"`
	NatInsideAddressId  *int                         `pulumi:"natInsideAddressId"`
	NatOutsideAddresses []IpAddressNatOutsideAddress `pulumi:"natOutsideAddresses"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string `pulumi:"objectType"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
	VrfId                     *int `pulumi:"vrfId"`
}

type IpAddressState struct {
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	DnsName           pulumi.StringPtrInput
	// Required when `objectType` is set.
	InterfaceId         pulumi.IntPtrInput
	IpAddress           pulumi.StringPtrInput
	NatInsideAddressId  pulumi.IntPtrInput
	NatOutsideAddresses IpAddressNatOutsideAddressArrayInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrInput
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
	VrfId                     pulumi.IntPtrInput
}

func (IpAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressState)(nil)).Elem()
}

type ipAddressArgs struct {
	CustomFields map[string]string `pulumi:"customFields"`
	Description  *string           `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int    `pulumi:"deviceInterfaceId"`
	DnsName           *string `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId        *int   `pulumi:"interfaceId"`
	IpAddress          string `pulumi:"ipAddress"`
	NatInsideAddressId *int   `pulumi:"natInsideAddressId"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string `pulumi:"objectType"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status   string   `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
	VrfId                     *int `pulumi:"vrfId"`
}

// The set of arguments for constructing a IpAddress resource.
type IpAddressArgs struct {
	CustomFields pulumi.StringMapInput
	Description  pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	DnsName           pulumi.StringPtrInput
	// Required when `objectType` is set.
	InterfaceId        pulumi.IntPtrInput
	IpAddress          pulumi.StringInput
	NatInsideAddressId pulumi.IntPtrInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrInput
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status   pulumi.StringInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
	VrfId                     pulumi.IntPtrInput
}

func (IpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressArgs)(nil)).Elem()
}

type IpAddressInput interface {
	pulumi.Input

	ToIpAddressOutput() IpAddressOutput
	ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput
}

func (*IpAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (i *IpAddress) ToIpAddressOutput() IpAddressOutput {
	return i.ToIpAddressOutputWithContext(context.Background())
}

func (i *IpAddress) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput)
}

// IpAddressArrayInput is an input type that accepts IpAddressArray and IpAddressArrayOutput values.
// You can construct a concrete instance of `IpAddressArrayInput` via:
//
//	IpAddressArray{ IpAddressArgs{...} }
type IpAddressArrayInput interface {
	pulumi.Input

	ToIpAddressArrayOutput() IpAddressArrayOutput
	ToIpAddressArrayOutputWithContext(context.Context) IpAddressArrayOutput
}

type IpAddressArray []IpAddressInput

func (IpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddress)(nil)).Elem()
}

func (i IpAddressArray) ToIpAddressArrayOutput() IpAddressArrayOutput {
	return i.ToIpAddressArrayOutputWithContext(context.Background())
}

func (i IpAddressArray) ToIpAddressArrayOutputWithContext(ctx context.Context) IpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressArrayOutput)
}

// IpAddressMapInput is an input type that accepts IpAddressMap and IpAddressMapOutput values.
// You can construct a concrete instance of `IpAddressMapInput` via:
//
//	IpAddressMap{ "key": IpAddressArgs{...} }
type IpAddressMapInput interface {
	pulumi.Input

	ToIpAddressMapOutput() IpAddressMapOutput
	ToIpAddressMapOutputWithContext(context.Context) IpAddressMapOutput
}

type IpAddressMap map[string]IpAddressInput

func (IpAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddress)(nil)).Elem()
}

func (i IpAddressMap) ToIpAddressMapOutput() IpAddressMapOutput {
	return i.ToIpAddressMapOutputWithContext(context.Background())
}

func (i IpAddressMap) ToIpAddressMapOutputWithContext(ctx context.Context) IpAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressMapOutput)
}

type IpAddressOutput struct{ *pulumi.OutputState }

func (IpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (o IpAddressOutput) ToIpAddressOutput() IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return o
}

func (o IpAddressOutput) CustomFields() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringMapOutput { return v.CustomFields }).(pulumi.StringMapOutput)
}

func (o IpAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
func (o IpAddressOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

func (o IpAddressOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Required when `objectType` is set.
func (o IpAddressOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

func (o IpAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o IpAddressOutput) NatInsideAddressId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.NatInsideAddressId }).(pulumi.IntPtrOutput)
}

func (o IpAddressOutput) NatOutsideAddresses() IpAddressNatOutsideAddressArrayOutput {
	return o.ApplyT(func(v *IpAddress) IpAddressNatOutsideAddressArrayOutput { return v.NatOutsideAddresses }).(IpAddressNatOutsideAddressArrayOutput)
}

// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
func (o IpAddressOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.ObjectType }).(pulumi.StringPtrOutput)
}

// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
func (o IpAddressOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
func (o IpAddressOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o IpAddressOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o IpAddressOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

// Conflicts with `interfaceId` and `deviceInterfaceId`.
func (o IpAddressOutput) VirtualMachineInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.VirtualMachineInterfaceId }).(pulumi.IntPtrOutput)
}

func (o IpAddressOutput) VrfId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.IntPtrOutput { return v.VrfId }).(pulumi.IntPtrOutput)
}

type IpAddressArrayOutput struct{ *pulumi.OutputState }

func (IpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddress)(nil)).Elem()
}

func (o IpAddressArrayOutput) ToIpAddressArrayOutput() IpAddressArrayOutput {
	return o
}

func (o IpAddressArrayOutput) ToIpAddressArrayOutputWithContext(ctx context.Context) IpAddressArrayOutput {
	return o
}

func (o IpAddressArrayOutput) Index(i pulumi.IntInput) IpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpAddress {
		return vs[0].([]*IpAddress)[vs[1].(int)]
	}).(IpAddressOutput)
}

type IpAddressMapOutput struct{ *pulumi.OutputState }

func (IpAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddress)(nil)).Elem()
}

func (o IpAddressMapOutput) ToIpAddressMapOutput() IpAddressMapOutput {
	return o
}

func (o IpAddressMapOutput) ToIpAddressMapOutputWithContext(ctx context.Context) IpAddressMapOutput {
	return o
}

func (o IpAddressMapOutput) MapIndex(k pulumi.StringInput) IpAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpAddress {
		return vs[0].(map[string]*IpAddress)[vs[1].(string)]
	}).(IpAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressInput)(nil)).Elem(), &IpAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressArrayInput)(nil)).Elem(), IpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressMapInput)(nil)).Elem(), IpAddressMap{})
	pulumi.RegisterOutputType(IpAddressOutput{})
	pulumi.RegisterOutputType(IpAddressArrayOutput{})
	pulumi.RegisterOutputType(IpAddressMapOutput{})
}
