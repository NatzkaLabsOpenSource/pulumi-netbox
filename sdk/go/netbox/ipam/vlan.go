// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/vlans/#vlans):
//
// > A VLAN represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. VLANs are arranged into VLAN groups to define scope and to enforce uniqueness.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ipam.NewVlan(ctx, "example1", &ipam.VlanArgs{
//				Name: pulumi.String("VLAN 1"),
//				Vid:  pulumi.Int(1777),
//				Tags: pulumi.StringArray{},
//			})
//			if err != nil {
//				return err
//			}
//			// Assume netbox_tenant, netbox_site, and netbox_tag resources exist
//			_, err = ipam.NewVlan(ctx, "example2", &ipam.VlanArgs{
//				Name:        pulumi.String("VLAN 2"),
//				Vid:         pulumi.Int(1778),
//				Status:      pulumi.String("reserved"),
//				Description: pulumi.String("Reserved example VLAN"),
//				TenantId:    pulumi.Any(exNetboxTenant.Id),
//				SiteId:      pulumi.Any(exNetboxSite.Id),
//				GroupId:     pulumi.Any(ex.Id),
//				Tags: pulumi.StringArray{
//					exNetboxTag.Name,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Vlan struct {
	pulumi.CustomResourceState

	// Defaults to `""`.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	GroupId     pulumi.IntPtrOutput    `pulumi:"groupId"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	RoleId      pulumi.IntPtrOutput    `pulumi:"roleId"`
	SiteId      pulumi.IntPtrOutput    `pulumi:"siteId"`
	// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
	Status   pulumi.StringPtrOutput   `pulumi:"status"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TenantId pulumi.IntPtrOutput      `pulumi:"tenantId"`
	Vid      pulumi.IntOutput         `pulumi:"vid"`
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOption) (*Vlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vid == nil {
		return nil, errors.New("invalid value for required argument 'Vid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vlan
	err := ctx.RegisterResource("netbox:ipam/vlan:Vlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanState, opts ...pulumi.ResourceOption) (*Vlan, error) {
	var resource Vlan
	err := ctx.ReadResource("netbox:ipam/vlan:Vlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vlan resources.
type vlanState struct {
	// Defaults to `""`.
	Description *string `pulumi:"description"`
	GroupId     *int    `pulumi:"groupId"`
	Name        *string `pulumi:"name"`
	RoleId      *int    `pulumi:"roleId"`
	SiteId      *int    `pulumi:"siteId"`
	// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TagsAlls []string `pulumi:"tagsAlls"`
	TenantId *int     `pulumi:"tenantId"`
	Vid      *int     `pulumi:"vid"`
}

type VlanState struct {
	// Defaults to `""`.
	Description pulumi.StringPtrInput
	GroupId     pulumi.IntPtrInput
	Name        pulumi.StringPtrInput
	RoleId      pulumi.IntPtrInput
	SiteId      pulumi.IntPtrInput
	// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TagsAlls pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	Vid      pulumi.IntPtrInput
}

func (VlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanState)(nil)).Elem()
}

type vlanArgs struct {
	// Defaults to `""`.
	Description *string `pulumi:"description"`
	GroupId     *int    `pulumi:"groupId"`
	Name        *string `pulumi:"name"`
	RoleId      *int    `pulumi:"roleId"`
	SiteId      *int    `pulumi:"siteId"`
	// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	Vid      int      `pulumi:"vid"`
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// Defaults to `""`.
	Description pulumi.StringPtrInput
	GroupId     pulumi.IntPtrInput
	Name        pulumi.StringPtrInput
	RoleId      pulumi.IntPtrInput
	SiteId      pulumi.IntPtrInput
	// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	Vid      pulumi.IntInput
}

func (VlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanArgs)(nil)).Elem()
}

type VlanInput interface {
	pulumi.Input

	ToVlanOutput() VlanOutput
	ToVlanOutputWithContext(ctx context.Context) VlanOutput
}

func (*Vlan) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (i *Vlan) ToVlanOutput() VlanOutput {
	return i.ToVlanOutputWithContext(context.Background())
}

func (i *Vlan) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanOutput)
}

// VlanArrayInput is an input type that accepts VlanArray and VlanArrayOutput values.
// You can construct a concrete instance of `VlanArrayInput` via:
//
//	VlanArray{ VlanArgs{...} }
type VlanArrayInput interface {
	pulumi.Input

	ToVlanArrayOutput() VlanArrayOutput
	ToVlanArrayOutputWithContext(context.Context) VlanArrayOutput
}

type VlanArray []VlanInput

func (VlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (i VlanArray) ToVlanArrayOutput() VlanArrayOutput {
	return i.ToVlanArrayOutputWithContext(context.Background())
}

func (i VlanArray) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanArrayOutput)
}

// VlanMapInput is an input type that accepts VlanMap and VlanMapOutput values.
// You can construct a concrete instance of `VlanMapInput` via:
//
//	VlanMap{ "key": VlanArgs{...} }
type VlanMapInput interface {
	pulumi.Input

	ToVlanMapOutput() VlanMapOutput
	ToVlanMapOutputWithContext(context.Context) VlanMapOutput
}

type VlanMap map[string]VlanInput

func (VlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (i VlanMap) ToVlanMapOutput() VlanMapOutput {
	return i.ToVlanMapOutputWithContext(context.Background())
}

func (i VlanMap) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMapOutput)
}

type VlanOutput struct{ *pulumi.OutputState }

func (VlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (o VlanOutput) ToVlanOutput() VlanOutput {
	return o
}

func (o VlanOutput) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return o
}

// Defaults to `""`.
func (o VlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VlanOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

func (o VlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VlanOutput) RoleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntPtrOutput { return v.RoleId }).(pulumi.IntPtrOutput)
}

func (o VlanOutput) SiteId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntPtrOutput { return v.SiteId }).(pulumi.IntPtrOutput)
}

// Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.
func (o VlanOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o VlanOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o VlanOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o VlanOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o VlanOutput) Vid() pulumi.IntOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntOutput { return v.Vid }).(pulumi.IntOutput)
}

type VlanArrayOutput struct{ *pulumi.OutputState }

func (VlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (o VlanArrayOutput) ToVlanArrayOutput() VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) Index(i pulumi.IntInput) VlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].([]*Vlan)[vs[1].(int)]
	}).(VlanOutput)
}

type VlanMapOutput struct{ *pulumi.OutputState }

func (VlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (o VlanMapOutput) ToVlanMapOutput() VlanMapOutput {
	return o
}

func (o VlanMapOutput) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return o
}

func (o VlanMapOutput) MapIndex(k pulumi.StringInput) VlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].(map[string]*Vlan)[vs[1].(string)]
	}).(VlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanInput)(nil)).Elem(), &Vlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanArrayInput)(nil)).Elem(), VlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanMapInput)(nil)).Elem(), VlanMap{})
	pulumi.RegisterOutputType(VlanOutput{})
	pulumi.RegisterOutputType(VlanArrayOutput{})
	pulumi.RegisterOutputType(VlanMapOutput{})
}
