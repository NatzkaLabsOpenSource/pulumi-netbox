// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Per [the docs](https://netbox.readthedocs.io/en/stable/models/ipam/ipaddress/):
//
// > An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.
// Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchya.
// >
// > Each IP address can also be assigned an operational status and a functional role. Statuses are hard-coded in NetBox and include the following:
// > * Active
// > * Reserved
// > * Deprecated
// > * DHCP
// > * SLAAC (IPv6 Stateless Address Autoconfiguration)
//
// This resource will retrieve the next available IP address from a given prefix or IP range (specified by ID)
//
// ## Example Usage
//
// ### Creating an IP in a prefix
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := ipam.LookupPrefix(ctx, &ipam.LookupPrefixArgs{
//				Cidr: pulumi.StringRef("10.0.0.0/24"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewAvailableIpAddress(ctx, "test", &ipam.AvailableIpAddressArgs{
//				PrefixId: pulumi.Int(test.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AvailableIpAddress struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrOutput    `pulumi:"deviceInterfaceId"`
	DnsName           pulumi.StringPtrOutput `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrOutput `pulumi:"interfaceId"`
	IpAddress   pulumi.StringOutput `pulumi:"ipAddress"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	IpRangeId pulumi.IntPtrOutput `pulumi:"ipRangeId"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrOutput `pulumi:"objectType"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	PrefixId pulumi.IntPtrOutput `pulumi:"prefixId"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
	Status   pulumi.StringPtrOutput   `pulumi:"status"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId pulumi.IntPtrOutput      `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrOutput `pulumi:"virtualMachineInterfaceId"`
	VrfId                     pulumi.IntPtrOutput `pulumi:"vrfId"`
}

// NewAvailableIpAddress registers a new resource with the given unique name, arguments, and options.
func NewAvailableIpAddress(ctx *pulumi.Context,
	name string, args *AvailableIpAddressArgs, opts ...pulumi.ResourceOption) (*AvailableIpAddress, error) {
	if args == nil {
		args = &AvailableIpAddressArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AvailableIpAddress
	err := ctx.RegisterResource("netbox:ipam/availableIpAddress:AvailableIpAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAvailableIpAddress gets an existing AvailableIpAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAvailableIpAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AvailableIpAddressState, opts ...pulumi.ResourceOption) (*AvailableIpAddress, error) {
	var resource AvailableIpAddress
	err := ctx.ReadResource("netbox:ipam/availableIpAddress:AvailableIpAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AvailableIpAddress resources.
type availableIpAddressState struct {
	Description *string `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int    `pulumi:"deviceInterfaceId"`
	DnsName           *string `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId *int    `pulumi:"interfaceId"`
	IpAddress   *string `pulumi:"ipAddress"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	IpRangeId *int `pulumi:"ipRangeId"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string `pulumi:"objectType"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	PrefixId *int `pulumi:"prefixId"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
	VrfId                     *int `pulumi:"vrfId"`
}

type AvailableIpAddressState struct {
	Description pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	DnsName           pulumi.StringPtrInput
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrInput
	IpAddress   pulumi.StringPtrInput
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	IpRangeId pulumi.IntPtrInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	PrefixId pulumi.IntPtrInput
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrInput
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
	VrfId                     pulumi.IntPtrInput
}

func (AvailableIpAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*availableIpAddressState)(nil)).Elem()
}

type availableIpAddressArgs struct {
	Description *string `pulumi:"description"`
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId *int    `pulumi:"deviceInterfaceId"`
	DnsName           *string `pulumi:"dnsName"`
	// Required when `objectType` is set.
	InterfaceId *int `pulumi:"interfaceId"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	IpRangeId *int `pulumi:"ipRangeId"`
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType *string `pulumi:"objectType"`
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	PrefixId *int `pulumi:"prefixId"`
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `pulumi:"role"`
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
	Status   *string  `pulumi:"status"`
	Tags     []string `pulumi:"tags"`
	TenantId *int     `pulumi:"tenantId"`
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
	VrfId                     *int `pulumi:"vrfId"`
}

// The set of arguments for constructing a AvailableIpAddress resource.
type AvailableIpAddressArgs struct {
	Description pulumi.StringPtrInput
	// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
	DeviceInterfaceId pulumi.IntPtrInput
	DnsName           pulumi.StringPtrInput
	// Required when `objectType` is set.
	InterfaceId pulumi.IntPtrInput
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	IpRangeId pulumi.IntPtrInput
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
	ObjectType pulumi.StringPtrInput
	// Exactly one of `prefixId` or `ipRangeId` must be given.
	PrefixId pulumi.IntPtrInput
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role pulumi.StringPtrInput
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
	Status   pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TenantId pulumi.IntPtrInput
	// Conflicts with `interfaceId` and `deviceInterfaceId`.
	VirtualMachineInterfaceId pulumi.IntPtrInput
	VrfId                     pulumi.IntPtrInput
}

func (AvailableIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*availableIpAddressArgs)(nil)).Elem()
}

type AvailableIpAddressInput interface {
	pulumi.Input

	ToAvailableIpAddressOutput() AvailableIpAddressOutput
	ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput
}

func (*AvailableIpAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailableIpAddress)(nil)).Elem()
}

func (i *AvailableIpAddress) ToAvailableIpAddressOutput() AvailableIpAddressOutput {
	return i.ToAvailableIpAddressOutputWithContext(context.Background())
}

func (i *AvailableIpAddress) ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressOutput)
}

// AvailableIpAddressArrayInput is an input type that accepts AvailableIpAddressArray and AvailableIpAddressArrayOutput values.
// You can construct a concrete instance of `AvailableIpAddressArrayInput` via:
//
//	AvailableIpAddressArray{ AvailableIpAddressArgs{...} }
type AvailableIpAddressArrayInput interface {
	pulumi.Input

	ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput
	ToAvailableIpAddressArrayOutputWithContext(context.Context) AvailableIpAddressArrayOutput
}

type AvailableIpAddressArray []AvailableIpAddressInput

func (AvailableIpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailableIpAddress)(nil)).Elem()
}

func (i AvailableIpAddressArray) ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput {
	return i.ToAvailableIpAddressArrayOutputWithContext(context.Background())
}

func (i AvailableIpAddressArray) ToAvailableIpAddressArrayOutputWithContext(ctx context.Context) AvailableIpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressArrayOutput)
}

// AvailableIpAddressMapInput is an input type that accepts AvailableIpAddressMap and AvailableIpAddressMapOutput values.
// You can construct a concrete instance of `AvailableIpAddressMapInput` via:
//
//	AvailableIpAddressMap{ "key": AvailableIpAddressArgs{...} }
type AvailableIpAddressMapInput interface {
	pulumi.Input

	ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput
	ToAvailableIpAddressMapOutputWithContext(context.Context) AvailableIpAddressMapOutput
}

type AvailableIpAddressMap map[string]AvailableIpAddressInput

func (AvailableIpAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailableIpAddress)(nil)).Elem()
}

func (i AvailableIpAddressMap) ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput {
	return i.ToAvailableIpAddressMapOutputWithContext(context.Background())
}

func (i AvailableIpAddressMap) ToAvailableIpAddressMapOutputWithContext(ctx context.Context) AvailableIpAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableIpAddressMapOutput)
}

type AvailableIpAddressOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressOutput) ToAvailableIpAddressOutput() AvailableIpAddressOutput {
	return o
}

func (o AvailableIpAddressOutput) ToAvailableIpAddressOutputWithContext(ctx context.Context) AvailableIpAddressOutput {
	return o
}

func (o AvailableIpAddressOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
func (o AvailableIpAddressOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) DnsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.DnsName }).(pulumi.StringPtrOutput)
}

// Required when `objectType` is set.
func (o AvailableIpAddressOutput) InterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.InterfaceId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Exactly one of `prefixId` or `ipRangeId` must be given.
func (o AvailableIpAddressOutput) IpRangeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.IpRangeId }).(pulumi.IntPtrOutput)
}

// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
func (o AvailableIpAddressOutput) ObjectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.ObjectType }).(pulumi.StringPtrOutput)
}

// Exactly one of `prefixId` or `ipRangeId` must be given.
func (o AvailableIpAddressOutput) PrefixId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.PrefixId }).(pulumi.IntPtrOutput)
}

// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
func (o AvailableIpAddressOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
func (o AvailableIpAddressOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

func (o AvailableIpAddressOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o AvailableIpAddressOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

// Conflicts with `interfaceId` and `deviceInterfaceId`.
func (o AvailableIpAddressOutput) VirtualMachineInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.VirtualMachineInterfaceId }).(pulumi.IntPtrOutput)
}

func (o AvailableIpAddressOutput) VrfId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailableIpAddress) pulumi.IntPtrOutput { return v.VrfId }).(pulumi.IntPtrOutput)
}

type AvailableIpAddressArrayOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressArrayOutput) ToAvailableIpAddressArrayOutput() AvailableIpAddressArrayOutput {
	return o
}

func (o AvailableIpAddressArrayOutput) ToAvailableIpAddressArrayOutputWithContext(ctx context.Context) AvailableIpAddressArrayOutput {
	return o
}

func (o AvailableIpAddressArrayOutput) Index(i pulumi.IntInput) AvailableIpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AvailableIpAddress {
		return vs[0].([]*AvailableIpAddress)[vs[1].(int)]
	}).(AvailableIpAddressOutput)
}

type AvailableIpAddressMapOutput struct{ *pulumi.OutputState }

func (AvailableIpAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AvailableIpAddress)(nil)).Elem()
}

func (o AvailableIpAddressMapOutput) ToAvailableIpAddressMapOutput() AvailableIpAddressMapOutput {
	return o
}

func (o AvailableIpAddressMapOutput) ToAvailableIpAddressMapOutputWithContext(ctx context.Context) AvailableIpAddressMapOutput {
	return o
}

func (o AvailableIpAddressMapOutput) MapIndex(k pulumi.StringInput) AvailableIpAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AvailableIpAddress {
		return vs[0].(map[string]*AvailableIpAddress)[vs[1].(string)]
	}).(AvailableIpAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressInput)(nil)).Elem(), &AvailableIpAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressArrayInput)(nil)).Elem(), AvailableIpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableIpAddressMapInput)(nil)).Elem(), AvailableIpAddressMap{})
	pulumi.RegisterOutputType(AvailableIpAddressOutput{})
	pulumi.RegisterOutputType(AvailableIpAddressArrayOutput{})
	pulumi.RegisterOutputType(AvailableIpAddressMapOutput{})
}
