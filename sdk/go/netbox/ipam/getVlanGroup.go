// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ipam.LookupVlanGroup(ctx, &ipam.LookupVlanGroupArgs{
//				Name: pulumi.StringRef("example1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ipam.LookupVlanGroup(ctx, &ipam.LookupVlanGroupArgs{
//				Slug: pulumi.StringRef("example2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ipam.LookupVlanGroup(ctx, &ipam.LookupVlanGroupArgs{
//				Name:      pulumi.StringRef("example"),
//				ScopeType: pulumi.StringRef("dcim.site"),
//				ScopeId:   pulumi.IntRef(netbox_site.Example.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVlanGroup(ctx *pulumi.Context, args *LookupVlanGroupArgs, opts ...pulumi.InvokeOption) (*LookupVlanGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVlanGroupResult
	err := ctx.Invoke("netbox:ipam/getVlanGroup:getVlanGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVlanGroup.
type LookupVlanGroupArgs struct {
	// At least one of `name` or `slug` must be given.
	Name *string `pulumi:"name"`
	// Required when `scopeType` is set.
	ScopeId *int `pulumi:"scopeId"`
	// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.
	ScopeType *string `pulumi:"scopeType"`
	// At least one of `name` or `slug` must be given.
	Slug *string `pulumi:"slug"`
}

// A collection of values returned by getVlanGroup.
type LookupVlanGroupResult struct {
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	MaxVid int    `pulumi:"maxVid"`
	MinVid int    `pulumi:"minVid"`
	// At least one of `name` or `slug` must be given.
	Name string `pulumi:"name"`
	// Required when `scopeType` is set.
	ScopeId *int `pulumi:"scopeId"`
	// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.
	ScopeType *string `pulumi:"scopeType"`
	// At least one of `name` or `slug` must be given.
	Slug      string `pulumi:"slug"`
	VlanCount int    `pulumi:"vlanCount"`
}

func LookupVlanGroupOutput(ctx *pulumi.Context, args LookupVlanGroupOutputArgs, opts ...pulumi.InvokeOption) LookupVlanGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVlanGroupResult, error) {
			args := v.(LookupVlanGroupArgs)
			r, err := LookupVlanGroup(ctx, &args, opts...)
			var s LookupVlanGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVlanGroupResultOutput)
}

// A collection of arguments for invoking getVlanGroup.
type LookupVlanGroupOutputArgs struct {
	// At least one of `name` or `slug` must be given.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Required when `scopeType` is set.
	ScopeId pulumi.IntPtrInput `pulumi:"scopeId"`
	// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.
	ScopeType pulumi.StringPtrInput `pulumi:"scopeType"`
	// At least one of `name` or `slug` must be given.
	Slug pulumi.StringPtrInput `pulumi:"slug"`
}

func (LookupVlanGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanGroupArgs)(nil)).Elem()
}

// A collection of values returned by getVlanGroup.
type LookupVlanGroupResultOutput struct{ *pulumi.OutputState }

func (LookupVlanGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanGroupResult)(nil)).Elem()
}

func (o LookupVlanGroupResultOutput) ToLookupVlanGroupResultOutput() LookupVlanGroupResultOutput {
	return o
}

func (o LookupVlanGroupResultOutput) ToLookupVlanGroupResultOutputWithContext(ctx context.Context) LookupVlanGroupResultOutput {
	return o
}

func (o LookupVlanGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVlanGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVlanGroupResultOutput) MaxVid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) int { return v.MaxVid }).(pulumi.IntOutput)
}

func (o LookupVlanGroupResultOutput) MinVid() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) int { return v.MinVid }).(pulumi.IntOutput)
}

// At least one of `name` or `slug` must be given.
func (o LookupVlanGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Required when `scopeType` is set.
func (o LookupVlanGroupResultOutput) ScopeId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) *int { return v.ScopeId }).(pulumi.IntPtrOutput)
}

// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.
func (o LookupVlanGroupResultOutput) ScopeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) *string { return v.ScopeType }).(pulumi.StringPtrOutput)
}

// At least one of `name` or `slug` must be given.
func (o LookupVlanGroupResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) string { return v.Slug }).(pulumi.StringOutput)
}

func (o LookupVlanGroupResultOutput) VlanCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanGroupResult) int { return v.VlanCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVlanGroupResultOutput{})
}
