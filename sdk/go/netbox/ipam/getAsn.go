// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ipam.LookupAsn(ctx, &ipam.LookupAsnArgs{
//				Asn: pulumi.StringRef("1111"),
//				Tag: pulumi.StringRef("tag-1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ipam.LookupAsn(ctx, &ipam.LookupAsnArgs{
//				Tag:  pulumi.StringRef("tag-1"),
//				TagN: pulumi.StringRef("tag-2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupAsn(ctx *pulumi.Context, args *LookupAsnArgs, opts ...pulumi.InvokeOption) (*LookupAsnResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAsnResult
	err := ctx.Invoke("netbox:ipam/getAsn:getAsn", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAsn.
type LookupAsnArgs struct {
	// At least one of `asn` or `tag` must be given.
	Asn *string `pulumi:"asn"`
	// Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
	Tag *string `pulumi:"tag"`
	// Tag to exclude from the data source filter (must match the tag's slug).
	// Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
	// for more information on available lookup expressions.
	TagN *string `pulumi:"tagN"`
}

// A collection of values returned by getAsn.
type LookupAsnResult struct {
	// At least one of `asn` or `tag` must be given.
	Asn         *string `pulumi:"asn"`
	Description string  `pulumi:"description"`
	// The ID of this resource.
	Id int `pulumi:"id"`
	// Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
	Tag *string `pulumi:"tag"`
	// Tag to exclude from the data source filter (must match the tag's slug).
	// Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
	// for more information on available lookup expressions.
	TagN *string  `pulumi:"tagN"`
	Tags []string `pulumi:"tags"`
}

func LookupAsnOutput(ctx *pulumi.Context, args LookupAsnOutputArgs, opts ...pulumi.InvokeOption) LookupAsnResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAsnResultOutput, error) {
			args := v.(LookupAsnArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("netbox:ipam/getAsn:getAsn", args, LookupAsnResultOutput{}, options).(LookupAsnResultOutput), nil
		}).(LookupAsnResultOutput)
}

// A collection of arguments for invoking getAsn.
type LookupAsnOutputArgs struct {
	// At least one of `asn` or `tag` must be given.
	Asn pulumi.StringPtrInput `pulumi:"asn"`
	// Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// Tag to exclude from the data source filter (must match the tag's slug).
	// Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
	// for more information on available lookup expressions.
	TagN pulumi.StringPtrInput `pulumi:"tagN"`
}

func (LookupAsnOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAsnArgs)(nil)).Elem()
}

// A collection of values returned by getAsn.
type LookupAsnResultOutput struct{ *pulumi.OutputState }

func (LookupAsnResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAsnResult)(nil)).Elem()
}

func (o LookupAsnResultOutput) ToLookupAsnResultOutput() LookupAsnResultOutput {
	return o
}

func (o LookupAsnResultOutput) ToLookupAsnResultOutputWithContext(ctx context.Context) LookupAsnResultOutput {
	return o
}

// At least one of `asn` or `tag` must be given.
func (o LookupAsnResultOutput) Asn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAsnResult) *string { return v.Asn }).(pulumi.StringPtrOutput)
}

func (o LookupAsnResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAsnResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupAsnResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAsnResult) int { return v.Id }).(pulumi.IntOutput)
}

// Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
func (o LookupAsnResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAsnResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// Tag to exclude from the data source filter (must match the tag's slug).
// Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
// for more information on available lookup expressions.
func (o LookupAsnResultOutput) TagN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAsnResult) *string { return v.TagN }).(pulumi.StringPtrOutput)
}

func (o LookupAsnResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAsnResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAsnResultOutput{})
}
