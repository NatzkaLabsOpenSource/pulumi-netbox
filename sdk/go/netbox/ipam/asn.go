// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ipam

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#asn):
// > ASN is short for Autonomous System Number. This identifier is used in the BGP protocol to identify which "autonomous system" a particular prefix is originating and transiting through.
// >
// > The AS number model within NetBox allows you to model some of this real-world relationship.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/ipam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := ipam.NewRir(ctx, "test", &ipam.RirArgs{
//				Name: pulumi.String("testrir"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ipam.NewAsn(ctx, "test", &ipam.AsnArgs{
//				Asn:         pulumi.Int(1337),
//				RirId:       test.ID(),
//				Description: pulumi.String("test"),
//				Comments:    pulumi.String("test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Asn struct {
	pulumi.CustomResourceState

	// Value for the AS Number record.
	Asn pulumi.IntOutput `pulumi:"asn"`
	// Comments field for the AS Number record.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Description field for the AS Number record.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID for the RIR for the AS Number record.
	RirId pulumi.IntOutput         `pulumi:"rirId"`
	Tags  pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewAsn registers a new resource with the given unique name, arguments, and options.
func NewAsn(ctx *pulumi.Context,
	name string, args *AsnArgs, opts ...pulumi.ResourceOption) (*Asn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asn == nil {
		return nil, errors.New("invalid value for required argument 'Asn'")
	}
	if args.RirId == nil {
		return nil, errors.New("invalid value for required argument 'RirId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Asn
	err := ctx.RegisterResource("netbox:ipam/asn:Asn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAsn gets an existing Asn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAsn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AsnState, opts ...pulumi.ResourceOption) (*Asn, error) {
	var resource Asn
	err := ctx.ReadResource("netbox:ipam/asn:Asn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Asn resources.
type asnState struct {
	// Value for the AS Number record.
	Asn *int `pulumi:"asn"`
	// Comments field for the AS Number record.
	Comments *string `pulumi:"comments"`
	// Description field for the AS Number record.
	Description *string `pulumi:"description"`
	// ID for the RIR for the AS Number record.
	RirId *int     `pulumi:"rirId"`
	Tags  []string `pulumi:"tags"`
}

type AsnState struct {
	// Value for the AS Number record.
	Asn pulumi.IntPtrInput
	// Comments field for the AS Number record.
	Comments pulumi.StringPtrInput
	// Description field for the AS Number record.
	Description pulumi.StringPtrInput
	// ID for the RIR for the AS Number record.
	RirId pulumi.IntPtrInput
	Tags  pulumi.StringArrayInput
}

func (AsnState) ElementType() reflect.Type {
	return reflect.TypeOf((*asnState)(nil)).Elem()
}

type asnArgs struct {
	// Value for the AS Number record.
	Asn int `pulumi:"asn"`
	// Comments field for the AS Number record.
	Comments *string `pulumi:"comments"`
	// Description field for the AS Number record.
	Description *string `pulumi:"description"`
	// ID for the RIR for the AS Number record.
	RirId int      `pulumi:"rirId"`
	Tags  []string `pulumi:"tags"`
}

// The set of arguments for constructing a Asn resource.
type AsnArgs struct {
	// Value for the AS Number record.
	Asn pulumi.IntInput
	// Comments field for the AS Number record.
	Comments pulumi.StringPtrInput
	// Description field for the AS Number record.
	Description pulumi.StringPtrInput
	// ID for the RIR for the AS Number record.
	RirId pulumi.IntInput
	Tags  pulumi.StringArrayInput
}

func (AsnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*asnArgs)(nil)).Elem()
}

type AsnInput interface {
	pulumi.Input

	ToAsnOutput() AsnOutput
	ToAsnOutputWithContext(ctx context.Context) AsnOutput
}

func (*Asn) ElementType() reflect.Type {
	return reflect.TypeOf((**Asn)(nil)).Elem()
}

func (i *Asn) ToAsnOutput() AsnOutput {
	return i.ToAsnOutputWithContext(context.Background())
}

func (i *Asn) ToAsnOutputWithContext(ctx context.Context) AsnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsnOutput)
}

// AsnArrayInput is an input type that accepts AsnArray and AsnArrayOutput values.
// You can construct a concrete instance of `AsnArrayInput` via:
//
//	AsnArray{ AsnArgs{...} }
type AsnArrayInput interface {
	pulumi.Input

	ToAsnArrayOutput() AsnArrayOutput
	ToAsnArrayOutputWithContext(context.Context) AsnArrayOutput
}

type AsnArray []AsnInput

func (AsnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asn)(nil)).Elem()
}

func (i AsnArray) ToAsnArrayOutput() AsnArrayOutput {
	return i.ToAsnArrayOutputWithContext(context.Background())
}

func (i AsnArray) ToAsnArrayOutputWithContext(ctx context.Context) AsnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsnArrayOutput)
}

// AsnMapInput is an input type that accepts AsnMap and AsnMapOutput values.
// You can construct a concrete instance of `AsnMapInput` via:
//
//	AsnMap{ "key": AsnArgs{...} }
type AsnMapInput interface {
	pulumi.Input

	ToAsnMapOutput() AsnMapOutput
	ToAsnMapOutputWithContext(context.Context) AsnMapOutput
}

type AsnMap map[string]AsnInput

func (AsnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asn)(nil)).Elem()
}

func (i AsnMap) ToAsnMapOutput() AsnMapOutput {
	return i.ToAsnMapOutputWithContext(context.Background())
}

func (i AsnMap) ToAsnMapOutputWithContext(ctx context.Context) AsnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsnMapOutput)
}

type AsnOutput struct{ *pulumi.OutputState }

func (AsnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Asn)(nil)).Elem()
}

func (o AsnOutput) ToAsnOutput() AsnOutput {
	return o
}

func (o AsnOutput) ToAsnOutputWithContext(ctx context.Context) AsnOutput {
	return o
}

// Value for the AS Number record.
func (o AsnOutput) Asn() pulumi.IntOutput {
	return o.ApplyT(func(v *Asn) pulumi.IntOutput { return v.Asn }).(pulumi.IntOutput)
}

// Comments field for the AS Number record.
func (o AsnOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asn) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Description field for the AS Number record.
func (o AsnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Asn) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ID for the RIR for the AS Number record.
func (o AsnOutput) RirId() pulumi.IntOutput {
	return o.ApplyT(func(v *Asn) pulumi.IntOutput { return v.RirId }).(pulumi.IntOutput)
}

func (o AsnOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Asn) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type AsnArrayOutput struct{ *pulumi.OutputState }

func (AsnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Asn)(nil)).Elem()
}

func (o AsnArrayOutput) ToAsnArrayOutput() AsnArrayOutput {
	return o
}

func (o AsnArrayOutput) ToAsnArrayOutputWithContext(ctx context.Context) AsnArrayOutput {
	return o
}

func (o AsnArrayOutput) Index(i pulumi.IntInput) AsnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Asn {
		return vs[0].([]*Asn)[vs[1].(int)]
	}).(AsnOutput)
}

type AsnMapOutput struct{ *pulumi.OutputState }

func (AsnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Asn)(nil)).Elem()
}

func (o AsnMapOutput) ToAsnMapOutput() AsnMapOutput {
	return o
}

func (o AsnMapOutput) ToAsnMapOutputWithContext(ctx context.Context) AsnMapOutput {
	return o
}

func (o AsnMapOutput) MapIndex(k pulumi.StringInput) AsnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Asn {
		return vs[0].(map[string]*Asn)[vs[1].(string)]
	}).(AsnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AsnInput)(nil)).Elem(), &Asn{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsnArrayInput)(nil)).Elem(), AsnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AsnMapInput)(nil)).Elem(), AsnMap{})
	pulumi.RegisterOutputType(AsnOutput{})
	pulumi.RegisterOutputType(AsnArrayOutput{})
	pulumi.RegisterOutputType(AsnMapOutput{})
}
