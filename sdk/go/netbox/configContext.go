// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configcontext/):
//
// > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"testkey": "testval",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = netbox.NewConfigContext(ctx, "test", &netbox.ConfigContextArgs{
//				Name: pulumi.String("%s"),
//				Data: pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigContext struct {
	pulumi.CustomResourceState

	ClusterGroups pulumi.IntArrayOutput    `pulumi:"clusterGroups"`
	ClusterTypes  pulumi.IntArrayOutput    `pulumi:"clusterTypes"`
	Clusters      pulumi.IntArrayOutput    `pulumi:"clusters"`
	Data          pulumi.StringOutput      `pulumi:"data"`
	Description   pulumi.StringPtrOutput   `pulumi:"description"`
	DeviceTypes   pulumi.IntArrayOutput    `pulumi:"deviceTypes"`
	Locations     pulumi.IntArrayOutput    `pulumi:"locations"`
	Name          pulumi.StringOutput      `pulumi:"name"`
	Platforms     pulumi.IntArrayOutput    `pulumi:"platforms"`
	Regions       pulumi.IntArrayOutput    `pulumi:"regions"`
	Roles         pulumi.IntArrayOutput    `pulumi:"roles"`
	SiteGroups    pulumi.IntArrayOutput    `pulumi:"siteGroups"`
	Sites         pulumi.IntArrayOutput    `pulumi:"sites"`
	Tags          pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls      pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TenantGroups  pulumi.IntArrayOutput    `pulumi:"tenantGroups"`
	Tenants       pulumi.IntArrayOutput    `pulumi:"tenants"`
	// Defaults to `1000`.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewConfigContext registers a new resource with the given unique name, arguments, and options.
func NewConfigContext(ctx *pulumi.Context,
	name string, args *ConfigContextArgs, opts ...pulumi.ResourceOption) (*ConfigContext, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Data == nil {
		return nil, errors.New("invalid value for required argument 'Data'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigContext
	err := ctx.RegisterResource("netbox:index/configContext:ConfigContext", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigContext gets an existing ConfigContext resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigContext(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigContextState, opts ...pulumi.ResourceOption) (*ConfigContext, error) {
	var resource ConfigContext
	err := ctx.ReadResource("netbox:index/configContext:ConfigContext", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigContext resources.
type configContextState struct {
	ClusterGroups []int    `pulumi:"clusterGroups"`
	ClusterTypes  []int    `pulumi:"clusterTypes"`
	Clusters      []int    `pulumi:"clusters"`
	Data          *string  `pulumi:"data"`
	Description   *string  `pulumi:"description"`
	DeviceTypes   []int    `pulumi:"deviceTypes"`
	Locations     []int    `pulumi:"locations"`
	Name          *string  `pulumi:"name"`
	Platforms     []int    `pulumi:"platforms"`
	Regions       []int    `pulumi:"regions"`
	Roles         []int    `pulumi:"roles"`
	SiteGroups    []int    `pulumi:"siteGroups"`
	Sites         []int    `pulumi:"sites"`
	Tags          []string `pulumi:"tags"`
	TagsAlls      []string `pulumi:"tagsAlls"`
	TenantGroups  []int    `pulumi:"tenantGroups"`
	Tenants       []int    `pulumi:"tenants"`
	// Defaults to `1000`.
	Weight *int `pulumi:"weight"`
}

type ConfigContextState struct {
	ClusterGroups pulumi.IntArrayInput
	ClusterTypes  pulumi.IntArrayInput
	Clusters      pulumi.IntArrayInput
	Data          pulumi.StringPtrInput
	Description   pulumi.StringPtrInput
	DeviceTypes   pulumi.IntArrayInput
	Locations     pulumi.IntArrayInput
	Name          pulumi.StringPtrInput
	Platforms     pulumi.IntArrayInput
	Regions       pulumi.IntArrayInput
	Roles         pulumi.IntArrayInput
	SiteGroups    pulumi.IntArrayInput
	Sites         pulumi.IntArrayInput
	Tags          pulumi.StringArrayInput
	TagsAlls      pulumi.StringArrayInput
	TenantGroups  pulumi.IntArrayInput
	Tenants       pulumi.IntArrayInput
	// Defaults to `1000`.
	Weight pulumi.IntPtrInput
}

func (ConfigContextState) ElementType() reflect.Type {
	return reflect.TypeOf((*configContextState)(nil)).Elem()
}

type configContextArgs struct {
	ClusterGroups []int    `pulumi:"clusterGroups"`
	ClusterTypes  []int    `pulumi:"clusterTypes"`
	Clusters      []int    `pulumi:"clusters"`
	Data          string   `pulumi:"data"`
	Description   *string  `pulumi:"description"`
	DeviceTypes   []int    `pulumi:"deviceTypes"`
	Locations     []int    `pulumi:"locations"`
	Name          *string  `pulumi:"name"`
	Platforms     []int    `pulumi:"platforms"`
	Regions       []int    `pulumi:"regions"`
	Roles         []int    `pulumi:"roles"`
	SiteGroups    []int    `pulumi:"siteGroups"`
	Sites         []int    `pulumi:"sites"`
	Tags          []string `pulumi:"tags"`
	TenantGroups  []int    `pulumi:"tenantGroups"`
	Tenants       []int    `pulumi:"tenants"`
	// Defaults to `1000`.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a ConfigContext resource.
type ConfigContextArgs struct {
	ClusterGroups pulumi.IntArrayInput
	ClusterTypes  pulumi.IntArrayInput
	Clusters      pulumi.IntArrayInput
	Data          pulumi.StringInput
	Description   pulumi.StringPtrInput
	DeviceTypes   pulumi.IntArrayInput
	Locations     pulumi.IntArrayInput
	Name          pulumi.StringPtrInput
	Platforms     pulumi.IntArrayInput
	Regions       pulumi.IntArrayInput
	Roles         pulumi.IntArrayInput
	SiteGroups    pulumi.IntArrayInput
	Sites         pulumi.IntArrayInput
	Tags          pulumi.StringArrayInput
	TenantGroups  pulumi.IntArrayInput
	Tenants       pulumi.IntArrayInput
	// Defaults to `1000`.
	Weight pulumi.IntPtrInput
}

func (ConfigContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configContextArgs)(nil)).Elem()
}

type ConfigContextInput interface {
	pulumi.Input

	ToConfigContextOutput() ConfigContextOutput
	ToConfigContextOutputWithContext(ctx context.Context) ConfigContextOutput
}

func (*ConfigContext) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigContext)(nil)).Elem()
}

func (i *ConfigContext) ToConfigContextOutput() ConfigContextOutput {
	return i.ToConfigContextOutputWithContext(context.Background())
}

func (i *ConfigContext) ToConfigContextOutputWithContext(ctx context.Context) ConfigContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigContextOutput)
}

// ConfigContextArrayInput is an input type that accepts ConfigContextArray and ConfigContextArrayOutput values.
// You can construct a concrete instance of `ConfigContextArrayInput` via:
//
//	ConfigContextArray{ ConfigContextArgs{...} }
type ConfigContextArrayInput interface {
	pulumi.Input

	ToConfigContextArrayOutput() ConfigContextArrayOutput
	ToConfigContextArrayOutputWithContext(context.Context) ConfigContextArrayOutput
}

type ConfigContextArray []ConfigContextInput

func (ConfigContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigContext)(nil)).Elem()
}

func (i ConfigContextArray) ToConfigContextArrayOutput() ConfigContextArrayOutput {
	return i.ToConfigContextArrayOutputWithContext(context.Background())
}

func (i ConfigContextArray) ToConfigContextArrayOutputWithContext(ctx context.Context) ConfigContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigContextArrayOutput)
}

// ConfigContextMapInput is an input type that accepts ConfigContextMap and ConfigContextMapOutput values.
// You can construct a concrete instance of `ConfigContextMapInput` via:
//
//	ConfigContextMap{ "key": ConfigContextArgs{...} }
type ConfigContextMapInput interface {
	pulumi.Input

	ToConfigContextMapOutput() ConfigContextMapOutput
	ToConfigContextMapOutputWithContext(context.Context) ConfigContextMapOutput
}

type ConfigContextMap map[string]ConfigContextInput

func (ConfigContextMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigContext)(nil)).Elem()
}

func (i ConfigContextMap) ToConfigContextMapOutput() ConfigContextMapOutput {
	return i.ToConfigContextMapOutputWithContext(context.Background())
}

func (i ConfigContextMap) ToConfigContextMapOutputWithContext(ctx context.Context) ConfigContextMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigContextMapOutput)
}

type ConfigContextOutput struct{ *pulumi.OutputState }

func (ConfigContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigContext)(nil)).Elem()
}

func (o ConfigContextOutput) ToConfigContextOutput() ConfigContextOutput {
	return o
}

func (o ConfigContextOutput) ToConfigContextOutputWithContext(ctx context.Context) ConfigContextOutput {
	return o
}

func (o ConfigContextOutput) ClusterGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.ClusterGroups }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) ClusterTypes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.ClusterTypes }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Clusters() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Clusters }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.StringOutput { return v.Data }).(pulumi.StringOutput)
}

func (o ConfigContextOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ConfigContextOutput) DeviceTypes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.DeviceTypes }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Locations() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Locations }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConfigContextOutput) Platforms() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Platforms }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Regions() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Regions }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Roles() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Roles }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) SiteGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.SiteGroups }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Sites() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Sites }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o ConfigContextOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o ConfigContextOutput) TenantGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.TenantGroups }).(pulumi.IntArrayOutput)
}

func (o ConfigContextOutput) Tenants() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntArrayOutput { return v.Tenants }).(pulumi.IntArrayOutput)
}

// Defaults to `1000`.
func (o ConfigContextOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigContext) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type ConfigContextArrayOutput struct{ *pulumi.OutputState }

func (ConfigContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigContext)(nil)).Elem()
}

func (o ConfigContextArrayOutput) ToConfigContextArrayOutput() ConfigContextArrayOutput {
	return o
}

func (o ConfigContextArrayOutput) ToConfigContextArrayOutputWithContext(ctx context.Context) ConfigContextArrayOutput {
	return o
}

func (o ConfigContextArrayOutput) Index(i pulumi.IntInput) ConfigContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigContext {
		return vs[0].([]*ConfigContext)[vs[1].(int)]
	}).(ConfigContextOutput)
}

type ConfigContextMapOutput struct{ *pulumi.OutputState }

func (ConfigContextMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigContext)(nil)).Elem()
}

func (o ConfigContextMapOutput) ToConfigContextMapOutput() ConfigContextMapOutput {
	return o
}

func (o ConfigContextMapOutput) ToConfigContextMapOutputWithContext(ctx context.Context) ConfigContextMapOutput {
	return o
}

func (o ConfigContextMapOutput) MapIndex(k pulumi.StringInput) ConfigContextOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigContext {
		return vs[0].(map[string]*ConfigContext)[vs[1].(string)]
	}).(ConfigContextOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigContextInput)(nil)).Elem(), &ConfigContext{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigContextArrayInput)(nil)).Elem(), ConfigContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigContextMapInput)(nil)).Elem(), ConfigContextMap{})
	pulumi.RegisterOutputType(ConfigContextOutput{})
	pulumi.RegisterOutputType(ConfigContextArrayOutput{})
	pulumi.RegisterOutputType(ConfigContextMapOutput{})
}
