// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Filter by name
//			_, err := netbox.GetVirtualDisk(ctx, &netbox.GetVirtualDiskArgs{
//				Filters: []netbox.GetVirtualDiskFilter{
//					{
//						Name:  "name",
//						Value: "disk1",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Filter by tag
//			_, err = netbox.GetVirtualDisk(ctx, &netbox.GetVirtualDiskArgs{
//				Filters: []netbox.GetVirtualDiskFilter{
//					{
//						Name:  "tag",
//						Value: "production",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Multiple filters
//			_, err = netbox.GetVirtualDisk(ctx, &netbox.GetVirtualDiskArgs{
//				Filters: []netbox.GetVirtualDiskFilter{
//					{
//						Name:  "name",
//						Value: "disk1",
//					},
//					{
//						Name:  "tag",
//						Value: "production",
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Filter with name regex
//			_, err = netbox.GetVirtualDisk(ctx, &netbox.GetVirtualDiskArgs{
//				NameRegex: pulumi.StringRef("^disk[0-9]+"),
//				Limit:     pulumi.IntRef(10),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVirtualDisk(ctx *pulumi.Context, args *GetVirtualDiskArgs, opts ...pulumi.InvokeOption) (*GetVirtualDiskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVirtualDiskResult
	err := ctx.Invoke("netbox:index/getVirtualDisk:getVirtualDisk", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVirtualDisk.
type GetVirtualDiskArgs struct {
	Filters   []GetVirtualDiskFilter `pulumi:"filters"`
	Limit     *int                   `pulumi:"limit"`
	NameRegex *string                `pulumi:"nameRegex"`
}

// A collection of values returned by getVirtualDisk.
type GetVirtualDiskResult struct {
	Filters []GetVirtualDiskFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id           string                      `pulumi:"id"`
	Limit        *int                        `pulumi:"limit"`
	NameRegex    *string                     `pulumi:"nameRegex"`
	VirtualDisks []GetVirtualDiskVirtualDisk `pulumi:"virtualDisks"`
}

func GetVirtualDiskOutput(ctx *pulumi.Context, args GetVirtualDiskOutputArgs, opts ...pulumi.InvokeOption) GetVirtualDiskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVirtualDiskResultOutput, error) {
			args := v.(GetVirtualDiskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("netbox:index/getVirtualDisk:getVirtualDisk", args, GetVirtualDiskResultOutput{}, options).(GetVirtualDiskResultOutput), nil
		}).(GetVirtualDiskResultOutput)
}

// A collection of arguments for invoking getVirtualDisk.
type GetVirtualDiskOutputArgs struct {
	Filters   GetVirtualDiskFilterArrayInput `pulumi:"filters"`
	Limit     pulumi.IntPtrInput             `pulumi:"limit"`
	NameRegex pulumi.StringPtrInput          `pulumi:"nameRegex"`
}

func (GetVirtualDiskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualDiskArgs)(nil)).Elem()
}

// A collection of values returned by getVirtualDisk.
type GetVirtualDiskResultOutput struct{ *pulumi.OutputState }

func (GetVirtualDiskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVirtualDiskResult)(nil)).Elem()
}

func (o GetVirtualDiskResultOutput) ToGetVirtualDiskResultOutput() GetVirtualDiskResultOutput {
	return o
}

func (o GetVirtualDiskResultOutput) ToGetVirtualDiskResultOutputWithContext(ctx context.Context) GetVirtualDiskResultOutput {
	return o
}

func (o GetVirtualDiskResultOutput) Filters() GetVirtualDiskFilterArrayOutput {
	return o.ApplyT(func(v GetVirtualDiskResult) []GetVirtualDiskFilter { return v.Filters }).(GetVirtualDiskFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVirtualDiskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVirtualDiskResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVirtualDiskResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetVirtualDiskResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o GetVirtualDiskResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVirtualDiskResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetVirtualDiskResultOutput) VirtualDisks() GetVirtualDiskVirtualDiskArrayOutput {
	return o.ApplyT(func(v GetVirtualDiskResult) []GetVirtualDiskVirtualDisk { return v.VirtualDisks }).(GetVirtualDiskVirtualDiskArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVirtualDiskResultOutput{})
}
