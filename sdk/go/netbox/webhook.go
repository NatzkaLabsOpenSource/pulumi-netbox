// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/integrations/webhooks/):
//
// > A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := netbox.NewWebhook(ctx, "test", &netbox.WebhookArgs{
//				Bodytemplate: pulumi.String("Sample body"),
//				ContentTypes: pulumi.StringArray{
//					pulumi.String("dcim.site"),
//				},
//				Enabled:         pulumi.Bool(true),
//				PayloadUrl:      pulumi.String("https://example.com/webhook"),
//				TriggerOnCreate: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Webhook struct {
	pulumi.CustomResourceState

	BodyTemplate pulumi.StringPtrOutput   `pulumi:"bodyTemplate"`
	ContentTypes pulumi.StringArrayOutput `pulumi:"contentTypes"`
	Enabled      pulumi.BoolPtrOutput     `pulumi:"enabled"`
	// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
	HttpContentType pulumi.StringPtrOutput `pulumi:"httpContentType"`
	// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
	HttpMethod      pulumi.StringPtrOutput `pulumi:"httpMethod"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	PayloadUrl      pulumi.StringOutput    `pulumi:"payloadUrl"`
	TriggerOnCreate pulumi.BoolPtrOutput   `pulumi:"triggerOnCreate"`
	TriggerOnDelete pulumi.BoolPtrOutput   `pulumi:"triggerOnDelete"`
	TriggerOnUpdate pulumi.BoolPtrOutput   `pulumi:"triggerOnUpdate"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentTypes == nil {
		return nil, errors.New("invalid value for required argument 'ContentTypes'")
	}
	if args.PayloadUrl == nil {
		return nil, errors.New("invalid value for required argument 'PayloadUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("netbox:index/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("netbox:index/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	BodyTemplate *string  `pulumi:"bodyTemplate"`
	ContentTypes []string `pulumi:"contentTypes"`
	Enabled      *bool    `pulumi:"enabled"`
	// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
	HttpContentType *string `pulumi:"httpContentType"`
	// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
	HttpMethod      *string `pulumi:"httpMethod"`
	Name            *string `pulumi:"name"`
	PayloadUrl      *string `pulumi:"payloadUrl"`
	TriggerOnCreate *bool   `pulumi:"triggerOnCreate"`
	TriggerOnDelete *bool   `pulumi:"triggerOnDelete"`
	TriggerOnUpdate *bool   `pulumi:"triggerOnUpdate"`
}

type WebhookState struct {
	BodyTemplate pulumi.StringPtrInput
	ContentTypes pulumi.StringArrayInput
	Enabled      pulumi.BoolPtrInput
	// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
	HttpContentType pulumi.StringPtrInput
	// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
	HttpMethod      pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	PayloadUrl      pulumi.StringPtrInput
	TriggerOnCreate pulumi.BoolPtrInput
	TriggerOnDelete pulumi.BoolPtrInput
	TriggerOnUpdate pulumi.BoolPtrInput
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	BodyTemplate *string  `pulumi:"bodyTemplate"`
	ContentTypes []string `pulumi:"contentTypes"`
	Enabled      *bool    `pulumi:"enabled"`
	// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
	HttpContentType *string `pulumi:"httpContentType"`
	// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
	HttpMethod      *string `pulumi:"httpMethod"`
	Name            *string `pulumi:"name"`
	PayloadUrl      string  `pulumi:"payloadUrl"`
	TriggerOnCreate *bool   `pulumi:"triggerOnCreate"`
	TriggerOnDelete *bool   `pulumi:"triggerOnDelete"`
	TriggerOnUpdate *bool   `pulumi:"triggerOnUpdate"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	BodyTemplate pulumi.StringPtrInput
	ContentTypes pulumi.StringArrayInput
	Enabled      pulumi.BoolPtrInput
	// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
	HttpContentType pulumi.StringPtrInput
	// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
	HttpMethod      pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	PayloadUrl      pulumi.StringInput
	TriggerOnCreate pulumi.BoolPtrInput
	TriggerOnDelete pulumi.BoolPtrInput
	TriggerOnUpdate pulumi.BoolPtrInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

// WebhookArrayInput is an input type that accepts WebhookArray and WebhookArrayOutput values.
// You can construct a concrete instance of `WebhookArrayInput` via:
//
//	WebhookArray{ WebhookArgs{...} }
type WebhookArrayInput interface {
	pulumi.Input

	ToWebhookArrayOutput() WebhookArrayOutput
	ToWebhookArrayOutputWithContext(context.Context) WebhookArrayOutput
}

type WebhookArray []WebhookInput

func (WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (i WebhookArray) ToWebhookArrayOutput() WebhookArrayOutput {
	return i.ToWebhookArrayOutputWithContext(context.Background())
}

func (i WebhookArray) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookArrayOutput)
}

// WebhookMapInput is an input type that accepts WebhookMap and WebhookMapOutput values.
// You can construct a concrete instance of `WebhookMapInput` via:
//
//	WebhookMap{ "key": WebhookArgs{...} }
type WebhookMapInput interface {
	pulumi.Input

	ToWebhookMapOutput() WebhookMapOutput
	ToWebhookMapOutputWithContext(context.Context) WebhookMapOutput
}

type WebhookMap map[string]WebhookInput

func (WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (i WebhookMap) ToWebhookMapOutput() WebhookMapOutput {
	return i.ToWebhookMapOutputWithContext(context.Background())
}

func (i WebhookMap) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookMapOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

func (o WebhookOutput) BodyTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.BodyTemplate }).(pulumi.StringPtrOutput)
}

func (o WebhookOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringArrayOutput { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

func (o WebhookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
func (o WebhookOutput) HttpContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.HttpContentType }).(pulumi.StringPtrOutput)
}

// Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
func (o WebhookOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringPtrOutput { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

func (o WebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WebhookOutput) PayloadUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Webhook) pulumi.StringOutput { return v.PayloadUrl }).(pulumi.StringOutput)
}

func (o WebhookOutput) TriggerOnCreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.TriggerOnCreate }).(pulumi.BoolPtrOutput)
}

func (o WebhookOutput) TriggerOnDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.TriggerOnDelete }).(pulumi.BoolPtrOutput)
}

func (o WebhookOutput) TriggerOnUpdate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Webhook) pulumi.BoolPtrOutput { return v.TriggerOnUpdate }).(pulumi.BoolPtrOutput)
}

type WebhookArrayOutput struct{ *pulumi.OutputState }

func (WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (o WebhookArrayOutput) ToWebhookArrayOutput() WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) Index(i pulumi.IntInput) WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].([]*Webhook)[vs[1].(int)]
	}).(WebhookOutput)
}

type WebhookMapOutput struct{ *pulumi.OutputState }

func (WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (o WebhookMapOutput) ToWebhookMapOutput() WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) MapIndex(k pulumi.StringInput) WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].(map[string]*Webhook)[vs[1].(string)]
	}).(WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookArrayInput)(nil)).Elem(), WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookMapInput)(nil)).Elem(), WebhookMap{})
	pulumi.RegisterOutputType(WebhookOutput{})
	pulumi.RegisterOutputType(WebhookArrayOutput{})
	pulumi.RegisterOutputType(WebhookMapOutput{})
}
