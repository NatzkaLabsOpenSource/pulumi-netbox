// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the netbox package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken pulumi.StringPtrOutput `pulumi:"apiToken"`
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl pulumi.StringPtrOutput `pulumi:"serverUrl"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:netbox", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
	// environment variable. Defaults to `false`.
	AllowInsecureHttps *bool `pulumi:"allowInsecureHttps"`
	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken *string `pulumi:"apiToken"`
	// Tags to add to every resource managed by this provider
	DefaultTags []string `pulumi:"defaultTags"`
	// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
	Headers map[string]string `pulumi:"headers"`
	// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl        *string `pulumi:"serverUrl"`
	SkipVersionCheck *bool   `pulumi:"skipVersionCheck"`
	// If true, strip trailing slashes from the `serverUrl` parameter and print a warning when doing so. Note that using
	// trailing slashes in the `serverUrl` parameter will usually lead to errors. Can be set via the
	// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
	StripTrailingSlashesFromUrl *bool `pulumi:"stripTrailingSlashesFromUrl"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
	// environment variable. Defaults to `false`.
	AllowInsecureHttps pulumi.BoolPtrInput
	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken pulumi.StringPtrInput
	// Tags to add to every resource managed by this provider
	DefaultTags pulumi.StringArrayInput
	// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
	Headers pulumi.StringMapInput
	// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
	RequestTimeout pulumi.IntPtrInput
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl        pulumi.StringPtrInput
	SkipVersionCheck pulumi.BoolPtrInput
	// If true, strip trailing slashes from the `serverUrl` parameter and print a warning when doing so. Note that using
	// trailing slashes in the `serverUrl` parameter will usually lead to errors. Can be set via the
	// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
	StripTrailingSlashesFromUrl pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:netbox/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
func (o ProviderOutput) ApiToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiToken }).(pulumi.StringPtrOutput)
}

// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
// environment variable.
func (o ProviderOutput) ServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ServerUrl }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
