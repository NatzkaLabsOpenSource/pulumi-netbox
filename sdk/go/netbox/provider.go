// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netbox

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the netbox package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken pulumi.StringOutput `pulumi:"apiToken"`
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl pulumi.StringOutput `pulumi:"serverUrl"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.ServerUrl == nil {
		return nil, errors.New("invalid value for required argument 'ServerUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:netbox", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
	// environment variable. Defaults to `false`.
	AllowInsecureHttps *bool `pulumi:"allowInsecureHttps"`
	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken string `pulumi:"apiToken"`
	// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
	Headers map[string]interface{} `pulumi:"headers"`
	// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl string `pulumi:"serverUrl"`
	// If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly
	// unsupported Netbox version. Also useful for local testing on terraform plans. Can be set via the
	// `NETBOX_SKIP_VERSION_CHECK` environment variable. Defaults to `false`.
	SkipVersionCheck *bool `pulumi:"skipVersionCheck"`
	// If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using
	// trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the
	// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
	StripTrailingSlashesFromUrl *bool `pulumi:"stripTrailingSlashesFromUrl"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
	// environment variable. Defaults to `false`.
	AllowInsecureHttps pulumi.BoolPtrInput
	// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
	ApiToken pulumi.StringInput
	// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
	Headers pulumi.MapInput
	// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
	RequestTimeout pulumi.IntPtrInput
	// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
	// environment variable.
	ServerUrl pulumi.StringInput
	// If true, do not try to determine the running Netbox version at provider startup. Disables warnings about possibly
	// unsupported Netbox version. Also useful for local testing on terraform plans. Can be set via the
	// `NETBOX_SKIP_VERSION_CHECK` environment variable. Defaults to `false`.
	SkipVersionCheck pulumi.BoolPtrInput
	// If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using
	// trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the
	// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
	StripTrailingSlashesFromUrl pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
func (o ProviderOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
// environment variable.
func (o ProviderOutput) ServerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.ServerUrl }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
