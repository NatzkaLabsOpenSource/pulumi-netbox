// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

var _ = internal.GetEnvOrDefault

// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
// environment variable. Defaults to `false`.
func GetAllowInsecureHttps(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "netbox:allowInsecureHttps")
}

// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
func GetApiToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "netbox:apiToken")
}

// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
func GetHeaders(ctx *pulumi.Context) string {
	return config.Get(ctx, "netbox:headers")
}

// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
func GetRequestTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "netbox:requestTimeout")
}

// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
// environment variable.
func GetServerUrl(ctx *pulumi.Context) string {
	return config.Get(ctx, "netbox:serverUrl")
}
func GetSkipVersionCheck(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "netbox:skipVersionCheck")
}

// If true, strip trailing slashes from the `serverUrl` parameter and print a warning when doing so. Note that using
// trailing slashes in the `serverUrl` parameter will usually lead to errors. Can be set via the
// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
func GetStripTrailingSlashesFromUrl(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "netbox:stripTrailingSlashesFromUrl")
}
