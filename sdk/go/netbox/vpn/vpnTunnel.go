// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):
//
// > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := vpn.NewVpnTunnelGroup(ctx, "test", &vpn.VpnTunnelGroupArgs{
//				Name: pulumi.String("my-tunnel-group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewVpnTunnel(ctx, "test", &vpn.VpnTunnelArgs{
//				Name:          pulumi.String("my-tunnel"),
//				Encapsulation: pulumi.String("ipsec-transport"),
//				Status:        pulumi.String("active"),
//				TunnelGroupId: test.ID(),
//				Description:   pulumi.String("This is a description."),
//				TunnelId:      pulumi.Int(3),
//				TenantId:      pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VpnTunnel struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
	Encapsulation pulumi.StringOutput `pulumi:"encapsulation"`
	Name          pulumi.StringOutput `pulumi:"name"`
	// Valid values are `planned`, `active` and `disabled`.
	Status        pulumi.StringOutput      `pulumi:"status"`
	Tags          pulumi.StringArrayOutput `pulumi:"tags"`
	TenantId      pulumi.IntPtrOutput      `pulumi:"tenantId"`
	TunnelGroupId pulumi.IntOutput         `pulumi:"tunnelGroupId"`
	TunnelId      pulumi.IntPtrOutput      `pulumi:"tunnelId"`
}

// NewVpnTunnel registers a new resource with the given unique name, arguments, and options.
func NewVpnTunnel(ctx *pulumi.Context,
	name string, args *VpnTunnelArgs, opts ...pulumi.ResourceOption) (*VpnTunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Encapsulation == nil {
		return nil, errors.New("invalid value for required argument 'Encapsulation'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.TunnelGroupId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnTunnel
	err := ctx.RegisterResource("netbox:vpn/vpnTunnel:VpnTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnTunnel gets an existing VpnTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnTunnelState, opts ...pulumi.ResourceOption) (*VpnTunnel, error) {
	var resource VpnTunnel
	err := ctx.ReadResource("netbox:vpn/vpnTunnel:VpnTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnTunnel resources.
type vpnTunnelState struct {
	Description *string `pulumi:"description"`
	// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
	Encapsulation *string `pulumi:"encapsulation"`
	Name          *string `pulumi:"name"`
	// Valid values are `planned`, `active` and `disabled`.
	Status        *string  `pulumi:"status"`
	Tags          []string `pulumi:"tags"`
	TenantId      *int     `pulumi:"tenantId"`
	TunnelGroupId *int     `pulumi:"tunnelGroupId"`
	TunnelId      *int     `pulumi:"tunnelId"`
}

type VpnTunnelState struct {
	Description pulumi.StringPtrInput
	// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
	Encapsulation pulumi.StringPtrInput
	Name          pulumi.StringPtrInput
	// Valid values are `planned`, `active` and `disabled`.
	Status        pulumi.StringPtrInput
	Tags          pulumi.StringArrayInput
	TenantId      pulumi.IntPtrInput
	TunnelGroupId pulumi.IntPtrInput
	TunnelId      pulumi.IntPtrInput
}

func (VpnTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnTunnelState)(nil)).Elem()
}

type vpnTunnelArgs struct {
	Description *string `pulumi:"description"`
	// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
	Encapsulation string  `pulumi:"encapsulation"`
	Name          *string `pulumi:"name"`
	// Valid values are `planned`, `active` and `disabled`.
	Status        string   `pulumi:"status"`
	Tags          []string `pulumi:"tags"`
	TenantId      *int     `pulumi:"tenantId"`
	TunnelGroupId int      `pulumi:"tunnelGroupId"`
	TunnelId      *int     `pulumi:"tunnelId"`
}

// The set of arguments for constructing a VpnTunnel resource.
type VpnTunnelArgs struct {
	Description pulumi.StringPtrInput
	// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
	Encapsulation pulumi.StringInput
	Name          pulumi.StringPtrInput
	// Valid values are `planned`, `active` and `disabled`.
	Status        pulumi.StringInput
	Tags          pulumi.StringArrayInput
	TenantId      pulumi.IntPtrInput
	TunnelGroupId pulumi.IntInput
	TunnelId      pulumi.IntPtrInput
}

func (VpnTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnTunnelArgs)(nil)).Elem()
}

type VpnTunnelInput interface {
	pulumi.Input

	ToVpnTunnelOutput() VpnTunnelOutput
	ToVpnTunnelOutputWithContext(ctx context.Context) VpnTunnelOutput
}

func (*VpnTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnel)(nil)).Elem()
}

func (i *VpnTunnel) ToVpnTunnelOutput() VpnTunnelOutput {
	return i.ToVpnTunnelOutputWithContext(context.Background())
}

func (i *VpnTunnel) ToVpnTunnelOutputWithContext(ctx context.Context) VpnTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelOutput)
}

// VpnTunnelArrayInput is an input type that accepts VpnTunnelArray and VpnTunnelArrayOutput values.
// You can construct a concrete instance of `VpnTunnelArrayInput` via:
//
//	VpnTunnelArray{ VpnTunnelArgs{...} }
type VpnTunnelArrayInput interface {
	pulumi.Input

	ToVpnTunnelArrayOutput() VpnTunnelArrayOutput
	ToVpnTunnelArrayOutputWithContext(context.Context) VpnTunnelArrayOutput
}

type VpnTunnelArray []VpnTunnelInput

func (VpnTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnTunnel)(nil)).Elem()
}

func (i VpnTunnelArray) ToVpnTunnelArrayOutput() VpnTunnelArrayOutput {
	return i.ToVpnTunnelArrayOutputWithContext(context.Background())
}

func (i VpnTunnelArray) ToVpnTunnelArrayOutputWithContext(ctx context.Context) VpnTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelArrayOutput)
}

// VpnTunnelMapInput is an input type that accepts VpnTunnelMap and VpnTunnelMapOutput values.
// You can construct a concrete instance of `VpnTunnelMapInput` via:
//
//	VpnTunnelMap{ "key": VpnTunnelArgs{...} }
type VpnTunnelMapInput interface {
	pulumi.Input

	ToVpnTunnelMapOutput() VpnTunnelMapOutput
	ToVpnTunnelMapOutputWithContext(context.Context) VpnTunnelMapOutput
}

type VpnTunnelMap map[string]VpnTunnelInput

func (VpnTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnTunnel)(nil)).Elem()
}

func (i VpnTunnelMap) ToVpnTunnelMapOutput() VpnTunnelMapOutput {
	return i.ToVpnTunnelMapOutputWithContext(context.Background())
}

func (i VpnTunnelMap) ToVpnTunnelMapOutputWithContext(ctx context.Context) VpnTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelMapOutput)
}

type VpnTunnelOutput struct{ *pulumi.OutputState }

func (VpnTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnel)(nil)).Elem()
}

func (o VpnTunnelOutput) ToVpnTunnelOutput() VpnTunnelOutput {
	return o
}

func (o VpnTunnelOutput) ToVpnTunnelOutputWithContext(ctx context.Context) VpnTunnelOutput {
	return o
}

func (o VpnTunnelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
func (o VpnTunnelOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.StringOutput { return v.Encapsulation }).(pulumi.StringOutput)
}

func (o VpnTunnelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Valid values are `planned`, `active` and `disabled`.
func (o VpnTunnelOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpnTunnelOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o VpnTunnelOutput) TenantId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.IntPtrOutput { return v.TenantId }).(pulumi.IntPtrOutput)
}

func (o VpnTunnelOutput) TunnelGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.IntOutput { return v.TunnelGroupId }).(pulumi.IntOutput)
}

func (o VpnTunnelOutput) TunnelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnTunnel) pulumi.IntPtrOutput { return v.TunnelId }).(pulumi.IntPtrOutput)
}

type VpnTunnelArrayOutput struct{ *pulumi.OutputState }

func (VpnTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnTunnel)(nil)).Elem()
}

func (o VpnTunnelArrayOutput) ToVpnTunnelArrayOutput() VpnTunnelArrayOutput {
	return o
}

func (o VpnTunnelArrayOutput) ToVpnTunnelArrayOutputWithContext(ctx context.Context) VpnTunnelArrayOutput {
	return o
}

func (o VpnTunnelArrayOutput) Index(i pulumi.IntInput) VpnTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnTunnel {
		return vs[0].([]*VpnTunnel)[vs[1].(int)]
	}).(VpnTunnelOutput)
}

type VpnTunnelMapOutput struct{ *pulumi.OutputState }

func (VpnTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnTunnel)(nil)).Elem()
}

func (o VpnTunnelMapOutput) ToVpnTunnelMapOutput() VpnTunnelMapOutput {
	return o
}

func (o VpnTunnelMapOutput) ToVpnTunnelMapOutputWithContext(ctx context.Context) VpnTunnelMapOutput {
	return o
}

func (o VpnTunnelMapOutput) MapIndex(k pulumi.StringInput) VpnTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnTunnel {
		return vs[0].(map[string]*VpnTunnel)[vs[1].(string)]
	}).(VpnTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelInput)(nil)).Elem(), &VpnTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelArrayInput)(nil)).Elem(), VpnTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelMapInput)(nil)).Elem(), VpnTunnelMap{})
	pulumi.RegisterOutputType(VpnTunnelOutput{})
	pulumi.RegisterOutputType(VpnTunnelArrayOutput{})
	pulumi.RegisterOutputType(VpnTunnelMapOutput{})
}
