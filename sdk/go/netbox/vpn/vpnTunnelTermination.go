// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):
//
// > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/NatzkaLabsOpenSource/pulumi-netbox/sdk/go/netbox/vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := vpn.NewVpnTunnelGroup(ctx, "test", &vpn.VpnTunnelGroupArgs{
//				Name:        pulumi.String("my-tunnel-group"),
//				Description: pulumi.String("description"),
//			})
//			if err != nil {
//				return err
//			}
//			testVpnTunnel, err := vpn.NewVpnTunnel(ctx, "test", &vpn.VpnTunnelArgs{
//				Name:          pulumi.String("my-tunnel"),
//				Encapsulation: pulumi.String("ipsec-transport"),
//				Status:        pulumi.String("active"),
//				TunnelGroupId: test.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewVpnTunnelTermination(ctx, "device", &vpn.VpnTunnelTerminationArgs{
//				Role:              pulumi.String("peer"),
//				TunnelId:          testVpnTunnel.ID(),
//				DeviceInterfaceId: pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewVpnTunnelTermination(ctx, "vm", &vpn.VpnTunnelTerminationArgs{
//				Role:                      pulumi.String("peer"),
//				TunnelId:                  testVpnTunnel.ID(),
//				VirtualMachineInterfaceId: pulumi.Int(234),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type VpnTunnelTermination struct {
	pulumi.CustomResourceState

	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	DeviceInterfaceId  pulumi.IntPtrOutput `pulumi:"deviceInterfaceId"`
	OutsideIpAddressId pulumi.IntPtrOutput `pulumi:"outsideIpAddressId"`
	// Valid values are `peer`, `hub` and `spoke`.
	Role     pulumi.StringOutput      `pulumi:"role"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	TagsAlls pulumi.StringArrayOutput `pulumi:"tagsAlls"`
	TunnelId pulumi.IntOutput         `pulumi:"tunnelId"`
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	VirtualMachineInterfaceId pulumi.IntPtrOutput `pulumi:"virtualMachineInterfaceId"`
}

// NewVpnTunnelTermination registers a new resource with the given unique name, arguments, and options.
func NewVpnTunnelTermination(ctx *pulumi.Context,
	name string, args *VpnTunnelTerminationArgs, opts ...pulumi.ResourceOption) (*VpnTunnelTermination, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnTunnelTermination
	err := ctx.RegisterResource("netbox:vpn/vpnTunnelTermination:VpnTunnelTermination", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnTunnelTermination gets an existing VpnTunnelTermination resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnTunnelTermination(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnTunnelTerminationState, opts ...pulumi.ResourceOption) (*VpnTunnelTermination, error) {
	var resource VpnTunnelTermination
	err := ctx.ReadResource("netbox:vpn/vpnTunnelTermination:VpnTunnelTermination", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnTunnelTermination resources.
type vpnTunnelTerminationState struct {
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	DeviceInterfaceId  *int `pulumi:"deviceInterfaceId"`
	OutsideIpAddressId *int `pulumi:"outsideIpAddressId"`
	// Valid values are `peer`, `hub` and `spoke`.
	Role     *string  `pulumi:"role"`
	Tags     []string `pulumi:"tags"`
	TagsAlls []string `pulumi:"tagsAlls"`
	TunnelId *int     `pulumi:"tunnelId"`
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
}

type VpnTunnelTerminationState struct {
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	DeviceInterfaceId  pulumi.IntPtrInput
	OutsideIpAddressId pulumi.IntPtrInput
	// Valid values are `peer`, `hub` and `spoke`.
	Role     pulumi.StringPtrInput
	Tags     pulumi.StringArrayInput
	TagsAlls pulumi.StringArrayInput
	TunnelId pulumi.IntPtrInput
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	VirtualMachineInterfaceId pulumi.IntPtrInput
}

func (VpnTunnelTerminationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnTunnelTerminationState)(nil)).Elem()
}

type vpnTunnelTerminationArgs struct {
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	DeviceInterfaceId  *int `pulumi:"deviceInterfaceId"`
	OutsideIpAddressId *int `pulumi:"outsideIpAddressId"`
	// Valid values are `peer`, `hub` and `spoke`.
	Role     string   `pulumi:"role"`
	Tags     []string `pulumi:"tags"`
	TunnelId int      `pulumi:"tunnelId"`
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	VirtualMachineInterfaceId *int `pulumi:"virtualMachineInterfaceId"`
}

// The set of arguments for constructing a VpnTunnelTermination resource.
type VpnTunnelTerminationArgs struct {
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	DeviceInterfaceId  pulumi.IntPtrInput
	OutsideIpAddressId pulumi.IntPtrInput
	// Valid values are `peer`, `hub` and `spoke`.
	Role     pulumi.StringInput
	Tags     pulumi.StringArrayInput
	TunnelId pulumi.IntInput
	// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
	VirtualMachineInterfaceId pulumi.IntPtrInput
}

func (VpnTunnelTerminationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnTunnelTerminationArgs)(nil)).Elem()
}

type VpnTunnelTerminationInput interface {
	pulumi.Input

	ToVpnTunnelTerminationOutput() VpnTunnelTerminationOutput
	ToVpnTunnelTerminationOutputWithContext(ctx context.Context) VpnTunnelTerminationOutput
}

func (*VpnTunnelTermination) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnelTermination)(nil)).Elem()
}

func (i *VpnTunnelTermination) ToVpnTunnelTerminationOutput() VpnTunnelTerminationOutput {
	return i.ToVpnTunnelTerminationOutputWithContext(context.Background())
}

func (i *VpnTunnelTermination) ToVpnTunnelTerminationOutputWithContext(ctx context.Context) VpnTunnelTerminationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelTerminationOutput)
}

// VpnTunnelTerminationArrayInput is an input type that accepts VpnTunnelTerminationArray and VpnTunnelTerminationArrayOutput values.
// You can construct a concrete instance of `VpnTunnelTerminationArrayInput` via:
//
//	VpnTunnelTerminationArray{ VpnTunnelTerminationArgs{...} }
type VpnTunnelTerminationArrayInput interface {
	pulumi.Input

	ToVpnTunnelTerminationArrayOutput() VpnTunnelTerminationArrayOutput
	ToVpnTunnelTerminationArrayOutputWithContext(context.Context) VpnTunnelTerminationArrayOutput
}

type VpnTunnelTerminationArray []VpnTunnelTerminationInput

func (VpnTunnelTerminationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnTunnelTermination)(nil)).Elem()
}

func (i VpnTunnelTerminationArray) ToVpnTunnelTerminationArrayOutput() VpnTunnelTerminationArrayOutput {
	return i.ToVpnTunnelTerminationArrayOutputWithContext(context.Background())
}

func (i VpnTunnelTerminationArray) ToVpnTunnelTerminationArrayOutputWithContext(ctx context.Context) VpnTunnelTerminationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelTerminationArrayOutput)
}

// VpnTunnelTerminationMapInput is an input type that accepts VpnTunnelTerminationMap and VpnTunnelTerminationMapOutput values.
// You can construct a concrete instance of `VpnTunnelTerminationMapInput` via:
//
//	VpnTunnelTerminationMap{ "key": VpnTunnelTerminationArgs{...} }
type VpnTunnelTerminationMapInput interface {
	pulumi.Input

	ToVpnTunnelTerminationMapOutput() VpnTunnelTerminationMapOutput
	ToVpnTunnelTerminationMapOutputWithContext(context.Context) VpnTunnelTerminationMapOutput
}

type VpnTunnelTerminationMap map[string]VpnTunnelTerminationInput

func (VpnTunnelTerminationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnTunnelTermination)(nil)).Elem()
}

func (i VpnTunnelTerminationMap) ToVpnTunnelTerminationMapOutput() VpnTunnelTerminationMapOutput {
	return i.ToVpnTunnelTerminationMapOutputWithContext(context.Background())
}

func (i VpnTunnelTerminationMap) ToVpnTunnelTerminationMapOutputWithContext(ctx context.Context) VpnTunnelTerminationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnTunnelTerminationMapOutput)
}

type VpnTunnelTerminationOutput struct{ *pulumi.OutputState }

func (VpnTunnelTerminationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnTunnelTermination)(nil)).Elem()
}

func (o VpnTunnelTerminationOutput) ToVpnTunnelTerminationOutput() VpnTunnelTerminationOutput {
	return o
}

func (o VpnTunnelTerminationOutput) ToVpnTunnelTerminationOutputWithContext(ctx context.Context) VpnTunnelTerminationOutput {
	return o
}

// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
func (o VpnTunnelTerminationOutput) DeviceInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.IntPtrOutput { return v.DeviceInterfaceId }).(pulumi.IntPtrOutput)
}

func (o VpnTunnelTerminationOutput) OutsideIpAddressId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.IntPtrOutput { return v.OutsideIpAddressId }).(pulumi.IntPtrOutput)
}

// Valid values are `peer`, `hub` and `spoke`.
func (o VpnTunnelTerminationOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o VpnTunnelTerminationOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

func (o VpnTunnelTerminationOutput) TagsAlls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.StringArrayOutput { return v.TagsAlls }).(pulumi.StringArrayOutput)
}

func (o VpnTunnelTerminationOutput) TunnelId() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.IntOutput { return v.TunnelId }).(pulumi.IntOutput)
}

// Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
func (o VpnTunnelTerminationOutput) VirtualMachineInterfaceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnTunnelTermination) pulumi.IntPtrOutput { return v.VirtualMachineInterfaceId }).(pulumi.IntPtrOutput)
}

type VpnTunnelTerminationArrayOutput struct{ *pulumi.OutputState }

func (VpnTunnelTerminationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnTunnelTermination)(nil)).Elem()
}

func (o VpnTunnelTerminationArrayOutput) ToVpnTunnelTerminationArrayOutput() VpnTunnelTerminationArrayOutput {
	return o
}

func (o VpnTunnelTerminationArrayOutput) ToVpnTunnelTerminationArrayOutputWithContext(ctx context.Context) VpnTunnelTerminationArrayOutput {
	return o
}

func (o VpnTunnelTerminationArrayOutput) Index(i pulumi.IntInput) VpnTunnelTerminationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnTunnelTermination {
		return vs[0].([]*VpnTunnelTermination)[vs[1].(int)]
	}).(VpnTunnelTerminationOutput)
}

type VpnTunnelTerminationMapOutput struct{ *pulumi.OutputState }

func (VpnTunnelTerminationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnTunnelTermination)(nil)).Elem()
}

func (o VpnTunnelTerminationMapOutput) ToVpnTunnelTerminationMapOutput() VpnTunnelTerminationMapOutput {
	return o
}

func (o VpnTunnelTerminationMapOutput) ToVpnTunnelTerminationMapOutputWithContext(ctx context.Context) VpnTunnelTerminationMapOutput {
	return o
}

func (o VpnTunnelTerminationMapOutput) MapIndex(k pulumi.StringInput) VpnTunnelTerminationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnTunnelTermination {
		return vs[0].(map[string]*VpnTunnelTermination)[vs[1].(string)]
	}).(VpnTunnelTerminationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelTerminationInput)(nil)).Elem(), &VpnTunnelTermination{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelTerminationArrayInput)(nil)).Elem(), VpnTunnelTerminationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnTunnelTerminationMapInput)(nil)).Elem(), VpnTunnelTerminationMap{})
	pulumi.RegisterOutputType(VpnTunnelTerminationOutput{})
	pulumi.RegisterOutputType(VpnTunnelTerminationArrayOutput{})
	pulumi.RegisterOutputType(VpnTunnelTerminationMapOutput{})
}
