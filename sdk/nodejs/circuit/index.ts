// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CircuitArgs, CircuitState } from "./circuit";
export type Circuit = import("./circuit").Circuit;
export const Circuit: typeof import("./circuit").Circuit = null as any;
utilities.lazyLoad(exports, ["Circuit"], () => require("./circuit"));

export { CircuitProviderArgs, CircuitProviderState } from "./circuitProvider";
export type CircuitProvider = import("./circuitProvider").CircuitProvider;
export const CircuitProvider: typeof import("./circuitProvider").CircuitProvider = null as any;
utilities.lazyLoad(exports, ["CircuitProvider"], () => require("./circuitProvider"));

export { CircuitTerminationArgs, CircuitTerminationState } from "./circuitTermination";
export type CircuitTermination = import("./circuitTermination").CircuitTermination;
export const CircuitTermination: typeof import("./circuitTermination").CircuitTermination = null as any;
utilities.lazyLoad(exports, ["CircuitTermination"], () => require("./circuitTermination"));

export { CircuitTypeArgs, CircuitTypeState } from "./circuitType";
export type CircuitType = import("./circuitType").CircuitType;
export const CircuitType: typeof import("./circuitType").CircuitType = null as any;
utilities.lazyLoad(exports, ["CircuitType"], () => require("./circuitType"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netbox:circuit/circuit:Circuit":
                return new Circuit(name, <any>undefined, { urn })
            case "netbox:circuit/circuitProvider:CircuitProvider":
                return new CircuitProvider(name, <any>undefined, { urn })
            case "netbox:circuit/circuitTermination:CircuitTermination":
                return new CircuitTermination(name, <any>undefined, { urn })
            case "netbox:circuit/circuitType:CircuitType":
                return new CircuitType(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netbox", "circuit/circuit", _module)
pulumi.runtime.registerResourceModule("netbox", "circuit/circuitProvider", _module)
pulumi.runtime.registerResourceModule("netbox", "circuit/circuitTermination", _module)
pulumi.runtime.registerResourceModule("netbox", "circuit/circuitType", _module)
