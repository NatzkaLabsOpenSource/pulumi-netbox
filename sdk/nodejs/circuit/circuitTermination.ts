// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-terminations):
 *
 * > The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.
 * > 
 * > Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.dcim.Site("test", {
 *     name: "%[1]s",
 *     status: "active",
 * });
 * const testCircuitProvider = new netbox.circuit.CircuitProvider("test", {name: "%[1]s"});
 * const testCircuitType = new netbox.circuit.CircuitType("test", {name: "%[1]s"});
 * const testCircuit = new netbox.circuit.Circuit("test", {
 *     cid: "%[1]s",
 *     status: "active",
 *     providerId: testCircuitProvider.id,
 *     typeId: testCircuitType.id,
 * });
 * const testCircuitTermination = new netbox.circuit.CircuitTermination("test", {
 *     circuitId: testCircuit.id,
 *     termSide: "A",
 *     siteId: test.id,
 *     portSpeed: 100000,
 *     upstreamSpeed: 50000,
 * });
 * ```
 */
export class CircuitTermination extends pulumi.CustomResource {
    /**
     * Get an existing CircuitTermination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CircuitTerminationState, opts?: pulumi.CustomResourceOptions): CircuitTermination {
        return new CircuitTermination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:circuit/circuitTermination:CircuitTermination';

    /**
     * Returns true if the given object is an instance of CircuitTermination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CircuitTermination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CircuitTermination.__pulumiType;
    }

    public readonly circuitId!: pulumi.Output<number>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly portSpeed!: pulumi.Output<number | undefined>;
    public readonly siteId!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Valid values are `A` and `Z`.
     */
    public readonly termSide!: pulumi.Output<string>;
    public readonly upstreamSpeed!: pulumi.Output<number | undefined>;

    /**
     * Create a CircuitTermination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CircuitTerminationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CircuitTerminationArgs | CircuitTerminationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CircuitTerminationState | undefined;
            resourceInputs["circuitId"] = state ? state.circuitId : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["portSpeed"] = state ? state.portSpeed : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["termSide"] = state ? state.termSide : undefined;
            resourceInputs["upstreamSpeed"] = state ? state.upstreamSpeed : undefined;
        } else {
            const args = argsOrState as CircuitTerminationArgs | undefined;
            if ((!args || args.circuitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'circuitId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            if ((!args || args.termSide === undefined) && !opts.urn) {
                throw new Error("Missing required property 'termSide'");
            }
            resourceInputs["circuitId"] = args ? args.circuitId : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["portSpeed"] = args ? args.portSpeed : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["termSide"] = args ? args.termSide : undefined;
            resourceInputs["upstreamSpeed"] = args ? args.upstreamSpeed : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CircuitTermination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CircuitTermination resources.
 */
export interface CircuitTerminationState {
    circuitId?: pulumi.Input<number>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    portSpeed?: pulumi.Input<number>;
    siteId?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Valid values are `A` and `Z`.
     */
    termSide?: pulumi.Input<string>;
    upstreamSpeed?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CircuitTermination resource.
 */
export interface CircuitTerminationArgs {
    circuitId: pulumi.Input<number>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    portSpeed?: pulumi.Input<number>;
    siteId: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Valid values are `A` and `Z`.
     */
    termSide: pulumi.Input<string>;
    upstreamSpeed?: pulumi.Input<number>;
}
