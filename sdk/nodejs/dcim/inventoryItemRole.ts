// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/inventoryitemrole/):
 *
 * > Inventory items can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for power supplies, fans, interface optics, etc.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Note that some terraform code is not included in the example for brevity
 * const test = new netbox.dcim.Device("test", {
 *     name: "%[1]s",
 *     deviceTypeId: testNetboxDeviceType.id,
 *     tenantId: testNetboxTenant.id,
 *     roleId: testNetboxDeviceRole.id,
 *     siteId: testNetboxSite.id,
 * });
 * const testInventoryItemRole = new netbox.dcim.InventoryItemRole("test", {
 *     name: "Role 1",
 *     slug: "role-1-slug",
 *     colorHex: "123456",
 * });
 * const parent = new netbox.dcim.InventoryItem("parent", {
 *     deviceId: test.id,
 *     name: "Inventory Item 1",
 *     roleId: testInventoryItemRole.id,
 * });
 * ```
 */
export class InventoryItemRole extends pulumi.CustomResource {
    /**
     * Get an existing InventoryItemRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InventoryItemRoleState, opts?: pulumi.CustomResourceOptions): InventoryItemRole {
        return new InventoryItemRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/inventoryItemRole:InventoryItemRole';

    /**
     * Returns true if the given object is an instance of InventoryItemRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InventoryItemRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InventoryItemRole.__pulumiType;
    }

    public readonly colorHex!: pulumi.Output<string>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly tagsAlls!: pulumi.Output<string[]>;

    /**
     * Create a InventoryItemRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InventoryItemRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InventoryItemRoleArgs | InventoryItemRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InventoryItemRoleState | undefined;
            resourceInputs["colorHex"] = state ? state.colorHex : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAlls"] = state ? state.tagsAlls : undefined;
        } else {
            const args = argsOrState as InventoryItemRoleArgs | undefined;
            if ((!args || args.colorHex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'colorHex'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["colorHex"] = args ? args.colorHex : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAlls"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InventoryItemRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InventoryItemRole resources.
 */
export interface InventoryItemRoleState {
    colorHex?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tagsAlls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a InventoryItemRole resource.
 */
export interface InventoryItemRoleArgs {
    colorHex: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    slug: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
