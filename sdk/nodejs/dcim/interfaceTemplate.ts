// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/interfacetemplate/):
 *
 * > A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.dcim.Manufacturer("test", {name: "my-manufacturer"});
 * const testDeviceType = new netbox.dcim.DeviceType("test", {
 *     model: "test-model",
 *     slug: "test-model",
 *     partNumber: "test-part-number",
 *     manufacturerId: test.id,
 * });
 * const testInterfaceTemplate = new netbox.dcim.InterfaceTemplate("test", {
 *     name: "eth0",
 *     description: "eth0 description",
 *     label: "eth0 label",
 *     deviceTypeId: testDeviceType.id,
 *     type: "100base-tx",
 *     mgmtOnly: true,
 * });
 * ```
 */
export class InterfaceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceTemplateState, opts?: pulumi.CustomResourceOptions): InterfaceTemplate {
        return new InterfaceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/interfaceTemplate:InterfaceTemplate';

    /**
     * Returns true if the given object is an instance of InterfaceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceTemplate.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    public readonly deviceTypeId!: pulumi.Output<number | undefined>;
    public readonly label!: pulumi.Output<string | undefined>;
    public readonly mgmtOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    public readonly moduleTypeId!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a InterfaceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceTemplateArgs | InterfaceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceTemplateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceTypeId"] = state ? state.deviceTypeId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["mgmtOnly"] = state ? state.mgmtOnly : undefined;
            resourceInputs["moduleTypeId"] = state ? state.moduleTypeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as InterfaceTemplateArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceTypeId"] = args ? args.deviceTypeId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["mgmtOnly"] = args ? args.mgmtOnly : undefined;
            resourceInputs["moduleTypeId"] = args ? args.moduleTypeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InterfaceTemplate resources.
 */
export interface InterfaceTemplateState {
    description?: pulumi.Input<string>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    deviceTypeId?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    mgmtOnly?: pulumi.Input<boolean>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    moduleTypeId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceTemplate resource.
 */
export interface InterfaceTemplateArgs {
    description?: pulumi.Input<string>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    deviceTypeId?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    mgmtOnly?: pulumi.Input<boolean>;
    /**
     * Exactly one of `deviceTypeId` or `moduleTypeId` must be given.
     */
    moduleTypeId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
