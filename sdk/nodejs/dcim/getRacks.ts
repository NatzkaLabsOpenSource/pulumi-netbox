// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getRacks(args?: GetRacksArgs, opts?: pulumi.InvokeOptions): Promise<GetRacksResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netbox:dcim/getRacks:getRacks", {
        "filters": args.filters,
        "limit": args.limit,
    }, opts);
}

/**
 * A collection of arguments for invoking getRacks.
 */
export interface GetRacksArgs {
    filters?: inputs.dcim.GetRacksFilter[];
    /**
     * Defaults to `0`.
     */
    limit?: number;
}

/**
 * A collection of values returned by getRacks.
 */
export interface GetRacksResult {
    readonly filters?: outputs.dcim.GetRacksFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Defaults to `0`.
     */
    readonly limit?: number;
    readonly racks: outputs.dcim.GetRacksRack[];
}
export function getRacksOutput(args?: GetRacksOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRacksResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("netbox:dcim/getRacks:getRacks", {
        "filters": args.filters,
        "limit": args.limit,
    }, opts);
}

/**
 * A collection of arguments for invoking getRacks.
 */
export interface GetRacksOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.dcim.GetRacksFilterArgs>[]>;
    /**
     * Defaults to `0`.
     */
    limit?: pulumi.Input<number>;
}
