// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/racktype/):
 *
 * > A rack type defines the physical characteristics of a particular model of rack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.dcim.Manufacturer("test", {name: "my-manufacturer"});
 * const testRackType = new netbox.dcim.RackType("test", {
 *     model: "mymodel",
 *     manufacturerId: test.id,
 *     width: 19,
 *     uHeight: 48,
 *     startingUnit: 1,
 *     formFactor: "2-post-frame",
 *     description: "My description",
 *     outerWidth: 10,
 *     outerDepth: 15,
 *     outerUnit: "mm",
 *     weight: 15,
 *     maxWeight: 20,
 *     weightUnit: "kg",
 *     mountingDepthMm: 21,
 *     comments: "My comments",
 * });
 * ```
 */
export class RackType extends pulumi.CustomResource {
    /**
     * Get an existing RackType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RackTypeState, opts?: pulumi.CustomResourceOptions): RackType {
        return new RackType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/rackType:RackType';

    /**
     * Returns true if the given object is an instance of RackType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RackType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RackType.__pulumiType;
    }

    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
     */
    public readonly formFactor!: pulumi.Output<string>;
    public readonly manufacturerId!: pulumi.Output<number | undefined>;
    public readonly maxWeight!: pulumi.Output<number | undefined>;
    public readonly model!: pulumi.Output<string>;
    public readonly mountingDepthMm!: pulumi.Output<number | undefined>;
    public readonly outerDepth!: pulumi.Output<number | undefined>;
    /**
     * Valid values are `mm` and `in`. Required when `outerWidth` and `outerDepth` is set.
     */
    public readonly outerUnit!: pulumi.Output<string | undefined>;
    public readonly outerWidth!: pulumi.Output<number | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly startingUnit!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly tagsAlls!: pulumi.Output<string[]>;
    public readonly uHeight!: pulumi.Output<number>;
    public readonly weight!: pulumi.Output<number | undefined>;
    /**
     * Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `maxWeight` is set.
     */
    public readonly weightUnit!: pulumi.Output<string | undefined>;
    /**
     * Valid values are `10`, `19`, `21` and `23`.
     */
    public readonly width!: pulumi.Output<number>;

    /**
     * Create a RackType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RackTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RackTypeArgs | RackTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RackTypeState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["formFactor"] = state ? state.formFactor : undefined;
            resourceInputs["manufacturerId"] = state ? state.manufacturerId : undefined;
            resourceInputs["maxWeight"] = state ? state.maxWeight : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["mountingDepthMm"] = state ? state.mountingDepthMm : undefined;
            resourceInputs["outerDepth"] = state ? state.outerDepth : undefined;
            resourceInputs["outerUnit"] = state ? state.outerUnit : undefined;
            resourceInputs["outerWidth"] = state ? state.outerWidth : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["startingUnit"] = state ? state.startingUnit : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAlls"] = state ? state.tagsAlls : undefined;
            resourceInputs["uHeight"] = state ? state.uHeight : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
            resourceInputs["weightUnit"] = state ? state.weightUnit : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as RackTypeArgs | undefined;
            if ((!args || args.formFactor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formFactor'");
            }
            if ((!args || args.model === undefined) && !opts.urn) {
                throw new Error("Missing required property 'model'");
            }
            if ((!args || args.startingUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startingUnit'");
            }
            if ((!args || args.uHeight === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uHeight'");
            }
            if ((!args || args.width === undefined) && !opts.urn) {
                throw new Error("Missing required property 'width'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["formFactor"] = args ? args.formFactor : undefined;
            resourceInputs["manufacturerId"] = args ? args.manufacturerId : undefined;
            resourceInputs["maxWeight"] = args ? args.maxWeight : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["mountingDepthMm"] = args ? args.mountingDepthMm : undefined;
            resourceInputs["outerDepth"] = args ? args.outerDepth : undefined;
            resourceInputs["outerUnit"] = args ? args.outerUnit : undefined;
            resourceInputs["outerWidth"] = args ? args.outerWidth : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["startingUnit"] = args ? args.startingUnit : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uHeight"] = args ? args.uHeight : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["weightUnit"] = args ? args.weightUnit : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
            resourceInputs["tagsAlls"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RackType.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RackType resources.
 */
export interface RackTypeState {
    comments?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
     */
    formFactor?: pulumi.Input<string>;
    manufacturerId?: pulumi.Input<number>;
    maxWeight?: pulumi.Input<number>;
    model?: pulumi.Input<string>;
    mountingDepthMm?: pulumi.Input<number>;
    outerDepth?: pulumi.Input<number>;
    /**
     * Valid values are `mm` and `in`. Required when `outerWidth` and `outerDepth` is set.
     */
    outerUnit?: pulumi.Input<string>;
    outerWidth?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    startingUnit?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tagsAlls?: pulumi.Input<pulumi.Input<string>[]>;
    uHeight?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    /**
     * Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `maxWeight` is set.
     */
    weightUnit?: pulumi.Input<string>;
    /**
     * Valid values are `10`, `19`, `21` and `23`.
     */
    width?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RackType resource.
 */
export interface RackTypeArgs {
    comments?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
     */
    formFactor: pulumi.Input<string>;
    manufacturerId?: pulumi.Input<number>;
    maxWeight?: pulumi.Input<number>;
    model: pulumi.Input<string>;
    mountingDepthMm?: pulumi.Input<number>;
    outerDepth?: pulumi.Input<number>;
    /**
     * Valid values are `mm` and `in`. Required when `outerWidth` and `outerDepth` is set.
     */
    outerUnit?: pulumi.Input<string>;
    outerWidth?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    startingUnit: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    uHeight: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    /**
     * Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `maxWeight` is set.
     */
    weightUnit?: pulumi.Input<string>;
    /**
     * Valid values are `10`, `19`, `21` and `23`.
     */
    width: pulumi.Input<number>;
}
