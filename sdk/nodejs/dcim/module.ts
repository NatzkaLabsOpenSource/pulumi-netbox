// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/module/):
 *
 * > A module is a field-replaceable hardware component installed within a device which houses its own child components. The most common example is a chassis-based router or switch.
 *
 * Similar to devices, modules are instantiated from module types, and any components associated with the module type are automatically instantiated on the new model. Each module must be installed within a module bay on a device, and each module bay may have only one module installed in it.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Note that some terraform code is not included in the example for brevity
 * const testDevice = new netbox.dcim.Device("testDevice", {
 *     deviceTypeId: netbox_device_type.test.id,
 *     roleId: netbox_device_role.test.id,
 *     siteId: netbox_site.test.id,
 * });
 * const testDeviceModuleBay = new netbox.dcim.DeviceModuleBay("testDeviceModuleBay", {deviceId: testDevice.id});
 * const testManufacturer = new netbox.dcim.Manufacturer("testManufacturer", {});
 * const testModuleType = new netbox.dcim.ModuleType("testModuleType", {
 *     manufacturerId: testManufacturer.id,
 *     model: "Networking",
 * });
 * const testModule = new netbox.dcim.Module("testModule", {
 *     deviceId: testDevice.id,
 *     moduleBayId: testDeviceModuleBay.id,
 *     moduleTypeId: testModuleType.id,
 *     status: "active",
 *     description: "SFP card",
 * });
 * ```
 */
export class Module extends pulumi.CustomResource {
    /**
     * Get an existing Module resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModuleState, opts?: pulumi.CustomResourceOptions): Module {
        return new Module(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/module:Module';

    /**
     * Returns true if the given object is an instance of Module.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Module {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Module.__pulumiType;
    }

    public readonly assetTag!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<number>;
    public readonly moduleBayId!: pulumi.Output<number>;
    public readonly moduleTypeId!: pulumi.Output<number>;
    public readonly serial!: pulumi.Output<string | undefined>;
    /**
     * One of [offline, active, planned, staged, failed, decommissioning].
     */
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Module resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModuleArgs | ModuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModuleState | undefined;
            resourceInputs["assetTag"] = state ? state.assetTag : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["moduleBayId"] = state ? state.moduleBayId : undefined;
            resourceInputs["moduleTypeId"] = state ? state.moduleTypeId : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ModuleArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.moduleBayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'moduleBayId'");
            }
            if ((!args || args.moduleTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'moduleTypeId'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            resourceInputs["assetTag"] = args ? args.assetTag : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["moduleBayId"] = args ? args.moduleBayId : undefined;
            resourceInputs["moduleTypeId"] = args ? args.moduleTypeId : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Module.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Module resources.
 */
export interface ModuleState {
    assetTag?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    moduleBayId?: pulumi.Input<number>;
    moduleTypeId?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    /**
     * One of [offline, active, planned, staged, failed, decommissioning].
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Module resource.
 */
export interface ModuleArgs {
    assetTag?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId: pulumi.Input<number>;
    moduleBayId: pulumi.Input<number>;
    moduleTypeId: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    /**
     * One of [offline, active, planned, staged, failed, decommissioning].
     */
    status: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
