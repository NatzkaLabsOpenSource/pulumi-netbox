// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CableArgs, CableState } from "./cable";
export type Cable = import("./cable").Cable;
export const Cable: typeof import("./cable").Cable = null as any;
utilities.lazyLoad(exports, ["Cable"], () => require("./cable"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceConsolePortArgs, DeviceConsolePortState } from "./deviceConsolePort";
export type DeviceConsolePort = import("./deviceConsolePort").DeviceConsolePort;
export const DeviceConsolePort: typeof import("./deviceConsolePort").DeviceConsolePort = null as any;
utilities.lazyLoad(exports, ["DeviceConsolePort"], () => require("./deviceConsolePort"));

export { DeviceConsoleServerPortArgs, DeviceConsoleServerPortState } from "./deviceConsoleServerPort";
export type DeviceConsoleServerPort = import("./deviceConsoleServerPort").DeviceConsoleServerPort;
export const DeviceConsoleServerPort: typeof import("./deviceConsoleServerPort").DeviceConsoleServerPort = null as any;
utilities.lazyLoad(exports, ["DeviceConsoleServerPort"], () => require("./deviceConsoleServerPort"));

export { DeviceFrontPortArgs, DeviceFrontPortState } from "./deviceFrontPort";
export type DeviceFrontPort = import("./deviceFrontPort").DeviceFrontPort;
export const DeviceFrontPort: typeof import("./deviceFrontPort").DeviceFrontPort = null as any;
utilities.lazyLoad(exports, ["DeviceFrontPort"], () => require("./deviceFrontPort"));

export { DeviceInterfaceArgs, DeviceInterfaceState } from "./deviceInterface";
export type DeviceInterface = import("./deviceInterface").DeviceInterface;
export const DeviceInterface: typeof import("./deviceInterface").DeviceInterface = null as any;
utilities.lazyLoad(exports, ["DeviceInterface"], () => require("./deviceInterface"));

export { DeviceModuleBayArgs, DeviceModuleBayState } from "./deviceModuleBay";
export type DeviceModuleBay = import("./deviceModuleBay").DeviceModuleBay;
export const DeviceModuleBay: typeof import("./deviceModuleBay").DeviceModuleBay = null as any;
utilities.lazyLoad(exports, ["DeviceModuleBay"], () => require("./deviceModuleBay"));

export { DevicePowerOutletArgs, DevicePowerOutletState } from "./devicePowerOutlet";
export type DevicePowerOutlet = import("./devicePowerOutlet").DevicePowerOutlet;
export const DevicePowerOutlet: typeof import("./devicePowerOutlet").DevicePowerOutlet = null as any;
utilities.lazyLoad(exports, ["DevicePowerOutlet"], () => require("./devicePowerOutlet"));

export { DevicePowerPortArgs, DevicePowerPortState } from "./devicePowerPort";
export type DevicePowerPort = import("./devicePowerPort").DevicePowerPort;
export const DevicePowerPort: typeof import("./devicePowerPort").DevicePowerPort = null as any;
utilities.lazyLoad(exports, ["DevicePowerPort"], () => require("./devicePowerPort"));

export { DevicePrimaryIpArgs, DevicePrimaryIpState } from "./devicePrimaryIp";
export type DevicePrimaryIp = import("./devicePrimaryIp").DevicePrimaryIp;
export const DevicePrimaryIp: typeof import("./devicePrimaryIp").DevicePrimaryIp = null as any;
utilities.lazyLoad(exports, ["DevicePrimaryIp"], () => require("./devicePrimaryIp"));

export { DeviceRearPortArgs, DeviceRearPortState } from "./deviceRearPort";
export type DeviceRearPort = import("./deviceRearPort").DeviceRearPort;
export const DeviceRearPort: typeof import("./deviceRearPort").DeviceRearPort = null as any;
utilities.lazyLoad(exports, ["DeviceRearPort"], () => require("./deviceRearPort"));

export { DeviceRoleArgs, DeviceRoleState } from "./deviceRole";
export type DeviceRole = import("./deviceRole").DeviceRole;
export const DeviceRole: typeof import("./deviceRole").DeviceRole = null as any;
utilities.lazyLoad(exports, ["DeviceRole"], () => require("./deviceRole"));

export { DeviceTypeArgs, DeviceTypeState } from "./deviceType";
export type DeviceType = import("./deviceType").DeviceType;
export const DeviceType: typeof import("./deviceType").DeviceType = null as any;
utilities.lazyLoad(exports, ["DeviceType"], () => require("./deviceType"));

export { GetDeviceInterfacesArgs, GetDeviceInterfacesResult, GetDeviceInterfacesOutputArgs } from "./getDeviceInterfaces";
export const getDeviceInterfaces: typeof import("./getDeviceInterfaces").getDeviceInterfaces = null as any;
export const getDeviceInterfacesOutput: typeof import("./getDeviceInterfaces").getDeviceInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceInterfaces","getDeviceInterfacesOutput"], () => require("./getDeviceInterfaces"));

export { GetDeviceRoleArgs, GetDeviceRoleResult, GetDeviceRoleOutputArgs } from "./getDeviceRole";
export const getDeviceRole: typeof import("./getDeviceRole").getDeviceRole = null as any;
export const getDeviceRoleOutput: typeof import("./getDeviceRole").getDeviceRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceRole","getDeviceRoleOutput"], () => require("./getDeviceRole"));

export { GetDeviceTypeArgs, GetDeviceTypeResult, GetDeviceTypeOutputArgs } from "./getDeviceType";
export const getDeviceType: typeof import("./getDeviceType").getDeviceType = null as any;
export const getDeviceTypeOutput: typeof import("./getDeviceType").getDeviceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceType","getDeviceTypeOutput"], () => require("./getDeviceType"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetPlatformArgs, GetPlatformResult, GetPlatformOutputArgs } from "./getPlatform";
export const getPlatform: typeof import("./getPlatform").getPlatform = null as any;
export const getPlatformOutput: typeof import("./getPlatform").getPlatformOutput = null as any;
utilities.lazyLoad(exports, ["getPlatform","getPlatformOutput"], () => require("./getPlatform"));

export { GetRackRoleArgs, GetRackRoleResult, GetRackRoleOutputArgs } from "./getRackRole";
export const getRackRole: typeof import("./getRackRole").getRackRole = null as any;
export const getRackRoleOutput: typeof import("./getRackRole").getRackRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRackRole","getRackRoleOutput"], () => require("./getRackRole"));

export { GetRacksArgs, GetRacksResult, GetRacksOutputArgs } from "./getRacks";
export const getRacks: typeof import("./getRacks").getRacks = null as any;
export const getRacksOutput: typeof import("./getRacks").getRacksOutput = null as any;
utilities.lazyLoad(exports, ["getRacks","getRacksOutput"], () => require("./getRacks"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSiteGroupArgs, GetSiteGroupResult, GetSiteGroupOutputArgs } from "./getSiteGroup";
export const getSiteGroup: typeof import("./getSiteGroup").getSiteGroup = null as any;
export const getSiteGroupOutput: typeof import("./getSiteGroup").getSiteGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSiteGroup","getSiteGroupOutput"], () => require("./getSiteGroup"));

export { InventoryItemArgs, InventoryItemState } from "./inventoryItem";
export type InventoryItem = import("./inventoryItem").InventoryItem;
export const InventoryItem: typeof import("./inventoryItem").InventoryItem = null as any;
utilities.lazyLoad(exports, ["InventoryItem"], () => require("./inventoryItem"));

export { InventoryItemRoleArgs, InventoryItemRoleState } from "./inventoryItemRole";
export type InventoryItemRole = import("./inventoryItemRole").InventoryItemRole;
export const InventoryItemRole: typeof import("./inventoryItemRole").InventoryItemRole = null as any;
utilities.lazyLoad(exports, ["InventoryItemRole"], () => require("./inventoryItemRole"));

export { LocationArgs, LocationState } from "./location";
export type Location = import("./location").Location;
export const Location: typeof import("./location").Location = null as any;
utilities.lazyLoad(exports, ["Location"], () => require("./location"));

export { ManufacturerArgs, ManufacturerState } from "./manufacturer";
export type Manufacturer = import("./manufacturer").Manufacturer;
export const Manufacturer: typeof import("./manufacturer").Manufacturer = null as any;
utilities.lazyLoad(exports, ["Manufacturer"], () => require("./manufacturer"));

export { ModuleArgs, ModuleState } from "./module";
export type Module = import("./module").Module;
export const Module: typeof import("./module").Module = null as any;
utilities.lazyLoad(exports, ["Module"], () => require("./module"));

export { ModuleTypeArgs, ModuleTypeState } from "./moduleType";
export type ModuleType = import("./moduleType").ModuleType;
export const ModuleType: typeof import("./moduleType").ModuleType = null as any;
utilities.lazyLoad(exports, ["ModuleType"], () => require("./moduleType"));

export { PlatformArgs, PlatformState } from "./platform";
export type Platform = import("./platform").Platform;
export const Platform: typeof import("./platform").Platform = null as any;
utilities.lazyLoad(exports, ["Platform"], () => require("./platform"));

export { PowerFeedArgs, PowerFeedState } from "./powerFeed";
export type PowerFeed = import("./powerFeed").PowerFeed;
export const PowerFeed: typeof import("./powerFeed").PowerFeed = null as any;
utilities.lazyLoad(exports, ["PowerFeed"], () => require("./powerFeed"));

export { PowerPanelArgs, PowerPanelState } from "./powerPanel";
export type PowerPanel = import("./powerPanel").PowerPanel;
export const PowerPanel: typeof import("./powerPanel").PowerPanel = null as any;
utilities.lazyLoad(exports, ["PowerPanel"], () => require("./powerPanel"));

export { RackArgs, RackState } from "./rack";
export type Rack = import("./rack").Rack;
export const Rack: typeof import("./rack").Rack = null as any;
utilities.lazyLoad(exports, ["Rack"], () => require("./rack"));

export { RackReservationArgs, RackReservationState } from "./rackReservation";
export type RackReservation = import("./rackReservation").RackReservation;
export const RackReservation: typeof import("./rackReservation").RackReservation = null as any;
utilities.lazyLoad(exports, ["RackReservation"], () => require("./rackReservation"));

export { RackRoleArgs, RackRoleState } from "./rackRole";
export type RackRole = import("./rackRole").RackRole;
export const RackRole: typeof import("./rackRole").RackRole = null as any;
utilities.lazyLoad(exports, ["RackRole"], () => require("./rackRole"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SiteGroupArgs, SiteGroupState } from "./siteGroup";
export type SiteGroup = import("./siteGroup").SiteGroup;
export const SiteGroup: typeof import("./siteGroup").SiteGroup = null as any;
utilities.lazyLoad(exports, ["SiteGroup"], () => require("./siteGroup"));

export { VirtualChassisArgs, VirtualChassisState } from "./virtualChassis";
export type VirtualChassis = import("./virtualChassis").VirtualChassis;
export const VirtualChassis: typeof import("./virtualChassis").VirtualChassis = null as any;
utilities.lazyLoad(exports, ["VirtualChassis"], () => require("./virtualChassis"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netbox:dcim/cable:Cable":
                return new Cable(name, <any>undefined, { urn })
            case "netbox:dcim/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "netbox:dcim/deviceConsolePort:DeviceConsolePort":
                return new DeviceConsolePort(name, <any>undefined, { urn })
            case "netbox:dcim/deviceConsoleServerPort:DeviceConsoleServerPort":
                return new DeviceConsoleServerPort(name, <any>undefined, { urn })
            case "netbox:dcim/deviceFrontPort:DeviceFrontPort":
                return new DeviceFrontPort(name, <any>undefined, { urn })
            case "netbox:dcim/deviceInterface:DeviceInterface":
                return new DeviceInterface(name, <any>undefined, { urn })
            case "netbox:dcim/deviceModuleBay:DeviceModuleBay":
                return new DeviceModuleBay(name, <any>undefined, { urn })
            case "netbox:dcim/devicePowerOutlet:DevicePowerOutlet":
                return new DevicePowerOutlet(name, <any>undefined, { urn })
            case "netbox:dcim/devicePowerPort:DevicePowerPort":
                return new DevicePowerPort(name, <any>undefined, { urn })
            case "netbox:dcim/devicePrimaryIp:DevicePrimaryIp":
                return new DevicePrimaryIp(name, <any>undefined, { urn })
            case "netbox:dcim/deviceRearPort:DeviceRearPort":
                return new DeviceRearPort(name, <any>undefined, { urn })
            case "netbox:dcim/deviceRole:DeviceRole":
                return new DeviceRole(name, <any>undefined, { urn })
            case "netbox:dcim/deviceType:DeviceType":
                return new DeviceType(name, <any>undefined, { urn })
            case "netbox:dcim/inventoryItem:InventoryItem":
                return new InventoryItem(name, <any>undefined, { urn })
            case "netbox:dcim/inventoryItemRole:InventoryItemRole":
                return new InventoryItemRole(name, <any>undefined, { urn })
            case "netbox:dcim/location:Location":
                return new Location(name, <any>undefined, { urn })
            case "netbox:dcim/manufacturer:Manufacturer":
                return new Manufacturer(name, <any>undefined, { urn })
            case "netbox:dcim/module:Module":
                return new Module(name, <any>undefined, { urn })
            case "netbox:dcim/moduleType:ModuleType":
                return new ModuleType(name, <any>undefined, { urn })
            case "netbox:dcim/platform:Platform":
                return new Platform(name, <any>undefined, { urn })
            case "netbox:dcim/powerFeed:PowerFeed":
                return new PowerFeed(name, <any>undefined, { urn })
            case "netbox:dcim/powerPanel:PowerPanel":
                return new PowerPanel(name, <any>undefined, { urn })
            case "netbox:dcim/rack:Rack":
                return new Rack(name, <any>undefined, { urn })
            case "netbox:dcim/rackReservation:RackReservation":
                return new RackReservation(name, <any>undefined, { urn })
            case "netbox:dcim/rackRole:RackRole":
                return new RackRole(name, <any>undefined, { urn })
            case "netbox:dcim/region:Region":
                return new Region(name, <any>undefined, { urn })
            case "netbox:dcim/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "netbox:dcim/siteGroup:SiteGroup":
                return new SiteGroup(name, <any>undefined, { urn })
            case "netbox:dcim/virtualChassis:VirtualChassis":
                return new VirtualChassis(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netbox", "dcim/cable", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/device", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceConsolePort", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceConsoleServerPort", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceFrontPort", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceInterface", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceModuleBay", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/devicePowerOutlet", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/devicePowerPort", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/devicePrimaryIp", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceRearPort", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceRole", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/deviceType", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/inventoryItem", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/inventoryItemRole", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/location", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/manufacturer", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/module", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/moduleType", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/platform", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/powerFeed", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/powerPanel", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/rack", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/rackReservation", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/rackRole", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/region", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/site", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/siteGroup", _module)
pulumi.runtime.registerResourceModule("netbox", "dcim/virtualChassis", _module)
