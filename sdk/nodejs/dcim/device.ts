// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#devices):
 *
 * > Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzkalabsopensource/pulumi-netbox";
 *
 * const testSite = new netbox.dcim.Site("testSite", {});
 * const testDeviceRole = new netbox.dcim.DeviceRole("testDeviceRole", {colorHex: "123456"});
 * const testManufacturer = new netbox.dcim.Manufacturer("testManufacturer", {});
 * const testDeviceType = new netbox.dcim.DeviceType("testDeviceType", {
 *     model: "test",
 *     manufacturerId: testManufacturer.id,
 * });
 * const testDevice = new netbox.dcim.Device("testDevice", {
 *     deviceTypeId: testDeviceType.id,
 *     roleId: testDeviceRole.id,
 *     siteId: testSite.id,
 *     localContextData: JSON.stringify({
 *         setting_a: "Some Setting",
 *         setting_b: 42,
 *     }),
 * });
 * ```
 */
export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    public readonly assetTag!: pulumi.Output<string | undefined>;
    public readonly clusterId!: pulumi.Output<number | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceTypeId!: pulumi.Output<number>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    public readonly localContextData!: pulumi.Output<string | undefined>;
    public readonly locationId!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly platformId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly primaryIpv4!: pulumi.Output<number>;
    public /*out*/ readonly primaryIpv6!: pulumi.Output<number>;
    /**
     * Valid values are `front` and `rear`. Required when `rackPosition` is set.
     */
    public readonly rackFace!: pulumi.Output<string | undefined>;
    public readonly rackId!: pulumi.Output<number | undefined>;
    public readonly rackPosition!: pulumi.Output<number | undefined>;
    public readonly roleId!: pulumi.Output<number>;
    public readonly serial!: pulumi.Output<string | undefined>;
    public readonly siteId!: pulumi.Output<number>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<number | undefined>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    public readonly virtualChassisId!: pulumi.Output<number | undefined>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    public readonly virtualChassisMaster!: pulumi.Output<boolean | undefined>;
    public readonly virtualChassisPosition!: pulumi.Output<number | undefined>;
    public readonly virtualChassisPriority!: pulumi.Output<number | undefined>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["assetTag"] = state ? state.assetTag : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceTypeId"] = state ? state.deviceTypeId : undefined;
            resourceInputs["localContextData"] = state ? state.localContextData : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platformId"] = state ? state.platformId : undefined;
            resourceInputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            resourceInputs["primaryIpv6"] = state ? state.primaryIpv6 : undefined;
            resourceInputs["rackFace"] = state ? state.rackFace : undefined;
            resourceInputs["rackId"] = state ? state.rackId : undefined;
            resourceInputs["rackPosition"] = state ? state.rackPosition : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["virtualChassisId"] = state ? state.virtualChassisId : undefined;
            resourceInputs["virtualChassisMaster"] = state ? state.virtualChassisMaster : undefined;
            resourceInputs["virtualChassisPosition"] = state ? state.virtualChassisPosition : undefined;
            resourceInputs["virtualChassisPriority"] = state ? state.virtualChassisPriority : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            if ((!args || args.deviceTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceTypeId'");
            }
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["assetTag"] = args ? args.assetTag : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceTypeId"] = args ? args.deviceTypeId : undefined;
            resourceInputs["localContextData"] = args ? args.localContextData : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platformId"] = args ? args.platformId : undefined;
            resourceInputs["rackFace"] = args ? args.rackFace : undefined;
            resourceInputs["rackId"] = args ? args.rackId : undefined;
            resourceInputs["rackPosition"] = args ? args.rackPosition : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["virtualChassisId"] = args ? args.virtualChassisId : undefined;
            resourceInputs["virtualChassisMaster"] = args ? args.virtualChassisMaster : undefined;
            resourceInputs["virtualChassisPosition"] = args ? args.virtualChassisPosition : undefined;
            resourceInputs["virtualChassisPriority"] = args ? args.virtualChassisPriority : undefined;
            resourceInputs["primaryIpv4"] = undefined /*out*/;
            resourceInputs["primaryIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    assetTag?: pulumi.Input<string>;
    clusterId?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceTypeId?: pulumi.Input<number>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    localContextData?: pulumi.Input<string>;
    locationId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    platformId?: pulumi.Input<number>;
    primaryIpv4?: pulumi.Input<number>;
    primaryIpv6?: pulumi.Input<number>;
    /**
     * Valid values are `front` and `rear`. Required when `rackPosition` is set.
     */
    rackFace?: pulumi.Input<string>;
    rackId?: pulumi.Input<number>;
    rackPosition?: pulumi.Input<number>;
    roleId?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    siteId?: pulumi.Input<number>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    virtualChassisId?: pulumi.Input<number>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    virtualChassisMaster?: pulumi.Input<boolean>;
    virtualChassisPosition?: pulumi.Input<number>;
    virtualChassisPriority?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    assetTag?: pulumi.Input<string>;
    clusterId?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceTypeId: pulumi.Input<number>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    localContextData?: pulumi.Input<string>;
    locationId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    platformId?: pulumi.Input<number>;
    /**
     * Valid values are `front` and `rear`. Required when `rackPosition` is set.
     */
    rackFace?: pulumi.Input<string>;
    rackId?: pulumi.Input<number>;
    rackPosition?: pulumi.Input<number>;
    roleId: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
    siteId: pulumi.Input<number>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    virtualChassisId?: pulumi.Input<number>;
    /**
     * Required when `virtualChassisMaster` and `virtualChassisId` is set.
     */
    virtualChassisMaster?: pulumi.Input<boolean>;
    virtualChassisPosition?: pulumi.Input<number>;
    virtualChassisPriority?: pulumi.Input<number>;
}
