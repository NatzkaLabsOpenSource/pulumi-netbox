// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/consoleserverport/):
 *
 * > A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices, and generally connect to console ports.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzkalabsopensource/pulumi-netbox";
 *
 * // Note that some terraform code is not included in the example for brevity
 * const testDevice = new netbox.dcim.Device("testDevice", {
 *     deviceTypeId: netbox_device_type.test.id,
 *     roleId: netbox_device_role.test.id,
 *     siteId: netbox_site.test.id,
 * });
 * const testDeviceConsoleServerPort = new netbox.dcim.DeviceConsoleServerPort("testDeviceConsoleServerPort", {
 *     deviceId: testDevice.id,
 *     type: "de-9",
 *     speed: 1200,
 *     markConnected: true,
 * });
 * ```
 */
export class DeviceConsoleServerPort extends pulumi.CustomResource {
    /**
     * Get an existing DeviceConsoleServerPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceConsoleServerPortState, opts?: pulumi.CustomResourceOptions): DeviceConsoleServerPort {
        return new DeviceConsoleServerPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/deviceConsoleServerPort:DeviceConsoleServerPort';

    /**
     * Returns true if the given object is an instance of DeviceConsoleServerPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceConsoleServerPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceConsoleServerPort.__pulumiType;
    }

    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<number>;
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `false`.
     */
    public readonly markConnected!: pulumi.Output<boolean | undefined>;
    public readonly moduleId!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
     */
    public readonly speed!: pulumi.Output<number | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a DeviceConsoleServerPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceConsoleServerPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceConsoleServerPortArgs | DeviceConsoleServerPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceConsoleServerPortState | undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["markConnected"] = state ? state.markConnected : undefined;
            resourceInputs["moduleId"] = state ? state.moduleId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DeviceConsoleServerPortArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["markConnected"] = args ? args.markConnected : undefined;
            resourceInputs["moduleId"] = args ? args.moduleId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceConsoleServerPort.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceConsoleServerPort resources.
 */
export interface DeviceConsoleServerPortState {
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    markConnected?: pulumi.Input<boolean>;
    moduleId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
     */
    speed?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeviceConsoleServerPort resource.
 */
export interface DeviceConsoleServerPortArgs {
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    markConnected?: pulumi.Input<boolean>;
    moduleId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
     */
    speed?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
     */
    type?: pulumi.Input<string>;
}
