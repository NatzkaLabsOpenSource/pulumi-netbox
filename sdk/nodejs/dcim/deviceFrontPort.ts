// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/frontport/):
 *
 * > Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzkalabsopensource/pulumi-netbox";
 *
 * // Note that some terraform code is not included in the example for brevity
 * const testDevice = new netbox.dcim.Device("testDevice", {
 *     deviceTypeId: netbox_device_type.test.id,
 *     roleId: netbox_device_role.test.id,
 *     siteId: netbox_site.test.id,
 * });
 * const testDeviceRearPort = new netbox.dcim.DeviceRearPort("testDeviceRearPort", {
 *     deviceId: testDevice.id,
 *     type: "8p8c",
 *     positions: 2,
 *     markConnected: true,
 * });
 * const testDeviceFrontPort = new netbox.dcim.DeviceFrontPort("testDeviceFrontPort", {
 *     deviceId: testDevice.id,
 *     type: "8p8c",
 *     rearPortId: testDeviceRearPort.id,
 *     rearPortPosition: 2,
 * });
 * ```
 */
export class DeviceFrontPort extends pulumi.CustomResource {
    /**
     * Get an existing DeviceFrontPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceFrontPortState, opts?: pulumi.CustomResourceOptions): DeviceFrontPort {
        return new DeviceFrontPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/deviceFrontPort:DeviceFrontPort';

    /**
     * Returns true if the given object is an instance of DeviceFrontPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceFrontPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceFrontPort.__pulumiType;
    }

    public readonly colorHex!: pulumi.Output<string | undefined>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<number>;
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `false`.
     */
    public readonly markConnected!: pulumi.Output<boolean | undefined>;
    public readonly moduleId!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly rearPortId!: pulumi.Output<number>;
    public readonly rearPortPosition!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a DeviceFrontPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceFrontPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceFrontPortArgs | DeviceFrontPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceFrontPortState | undefined;
            resourceInputs["colorHex"] = state ? state.colorHex : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["markConnected"] = state ? state.markConnected : undefined;
            resourceInputs["moduleId"] = state ? state.moduleId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rearPortId"] = state ? state.rearPortId : undefined;
            resourceInputs["rearPortPosition"] = state ? state.rearPortPosition : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DeviceFrontPortArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.rearPortId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rearPortId'");
            }
            if ((!args || args.rearPortPosition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rearPortPosition'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["colorHex"] = args ? args.colorHex : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["markConnected"] = args ? args.markConnected : undefined;
            resourceInputs["moduleId"] = args ? args.moduleId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rearPortId"] = args ? args.rearPortId : undefined;
            resourceInputs["rearPortPosition"] = args ? args.rearPortPosition : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceFrontPort.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceFrontPort resources.
 */
export interface DeviceFrontPortState {
    colorHex?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    markConnected?: pulumi.Input<boolean>;
    moduleId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    rearPortId?: pulumi.Input<number>;
    rearPortPosition?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeviceFrontPort resource.
 */
export interface DeviceFrontPortArgs {
    colorHex?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    markConnected?: pulumi.Input<boolean>;
    moduleId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    rearPortId: pulumi.Input<number>;
    rearPortPosition: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
     */
    type: pulumi.Input<string>;
}
