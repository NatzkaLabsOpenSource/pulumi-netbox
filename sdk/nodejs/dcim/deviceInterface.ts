// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):
 *
 * > Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzkalabsopensource/pulumi-netbox";
 *
 * // Assumes a device with ID 123 exists
 * const test = new netbox.dcim.DeviceInterface("test", {
 *     deviceId: 123,
 *     type: "1000base-t",
 * });
 * ```
 */
export class DeviceInterface extends pulumi.CustomResource {
    /**
     * Get an existing DeviceInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceInterfaceState, opts?: pulumi.CustomResourceOptions): DeviceInterface {
        return new DeviceInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:dcim/deviceInterface:DeviceInterface';

    /**
     * Returns true if the given object is an instance of DeviceInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceInterface.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<number>;
    /**
     * Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * If this device is a member of a LAG group, you can reference the LAG interface here.
     */
    public readonly lagDeviceInterfaceId!: pulumi.Output<number | undefined>;
    public readonly macAddress!: pulumi.Output<string | undefined>;
    public readonly mgmtonly!: pulumi.Output<boolean | undefined>;
    /**
     * Valid values are `access`, `tagged` and `tagged-all`.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
     */
    public readonly parentDeviceInterfaceId!: pulumi.Output<number | undefined>;
    public readonly speed!: pulumi.Output<number | undefined>;
    public readonly taggedVlans!: pulumi.Output<number[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly untaggedVlan!: pulumi.Output<number | undefined>;

    /**
     * Create a DeviceInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceInterfaceArgs | DeviceInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceInterfaceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["lagDeviceInterfaceId"] = state ? state.lagDeviceInterfaceId : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["mgmtonly"] = state ? state.mgmtonly : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentDeviceInterfaceId"] = state ? state.parentDeviceInterfaceId : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["taggedVlans"] = state ? state.taggedVlans : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["untaggedVlan"] = state ? state.untaggedVlan : undefined;
        } else {
            const args = argsOrState as DeviceInterfaceArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["lagDeviceInterfaceId"] = args ? args.lagDeviceInterfaceId : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["mgmtonly"] = args ? args.mgmtonly : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentDeviceInterfaceId"] = args ? args.parentDeviceInterfaceId : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["taggedVlans"] = args ? args.taggedVlans : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["untaggedVlan"] = args ? args.untaggedVlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeviceInterface resources.
 */
export interface DeviceInterfaceState {
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If this device is a member of a LAG group, you can reference the LAG interface here.
     */
    lagDeviceInterfaceId?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    mgmtonly?: pulumi.Input<boolean>;
    /**
     * Valid values are `access`, `tagged` and `tagged-all`.
     */
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
     */
    parentDeviceInterfaceId?: pulumi.Input<number>;
    speed?: pulumi.Input<number>;
    taggedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    untaggedVlan?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeviceInterface resource.
 */
export interface DeviceInterfaceArgs {
    description?: pulumi.Input<string>;
    deviceId: pulumi.Input<number>;
    /**
     * Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If this device is a member of a LAG group, you can reference the LAG interface here.
     */
    lagDeviceInterfaceId?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    mgmtonly?: pulumi.Input<boolean>;
    /**
     * Valid values are `access`, `tagged` and `tagged-all`.
     */
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
     */
    parentDeviceInterfaceId?: pulumi.Input<number>;
    speed?: pulumi.Input<number>;
    taggedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    untaggedVlan?: pulumi.Input<number>;
}
