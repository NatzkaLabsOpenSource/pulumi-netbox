// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://netboxlabs.com/docs/netbox/models/dcim/macaddress/):
 *
 * > A MAC address object in NetBox comprises a single Ethernet link layer address, and represents a MAC address as reported by or assigned to a network interface. MAC addresses can be assigned to device and virtual machine interfaces. A MAC address can be specified as the primary MAC address for a given device or VM interface.
 *
 * ## Example Usage
 *
 * ### Creating a MAC address that is assigned to a virtual machine interface
 *
 * With `virtualMachineInterfaceId`:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Assuming a virtual machine with the id `123` exists
 * const _this = new netbox.virt.Interface("this", {
 *     name: "eth0",
 *     virtualMachineId: 123,
 * });
 * const thisMacAddress = new netbox.MacAddress("this", {
 *     macAddress: "00:1A:2B:3C:4D:5E",
 *     virtualMachineInterfaceId: _this.id,
 * });
 * ```
 *
 * With `objectType` and `interfaceId`:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Assuming a virtual machine with the id `123` exists
 * const _this = new netbox.virt.Interface("this", {
 *     name: "eth0",
 *     virtualMachineId: 123,
 * });
 * const thisMacAddress = new netbox.MacAddress("this", {
 *     macAddress: "00:1A:2B:3C:4D:5E",
 *     interfaceId: _this.id,
 *     objectType: "virtualization.vminterface",
 * });
 * ```
 *
 * ### Creating a MAC address that is assigned to a device interface
 *
 * With `deviceInterfaceId`:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Assuming a device with the id `123` exists
 * const _this = new netbox.dcim.DeviceInterface("this", {
 *     name: "eth0",
 *     deviceId: 123,
 *     type: "1000base-t",
 * });
 * const thisMacAddress = new netbox.MacAddress("this", {
 *     macAddress: "00:1A:2B:3C:4D:5E",
 *     deviceInterfaceId: _this.id,
 * });
 * ```
 *
 * With `objectType` and `interfaceId`:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * // Assuming a device with the id `123` exists
 * const _this = new netbox.dcim.DeviceInterface("this", {
 *     name: "eth0",
 *     deviceId: 123,
 *     type: "1000base-t",
 * });
 * const thisMacAddress = new netbox.MacAddress("this", {
 *     macAddress: "00:1A:2B:3C:4D:5E",
 *     interfaceId: _this.id,
 *     objectType: "dcim.interface",
 * });
 * ```
 *
 * ### Creating a MAC address that is not assigned to anything
 *
 * You can create a MAC address that is not assigned to anything by omitting the attributes mentioned above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const _this = new netbox.MacAddress("this", {macAddress: "00:1A:2B:3C:4D:5E"});
 * ```
 */
export class MacAddress extends pulumi.CustomResource {
    /**
     * Get an existing MacAddress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MacAddressState, opts?: pulumi.CustomResourceOptions): MacAddress {
        return new MacAddress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/macAddress:MacAddress';

    /**
     * Returns true if the given object is an instance of MacAddress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MacAddress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MacAddress.__pulumiType;
    }

    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
     */
    public readonly deviceInterfaceId!: pulumi.Output<number | undefined>;
    /**
     * Required when `objectType` is set.
     */
    public readonly interfaceId!: pulumi.Output<number | undefined>;
    public readonly macAddress!: pulumi.Output<string>;
    /**
     * Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
     */
    public readonly objectType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly tagsAlls!: pulumi.Output<string[]>;
    /**
     * Conflicts with `interfaceId` and `deviceInterfaceId`.
     */
    public readonly virtualMachineInterfaceId!: pulumi.Output<number | undefined>;

    /**
     * Create a MacAddress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MacAddressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MacAddressArgs | MacAddressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MacAddressState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceInterfaceId"] = state ? state.deviceInterfaceId : undefined;
            resourceInputs["interfaceId"] = state ? state.interfaceId : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["objectType"] = state ? state.objectType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAlls"] = state ? state.tagsAlls : undefined;
            resourceInputs["virtualMachineInterfaceId"] = state ? state.virtualMachineInterfaceId : undefined;
        } else {
            const args = argsOrState as MacAddressArgs | undefined;
            if ((!args || args.macAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'macAddress'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceInterfaceId"] = args ? args.deviceInterfaceId : undefined;
            resourceInputs["interfaceId"] = args ? args.interfaceId : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["objectType"] = args ? args.objectType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualMachineInterfaceId"] = args ? args.virtualMachineInterfaceId : undefined;
            resourceInputs["tagsAlls"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MacAddress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MacAddress resources.
 */
export interface MacAddressState {
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    /**
     * Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    /**
     * Required when `objectType` is set.
     */
    interfaceId?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    /**
     * Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
     */
    objectType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tagsAlls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Conflicts with `interfaceId` and `deviceInterfaceId`.
     */
    virtualMachineInterfaceId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MacAddress resource.
 */
export interface MacAddressArgs {
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    /**
     * Conflicts with `interfaceId` and `virtualMachineInterfaceId`.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    /**
     * Required when `objectType` is set.
     */
    interfaceId?: pulumi.Input<number>;
    macAddress: pulumi.Input<string>;
    /**
     * Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interfaceId` is set.
     */
    objectType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Conflicts with `interfaceId` and `deviceInterfaceId`.
     */
    virtualMachineInterfaceId?: pulumi.Input<number>;
}
