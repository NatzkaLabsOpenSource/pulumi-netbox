// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#virtual-machines):
 *
 * > A virtual machine is a virtualized compute instance. These behave in NetBox very similarly to device objects, but without any physical attributes. For example, a VM may have interfaces assigned to it with IP addresses and VLANs, however its interfaces cannot be connected via cables (because they are virtual). Each VM may also define its compute, memory, and storage resources as well.
 */
export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:virt/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    public readonly clusterId!: pulumi.Output<number | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customFields!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<number | undefined>;
    public readonly diskSizeGb!: pulumi.Output<number | undefined>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    public readonly localContextData!: pulumi.Output<string | undefined>;
    public readonly memoryMb!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly platformId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly primaryIpv4!: pulumi.Output<number>;
    public /*out*/ readonly primaryIpv6!: pulumi.Output<number>;
    public readonly roleId!: pulumi.Output<number | undefined>;
    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    public readonly siteId!: pulumi.Output<number | undefined>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<number | undefined>;
    public readonly vcpus!: pulumi.Output<number | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customFields"] = state ? state.customFields : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["localContextData"] = state ? state.localContextData : undefined;
            resourceInputs["memoryMb"] = state ? state.memoryMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platformId"] = state ? state.platformId : undefined;
            resourceInputs["primaryIpv4"] = state ? state.primaryIpv4 : undefined;
            resourceInputs["primaryIpv6"] = state ? state.primaryIpv6 : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vcpus"] = state ? state.vcpus : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customFields"] = args ? args.customFields : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["localContextData"] = args ? args.localContextData : undefined;
            resourceInputs["memoryMb"] = args ? args.memoryMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platformId"] = args ? args.platformId : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["vcpus"] = args ? args.vcpus : undefined;
            resourceInputs["primaryIpv4"] = undefined /*out*/;
            resourceInputs["primaryIpv6"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    clusterId?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    diskSizeGb?: pulumi.Input<number>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    localContextData?: pulumi.Input<string>;
    memoryMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    platformId?: pulumi.Input<number>;
    primaryIpv4?: pulumi.Input<number>;
    primaryIpv6?: pulumi.Input<number>;
    roleId?: pulumi.Input<number>;
    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    siteId?: pulumi.Input<number>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    vcpus?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    clusterId?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    customFields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<number>;
    diskSizeGb?: pulumi.Input<number>;
    /**
     * This is best managed through the use of `jsonencode` and a map of settings.
     */
    localContextData?: pulumi.Input<string>;
    memoryMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    platformId?: pulumi.Input<number>;
    roleId?: pulumi.Input<number>;
    /**
     * At least one of `siteId` or `clusterId` must be given.
     */
    siteId?: pulumi.Input<number>;
    /**
     * Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    vcpus?: pulumi.Input<number>;
}
