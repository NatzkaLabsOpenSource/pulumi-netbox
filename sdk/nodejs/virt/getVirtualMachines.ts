// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@pulumi/netbox";
 *
 * const vmwCluster01 = netbox.virt.getCluster({
 *     name: "vmw-cluster-01",
 * });
 * const baseVm = vmwCluster01.then(vmwCluster01 => netbox.virt.getVirtualMachines({
 *     nameRegex: "myvm-1",
 *     filters: [{
 *         name: "cluster_id",
 *         value: vmwCluster01.id,
 *     }],
 * }));
 * ```
 */
export function getVirtualMachines(args?: GetVirtualMachinesArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualMachinesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netbox:virt/getVirtualMachines:getVirtualMachines", {
        "filters": args.filters,
        "limit": args.limit,
        "nameRegex": args.nameRegex,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualMachines.
 */
export interface GetVirtualMachinesArgs {
    filters?: inputs.virt.GetVirtualMachinesFilter[];
    limit?: number;
    nameRegex?: string;
}

/**
 * A collection of values returned by getVirtualMachines.
 */
export interface GetVirtualMachinesResult {
    readonly filters?: outputs.virt.GetVirtualMachinesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly limit?: number;
    readonly nameRegex?: string;
    readonly vms: outputs.virt.GetVirtualMachinesVm[];
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@pulumi/netbox";
 *
 * const vmwCluster01 = netbox.virt.getCluster({
 *     name: "vmw-cluster-01",
 * });
 * const baseVm = vmwCluster01.then(vmwCluster01 => netbox.virt.getVirtualMachines({
 *     nameRegex: "myvm-1",
 *     filters: [{
 *         name: "cluster_id",
 *         value: vmwCluster01.id,
 *     }],
 * }));
 * ```
 */
export function getVirtualMachinesOutput(args?: GetVirtualMachinesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualMachinesResult> {
    return pulumi.output(args).apply((a: any) => getVirtualMachines(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualMachines.
 */
export interface GetVirtualMachinesOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.virt.GetVirtualMachinesFilterArgs>[]>;
    limit?: pulumi.Input<number>;
    nameRegex?: pulumi.Input<string>;
}
