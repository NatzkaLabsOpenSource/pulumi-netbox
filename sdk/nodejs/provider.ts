// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the netbox package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'netbox';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
     */
    public readonly apiToken!: pulumi.Output<string>;
    /**
     * Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
     * environment variable.
     */
    public readonly serverUrl!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            if ((!args || args.serverUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverUrl'");
            }
            resourceInputs["allowInsecureHttps"] = pulumi.output(args ? args.allowInsecureHttps : undefined).apply(JSON.stringify);
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["headers"] = pulumi.output(args ? args.headers : undefined).apply(JSON.stringify);
            resourceInputs["requestTimeout"] = pulumi.output(args ? args.requestTimeout : undefined).apply(JSON.stringify);
            resourceInputs["serverUrl"] = args ? args.serverUrl : undefined;
            resourceInputs["skipVersionCheck"] = pulumi.output(args ? args.skipVersionCheck : undefined).apply(JSON.stringify);
            resourceInputs["stripTrailingSlashesFromUrl"] = pulumi.output(args ? args.stripTrailingSlashesFromUrl : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
     * environment variable. Defaults to `false`.
     */
    allowInsecureHttps?: pulumi.Input<boolean>;
    /**
     * Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
     */
    apiToken: pulumi.Input<string>;
    /**
     * Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
     * environment variable.
     */
    serverUrl: pulumi.Input<string>;
    skipVersionCheck?: pulumi.Input<boolean>;
    /**
     * If true, strip trailing slashes from the `serverUrl` parameter and print a warning when doing so. Note that using
     * trailing slashes in the `serverUrl` parameter will usually lead to errors. Can be set via the
     * `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
     */
    stripTrailingSlashesFromUrl?: pulumi.Input<boolean>;
}
