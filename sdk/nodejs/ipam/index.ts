// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AggregateArgs, AggregateState } from "./aggregate";
export type Aggregate = import("./aggregate").Aggregate;
export const Aggregate: typeof import("./aggregate").Aggregate = null as any;
utilities.lazyLoad(exports, ["Aggregate"], () => require("./aggregate"));

export { AsnArgs, AsnState } from "./asn";
export type Asn = import("./asn").Asn;
export const Asn: typeof import("./asn").Asn = null as any;
utilities.lazyLoad(exports, ["Asn"], () => require("./asn"));

export { AvailableIpAddressArgs, AvailableIpAddressState } from "./availableIpAddress";
export type AvailableIpAddress = import("./availableIpAddress").AvailableIpAddress;
export const AvailableIpAddress: typeof import("./availableIpAddress").AvailableIpAddress = null as any;
utilities.lazyLoad(exports, ["AvailableIpAddress"], () => require("./availableIpAddress"));

export { AvailablePrefixArgs, AvailablePrefixState } from "./availablePrefix";
export type AvailablePrefix = import("./availablePrefix").AvailablePrefix;
export const AvailablePrefix: typeof import("./availablePrefix").AvailablePrefix = null as any;
utilities.lazyLoad(exports, ["AvailablePrefix"], () => require("./availablePrefix"));

export { GetAsnArgs, GetAsnResult, GetAsnOutputArgs } from "./getAsn";
export const getAsn: typeof import("./getAsn").getAsn = null as any;
export const getAsnOutput: typeof import("./getAsn").getAsnOutput = null as any;
utilities.lazyLoad(exports, ["getAsn","getAsnOutput"], () => require("./getAsn"));

export { GetAsnsArgs, GetAsnsResult, GetAsnsOutputArgs } from "./getAsns";
export const getAsns: typeof import("./getAsns").getAsns = null as any;
export const getAsnsOutput: typeof import("./getAsns").getAsnsOutput = null as any;
utilities.lazyLoad(exports, ["getAsns","getAsnsOutput"], () => require("./getAsns"));

export { GetAvailablePrefixArgs, GetAvailablePrefixResult, GetAvailablePrefixOutputArgs } from "./getAvailablePrefix";
export const getAvailablePrefix: typeof import("./getAvailablePrefix").getAvailablePrefix = null as any;
export const getAvailablePrefixOutput: typeof import("./getAvailablePrefix").getAvailablePrefixOutput = null as any;
utilities.lazyLoad(exports, ["getAvailablePrefix","getAvailablePrefixOutput"], () => require("./getAvailablePrefix"));

export { GetIpAddressesArgs, GetIpAddressesResult, GetIpAddressesOutputArgs } from "./getIpAddresses";
export const getIpAddresses: typeof import("./getIpAddresses").getIpAddresses = null as any;
export const getIpAddressesOutput: typeof import("./getIpAddresses").getIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddresses","getIpAddressesOutput"], () => require("./getIpAddresses"));

export { GetIpRangeArgs, GetIpRangeResult, GetIpRangeOutputArgs } from "./getIpRange";
export const getIpRange: typeof import("./getIpRange").getIpRange = null as any;
export const getIpRangeOutput: typeof import("./getIpRange").getIpRangeOutput = null as any;
utilities.lazyLoad(exports, ["getIpRange","getIpRangeOutput"], () => require("./getIpRange"));

export { GetPrefixArgs, GetPrefixResult, GetPrefixOutputArgs } from "./getPrefix";
export const getPrefix: typeof import("./getPrefix").getPrefix = null as any;
export const getPrefixOutput: typeof import("./getPrefix").getPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getPrefix","getPrefixOutput"], () => require("./getPrefix"));

export { GetPrefixesArgs, GetPrefixesResult, GetPrefixesOutputArgs } from "./getPrefixes";
export const getPrefixes: typeof import("./getPrefixes").getPrefixes = null as any;
export const getPrefixesOutput: typeof import("./getPrefixes").getPrefixesOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixes","getPrefixesOutput"], () => require("./getPrefixes"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRouteTargetArgs, GetRouteTargetResult, GetRouteTargetOutputArgs } from "./getRouteTarget";
export const getRouteTarget: typeof import("./getRouteTarget").getRouteTarget = null as any;
export const getRouteTargetOutput: typeof import("./getRouteTarget").getRouteTargetOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTarget","getRouteTargetOutput"], () => require("./getRouteTarget"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { GetVlanGroupArgs, GetVlanGroupResult, GetVlanGroupOutputArgs } from "./getVlanGroup";
export const getVlanGroup: typeof import("./getVlanGroup").getVlanGroup = null as any;
export const getVlanGroupOutput: typeof import("./getVlanGroup").getVlanGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVlanGroup","getVlanGroupOutput"], () => require("./getVlanGroup"));

export { GetVlansArgs, GetVlansResult, GetVlansOutputArgs } from "./getVlans";
export const getVlans: typeof import("./getVlans").getVlans = null as any;
export const getVlansOutput: typeof import("./getVlans").getVlansOutput = null as any;
utilities.lazyLoad(exports, ["getVlans","getVlansOutput"], () => require("./getVlans"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { GetVrfsArgs, GetVrfsResult, GetVrfsOutputArgs } from "./getVrfs";
export const getVrfs: typeof import("./getVrfs").getVrfs = null as any;
export const getVrfsOutput: typeof import("./getVrfs").getVrfsOutput = null as any;
utilities.lazyLoad(exports, ["getVrfs","getVrfsOutput"], () => require("./getVrfs"));

export { IpAddressArgs, IpAddressState } from "./ipAddress";
export type IpAddress = import("./ipAddress").IpAddress;
export const IpAddress: typeof import("./ipAddress").IpAddress = null as any;
utilities.lazyLoad(exports, ["IpAddress"], () => require("./ipAddress"));

export { IpRangeArgs, IpRangeState } from "./ipRange";
export type IpRange = import("./ipRange").IpRange;
export const IpRange: typeof import("./ipRange").IpRange = null as any;
utilities.lazyLoad(exports, ["IpRange"], () => require("./ipRange"));

export { PrefixArgs, PrefixState } from "./prefix";
export type Prefix = import("./prefix").Prefix;
export const Prefix: typeof import("./prefix").Prefix = null as any;
utilities.lazyLoad(exports, ["Prefix"], () => require("./prefix"));

export { RirArgs, RirState } from "./rir";
export type Rir = import("./rir").Rir;
export const Rir: typeof import("./rir").Rir = null as any;
utilities.lazyLoad(exports, ["Rir"], () => require("./rir"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RouteTargetArgs, RouteTargetState } from "./routeTarget";
export type RouteTarget = import("./routeTarget").RouteTarget;
export const RouteTarget: typeof import("./routeTarget").RouteTarget = null as any;
utilities.lazyLoad(exports, ["RouteTarget"], () => require("./routeTarget"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VlanGroupArgs, VlanGroupState } from "./vlanGroup";
export type VlanGroup = import("./vlanGroup").VlanGroup;
export const VlanGroup: typeof import("./vlanGroup").VlanGroup = null as any;
utilities.lazyLoad(exports, ["VlanGroup"], () => require("./vlanGroup"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netbox:ipam/aggregate:Aggregate":
                return new Aggregate(name, <any>undefined, { urn })
            case "netbox:ipam/asn:Asn":
                return new Asn(name, <any>undefined, { urn })
            case "netbox:ipam/availableIpAddress:AvailableIpAddress":
                return new AvailableIpAddress(name, <any>undefined, { urn })
            case "netbox:ipam/availablePrefix:AvailablePrefix":
                return new AvailablePrefix(name, <any>undefined, { urn })
            case "netbox:ipam/ipAddress:IpAddress":
                return new IpAddress(name, <any>undefined, { urn })
            case "netbox:ipam/ipRange:IpRange":
                return new IpRange(name, <any>undefined, { urn })
            case "netbox:ipam/prefix:Prefix":
                return new Prefix(name, <any>undefined, { urn })
            case "netbox:ipam/rir:Rir":
                return new Rir(name, <any>undefined, { urn })
            case "netbox:ipam/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "netbox:ipam/routeTarget:RouteTarget":
                return new RouteTarget(name, <any>undefined, { urn })
            case "netbox:ipam/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "netbox:ipam/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "netbox:ipam/vlanGroup:VlanGroup":
                return new VlanGroup(name, <any>undefined, { urn })
            case "netbox:ipam/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netbox", "ipam/aggregate", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/asn", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/availableIpAddress", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/availablePrefix", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/ipAddress", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/ipRange", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/prefix", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/rir", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/role", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/routeTarget", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/service", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/vlan", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/vlanGroup", _module)
pulumi.runtime.registerResourceModule("netbox", "ipam/vrf", _module)
