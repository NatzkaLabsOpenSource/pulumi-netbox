// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#regional-internet-registries-rirs):
 *
 * > Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. NetBox considers these RFCs as a sort of RIR as well; that is, an authority which "owns" certain address space. There also exist lower-tier registries which serve particular geographic areas.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.ipam.Rir("test", {
 *     name: "test",
 *     description: "my description",
 * });
 * ```
 */
export class Rir extends pulumi.CustomResource {
    /**
     * Get an existing Rir resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RirState, opts?: pulumi.CustomResourceOptions): Rir {
        return new Rir(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:ipam/rir:Rir';

    /**
     * Returns true if the given object is an instance of Rir.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rir {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rir.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `false`.
     */
    public readonly isPrivate!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;

    /**
     * Create a Rir resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RirArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RirArgs | RirState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RirState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as RirArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isPrivate"] = args ? args.isPrivate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rir.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rir resources.
 */
export interface RirState {
    description?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    isPrivate?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rir resource.
 */
export interface RirArgs {
    description?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    isPrivate?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
}
