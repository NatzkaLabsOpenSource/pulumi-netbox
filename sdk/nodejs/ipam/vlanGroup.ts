// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * > A VLAN Group represents a collection of VLANs. Generally, these are limited by one of a number of scopes such as "Site" or "Virtualization Cluster".
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * //Basic VLAN Group example
 * const example1 = new netbox.ipam.VlanGroup("example1", {
 *     slug: "example1",
 *     minVid: 1,
 *     maxVid: 4094,
 * });
 * //Full VLAN Group example
 * const example2 = new netbox.ipam.VlanGroup("example2", {
 *     slug: "example2",
 *     minVid: 1,
 *     maxVid: 4094,
 *     scopeType: "dcim.site",
 *     scopeId: netbox_site.example.id,
 *     description: "Second Example VLAN Group",
 *     tags: [netbox_tag.example.id],
 * });
 * ```
 */
export class VlanGroup extends pulumi.CustomResource {
    /**
     * Get an existing VlanGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanGroupState, opts?: pulumi.CustomResourceOptions): VlanGroup {
        return new VlanGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:ipam/vlanGroup:VlanGroup';

    /**
     * Returns true if the given object is an instance of VlanGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VlanGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VlanGroup.__pulumiType;
    }

    /**
     * Defaults to `""`.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly maxVid!: pulumi.Output<number>;
    public readonly minVid!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Required when `scopeType` is set.
     */
    public readonly scopeId!: pulumi.Output<number | undefined>;
    /**
     * Valid values are `active`, `container`, `reserved` and `deprecated`.
     */
    public readonly scopeType!: pulumi.Output<string | undefined>;
    public readonly slug!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VlanGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanGroupArgs | VlanGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["maxVid"] = state ? state.maxVid : undefined;
            resourceInputs["minVid"] = state ? state.minVid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["scopeType"] = state ? state.scopeType : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VlanGroupArgs | undefined;
            if ((!args || args.maxVid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxVid'");
            }
            if ((!args || args.minVid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minVid'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["maxVid"] = args ? args.maxVid : undefined;
            resourceInputs["minVid"] = args ? args.minVid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["scopeType"] = args ? args.scopeType : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VlanGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VlanGroup resources.
 */
export interface VlanGroupState {
    /**
     * Defaults to `""`.
     */
    description?: pulumi.Input<string>;
    maxVid?: pulumi.Input<number>;
    minVid?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Required when `scopeType` is set.
     */
    scopeId?: pulumi.Input<number>;
    /**
     * Valid values are `active`, `container`, `reserved` and `deprecated`.
     */
    scopeType?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VlanGroup resource.
 */
export interface VlanGroupArgs {
    /**
     * Defaults to `""`.
     */
    description?: pulumi.Input<string>;
    maxVid: pulumi.Input<number>;
    minVid: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * Required when `scopeType` is set.
     */
    scopeId?: pulumi.Input<number>;
    /**
     * Valid values are `active`, `container`, `reserved` and `deprecated`.
     */
    scopeType?: pulumi.Input<string>;
    slug: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
