// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configcontext/):
 *
 * > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.ConfigContext("test", {
 *     name: "%s",
 *     data: JSON.stringify({
 *         testkey: "testval",
 *     }),
 * });
 * ```
 */
export class ConfigContext extends pulumi.CustomResource {
    /**
     * Get an existing ConfigContext resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigContextState, opts?: pulumi.CustomResourceOptions): ConfigContext {
        return new ConfigContext(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/configContext:ConfigContext';

    /**
     * Returns true if the given object is an instance of ConfigContext.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigContext {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigContext.__pulumiType;
    }

    public readonly clusterGroups!: pulumi.Output<number[] | undefined>;
    public readonly clusterTypes!: pulumi.Output<number[] | undefined>;
    public readonly clusters!: pulumi.Output<number[] | undefined>;
    public readonly data!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceTypes!: pulumi.Output<number[] | undefined>;
    public readonly locations!: pulumi.Output<number[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly platforms!: pulumi.Output<number[] | undefined>;
    public readonly regions!: pulumi.Output<number[] | undefined>;
    public readonly roles!: pulumi.Output<number[] | undefined>;
    public readonly siteGroups!: pulumi.Output<number[] | undefined>;
    public readonly sites!: pulumi.Output<number[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantGroups!: pulumi.Output<number[] | undefined>;
    public readonly tenants!: pulumi.Output<number[] | undefined>;
    /**
     * Defaults to `1000`.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a ConfigContext resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigContextArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigContextArgs | ConfigContextState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigContextState | undefined;
            resourceInputs["clusterGroups"] = state ? state.clusterGroups : undefined;
            resourceInputs["clusterTypes"] = state ? state.clusterTypes : undefined;
            resourceInputs["clusters"] = state ? state.clusters : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceTypes"] = state ? state.deviceTypes : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["siteGroups"] = state ? state.siteGroups : undefined;
            resourceInputs["sites"] = state ? state.sites : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantGroups"] = state ? state.tenantGroups : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ConfigContextArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            resourceInputs["clusterGroups"] = args ? args.clusterGroups : undefined;
            resourceInputs["clusterTypes"] = args ? args.clusterTypes : undefined;
            resourceInputs["clusters"] = args ? args.clusters : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceTypes"] = args ? args.deviceTypes : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["siteGroups"] = args ? args.siteGroups : undefined;
            resourceInputs["sites"] = args ? args.sites : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantGroups"] = args ? args.tenantGroups : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigContext.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigContext resources.
 */
export interface ConfigContextState {
    clusterGroups?: pulumi.Input<pulumi.Input<number>[]>;
    clusterTypes?: pulumi.Input<pulumi.Input<number>[]>;
    clusters?: pulumi.Input<pulumi.Input<number>[]>;
    data?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceTypes?: pulumi.Input<pulumi.Input<number>[]>;
    locations?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    platforms?: pulumi.Input<pulumi.Input<number>[]>;
    regions?: pulumi.Input<pulumi.Input<number>[]>;
    roles?: pulumi.Input<pulumi.Input<number>[]>;
    siteGroups?: pulumi.Input<pulumi.Input<number>[]>;
    sites?: pulumi.Input<pulumi.Input<number>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantGroups?: pulumi.Input<pulumi.Input<number>[]>;
    tenants?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defaults to `1000`.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ConfigContext resource.
 */
export interface ConfigContextArgs {
    clusterGroups?: pulumi.Input<pulumi.Input<number>[]>;
    clusterTypes?: pulumi.Input<pulumi.Input<number>[]>;
    clusters?: pulumi.Input<pulumi.Input<number>[]>;
    data: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceTypes?: pulumi.Input<pulumi.Input<number>[]>;
    locations?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    platforms?: pulumi.Input<pulumi.Input<number>[]>;
    regions?: pulumi.Input<pulumi.Input<number>[]>;
    roles?: pulumi.Input<pulumi.Input<number>[]>;
    siteGroups?: pulumi.Input<pulumi.Input<number>[]>;
    sites?: pulumi.Input<pulumi.Input<number>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantGroups?: pulumi.Input<pulumi.Input<number>[]>;
    tenants?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Defaults to `1000`.
     */
    weight?: pulumi.Input<number>;
}
