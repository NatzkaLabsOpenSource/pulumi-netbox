// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/integrations/webhooks/):
 *
 * > A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzkalabsopensource/pulumi-netbox";
 *
 * const test = new netbox.Webhook("test", {
 *     bodytemplate: "Sample body",
 *     contentTypes: ["dcim.site"],
 *     enabled: true,
 *     payloadUrl: "https://example.com/webhook",
 *     triggerOnCreate: true,
 * });
 * ```
 */
export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    public readonly bodyTemplate!: pulumi.Output<string | undefined>;
    public readonly contentTypes!: pulumi.Output<string[]>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
     */
    public readonly httpContentType!: pulumi.Output<string | undefined>;
    /**
     * Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
     */
    public readonly httpMethod!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly payloadUrl!: pulumi.Output<string>;
    public readonly triggerOnCreate!: pulumi.Output<boolean | undefined>;
    public readonly triggerOnDelete!: pulumi.Output<boolean | undefined>;
    public readonly triggerOnUpdate!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["bodyTemplate"] = state ? state.bodyTemplate : undefined;
            resourceInputs["contentTypes"] = state ? state.contentTypes : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["httpContentType"] = state ? state.httpContentType : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payloadUrl"] = state ? state.payloadUrl : undefined;
            resourceInputs["triggerOnCreate"] = state ? state.triggerOnCreate : undefined;
            resourceInputs["triggerOnDelete"] = state ? state.triggerOnDelete : undefined;
            resourceInputs["triggerOnUpdate"] = state ? state.triggerOnUpdate : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.contentTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentTypes'");
            }
            if ((!args || args.payloadUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'payloadUrl'");
            }
            resourceInputs["bodyTemplate"] = args ? args.bodyTemplate : undefined;
            resourceInputs["contentTypes"] = args ? args.contentTypes : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["httpContentType"] = args ? args.httpContentType : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payloadUrl"] = args ? args.payloadUrl : undefined;
            resourceInputs["triggerOnCreate"] = args ? args.triggerOnCreate : undefined;
            resourceInputs["triggerOnDelete"] = args ? args.triggerOnDelete : undefined;
            resourceInputs["triggerOnUpdate"] = args ? args.triggerOnUpdate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    bodyTemplate?: pulumi.Input<string>;
    contentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
     */
    httpContentType?: pulumi.Input<string>;
    /**
     * Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
     */
    httpMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    payloadUrl?: pulumi.Input<string>;
    triggerOnCreate?: pulumi.Input<boolean>;
    triggerOnDelete?: pulumi.Input<boolean>;
    triggerOnUpdate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    bodyTemplate?: pulumi.Input<string>;
    contentTypes: pulumi.Input<pulumi.Input<string>[]>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.
     */
    httpContentType?: pulumi.Input<string>;
    /**
     * Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.
     */
    httpMethod?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    payloadUrl: pulumi.Input<string>;
    triggerOnCreate?: pulumi.Input<boolean>;
    triggerOnDelete?: pulumi.Input<boolean>;
    triggerOnUpdate?: pulumi.Input<boolean>;
}
