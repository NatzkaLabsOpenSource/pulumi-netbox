// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):
 *
 * > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.vpn.VpnTunnelGroup("test", {
 *     name: "my-tunnel-group",
 *     description: "description",
 * });
 * const testVpnTunnel = new netbox.vpn.VpnTunnel("test", {
 *     name: "my-tunnel",
 *     encapsulation: "ipsec-transport",
 *     status: "active",
 *     tunnelGroupId: test.id,
 * });
 * const device = new netbox.vpn.VpnTunnelTermination("device", {
 *     role: "peer",
 *     tunnelId: testVpnTunnel.id,
 *     deviceInterfaceId: 123,
 * });
 * const vm = new netbox.vpn.VpnTunnelTermination("vm", {
 *     role: "peer",
 *     tunnelId: testVpnTunnel.id,
 *     virtualMachineInterfaceId: 234,
 * });
 * ```
 */
export class VpnTunnelTermination extends pulumi.CustomResource {
    /**
     * Get an existing VpnTunnelTermination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnTunnelTerminationState, opts?: pulumi.CustomResourceOptions): VpnTunnelTermination {
        return new VpnTunnelTermination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:vpn/vpnTunnelTermination:VpnTunnelTermination';

    /**
     * Returns true if the given object is an instance of VpnTunnelTermination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnTunnelTermination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnTunnelTermination.__pulumiType;
    }

    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    public readonly deviceInterfaceId!: pulumi.Output<number | undefined>;
    public readonly outsideIpAddressId!: pulumi.Output<number | undefined>;
    /**
     * Valid values are `peer`, `hub` and `spoke`.
     */
    public readonly role!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tunnelId!: pulumi.Output<number>;
    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    public readonly virtualMachineInterfaceId!: pulumi.Output<number | undefined>;

    /**
     * Create a VpnTunnelTermination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnTunnelTerminationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnTunnelTerminationArgs | VpnTunnelTerminationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnTunnelTerminationState | undefined;
            resourceInputs["deviceInterfaceId"] = state ? state.deviceInterfaceId : undefined;
            resourceInputs["outsideIpAddressId"] = state ? state.outsideIpAddressId : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["virtualMachineInterfaceId"] = state ? state.virtualMachineInterfaceId : undefined;
        } else {
            const args = argsOrState as VpnTunnelTerminationArgs | undefined;
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.tunnelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["deviceInterfaceId"] = args ? args.deviceInterfaceId : undefined;
            resourceInputs["outsideIpAddressId"] = args ? args.outsideIpAddressId : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tunnelId"] = args ? args.tunnelId : undefined;
            resourceInputs["virtualMachineInterfaceId"] = args ? args.virtualMachineInterfaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnTunnelTermination.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnTunnelTermination resources.
 */
export interface VpnTunnelTerminationState {
    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    outsideIpAddressId?: pulumi.Input<number>;
    /**
     * Valid values are `peer`, `hub` and `spoke`.
     */
    role?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelId?: pulumi.Input<number>;
    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    virtualMachineInterfaceId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VpnTunnelTermination resource.
 */
export interface VpnTunnelTerminationArgs {
    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    deviceInterfaceId?: pulumi.Input<number>;
    outsideIpAddressId?: pulumi.Input<number>;
    /**
     * Valid values are `peer`, `hub` and `spoke`.
     */
    role: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tunnelId: pulumi.Input<number>;
    /**
     * Exactly one of `virtualMachineInterfaceId` or `deviceInterfaceId` must be given.
     */
    virtualMachineInterfaceId?: pulumi.Input<number>;
}
