// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):
 *
 * > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.vpn.VpnTunnelGroup("test", {name: "my-tunnel-group"});
 * const testVpnTunnel = new netbox.vpn.VpnTunnel("test", {
 *     name: "my-tunnel",
 *     encapsulation: "ipsec-transport",
 *     status: "active",
 *     tunnelGroupId: test.id,
 *     description: "This is a description.",
 *     tunnelId: 3,
 *     tenantId: 2,
 * });
 * ```
 */
export class VpnTunnel extends pulumi.CustomResource {
    /**
     * Get an existing VpnTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnTunnelState, opts?: pulumi.CustomResourceOptions): VpnTunnel {
        return new VpnTunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:vpn/vpnTunnel:VpnTunnel';

    /**
     * Returns true if the given object is an instance of VpnTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnTunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnTunnel.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
     */
    public readonly encapsulation!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Valid values are `planned`, `active` and `disabled`.
     */
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<number | undefined>;
    public readonly tunnelGroupId!: pulumi.Output<number>;
    public readonly tunnelId!: pulumi.Output<number | undefined>;

    /**
     * Create a VpnTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnTunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnTunnelArgs | VpnTunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnTunnelState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encapsulation"] = state ? state.encapsulation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tunnelGroupId"] = state ? state.tunnelGroupId : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
        } else {
            const args = argsOrState as VpnTunnelArgs | undefined;
            if ((!args || args.encapsulation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encapsulation'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.tunnelGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelGroupId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encapsulation"] = args ? args.encapsulation : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["tunnelGroupId"] = args ? args.tunnelGroupId : undefined;
            resourceInputs["tunnelId"] = args ? args.tunnelId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnTunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnTunnel resources.
 */
export interface VpnTunnelState {
    description?: pulumi.Input<string>;
    /**
     * Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
     */
    encapsulation?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Valid values are `planned`, `active` and `disabled`.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    tunnelGroupId?: pulumi.Input<number>;
    tunnelId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VpnTunnel resource.
 */
export interface VpnTunnelArgs {
    description?: pulumi.Input<string>;
    /**
     * Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
     */
    encapsulation: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Valid values are `planned`, `active` and `disabled`.
     */
    status: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    tunnelGroupId: pulumi.Input<number>;
    tunnelId?: pulumi.Input<number>;
}
