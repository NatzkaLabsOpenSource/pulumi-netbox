// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Per [the docs](https://netbox.readthedocs.io/en/stable/models/ipam/vlan/):
 *
 * > A VLAN represents an isolated Layer 2 domain identified by a numeric ID (1â€“4094). VLANs may be assigned to specific sites or marked as global.
 * Optionally, they can be organized within VLAN groups to define scope and enforce uniqueness.
 * > 
 * > Each VLAN can also be assigned an operational status and a functional role. Statuses are hard-coded in NetBox and include the following:
 * > * Active
 * > * Reserved
 * > * Deprecated
 *
 * This resource will retrieve the next available VLAN ID from a given VLAN group (specified by ID).
 */
export class AvailableVlan extends pulumi.CustomResource {
    /**
     * Get an existing AvailableVlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AvailableVlanState, opts?: pulumi.CustomResourceOptions): AvailableVlan {
        return new AvailableVlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/availableVlan:AvailableVlan';

    /**
     * Returns true if the given object is an instance of AvailableVlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AvailableVlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AvailableVlan.__pulumiType;
    }

    public /*out*/ readonly comments!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly groupId!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly roleId!: pulumi.Output<number | undefined>;
    public readonly siteId!: pulumi.Output<number | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly tagsAlls!: pulumi.Output<string[]>;
    public readonly tenantId!: pulumi.Output<number | undefined>;
    public /*out*/ readonly vid!: pulumi.Output<number>;

    /**
     * Create a AvailableVlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AvailableVlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AvailableVlanArgs | AvailableVlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AvailableVlanState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAlls"] = state ? state.tagsAlls : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vid"] = state ? state.vid : undefined;
        } else {
            const args = argsOrState as AvailableVlanArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["comments"] = undefined /*out*/;
            resourceInputs["tagsAlls"] = undefined /*out*/;
            resourceInputs["vid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AvailableVlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AvailableVlan resources.
 */
export interface AvailableVlanState {
    comments?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    roleId?: pulumi.Input<number>;
    siteId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tagsAlls?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
    vid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AvailableVlan resource.
 */
export interface AvailableVlanArgs {
    description?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    roleId?: pulumi.Input<number>;
    siteId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<number>;
}
