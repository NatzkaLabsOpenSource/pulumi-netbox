// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/rest-api/authentication/#tokens):
 *
 * > A token is a unique identifier mapped to a NetBox user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.auth.User("test", {
 *     username: "johndoe",
 *     password: "Abcdefghijkl1",
 * });
 * const testBasic = new netbox.auth.Token("test_basic", {
 *     userId: test.id,
 *     key: "0123456789012345678901234567890123456789",
 *     allowedIps: ["2.4.8.16/32"],
 *     writeEnabled: false,
 * });
 * ```
 */
export class Token extends pulumi.CustomResource {
    /**
     * Get an existing Token resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TokenState, opts?: pulumi.CustomResourceOptions): Token {
        return new Token(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:auth/token:Token';

    /**
     * Returns true if the given object is an instance of Token.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Token {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Token.__pulumiType;
    }

    public readonly allowedIps!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly expires!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUsed!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<number>;
    public readonly writeEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Token resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TokenArgs | TokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TokenState | undefined;
            resourceInputs["allowedIps"] = state ? state.allowedIps : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lastUsed"] = state ? state.lastUsed : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["writeEnabled"] = state ? state.writeEnabled : undefined;
        } else {
            const args = argsOrState as TokenArgs | undefined;
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["allowedIps"] = args ? args.allowedIps : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["writeEnabled"] = args ? args.writeEnabled : undefined;
            resourceInputs["expires"] = undefined /*out*/;
            resourceInputs["lastUsed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Token.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Token resources.
 */
export interface TokenState {
    allowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    expires?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    lastUsed?: pulumi.Input<string>;
    userId?: pulumi.Input<number>;
    writeEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Token resource.
 */
export interface TokenArgs {
    allowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    userId: pulumi.Input<number>;
    writeEnabled?: pulumi.Input<boolean>;
}
