// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource manages the object-based permissions for Netbox users, built into the application.
 *
 * > Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.
 * For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.auth.User("test", {
 *     username: "johndoe",
 *     password: "Abcdefghijkl1",
 *     active: true,
 *     staff: true,
 * });
 * const testPermission = new netbox.auth.Permission("test", {
 *     name: "test",
 *     description: "my description",
 *     enabled: true,
 *     objectTypes: ["ipam.prefix"],
 *     actions: [
 *         "add",
 *         "change",
 *     ],
 *     users: [test.id],
 *     constraints: JSON.stringify([{
 *         status: "active",
 *     }]),
 * });
 * ```
 */
export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:auth/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
     */
    public readonly actions!: pulumi.Output<string[]>;
    /**
     * A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
     */
    public readonly constraints!: pulumi.Output<string | undefined>;
    /**
     * The description of the permission object.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the permission object is enabled or not. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of group IDs that have been assigned to this permission object.
     */
    public readonly groups!: pulumi.Output<number[] | undefined>;
    /**
     * The name of the permission object.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
     */
    public readonly objectTypes!: pulumi.Output<string[]>;
    /**
     * A list of user IDs that have been assigned to this permission object.
     */
    public readonly users!: pulumi.Output<number[] | undefined>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectTypes"] = state ? state.objectTypes : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.objectTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectTypes'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectTypes"] = args ? args.objectTypes : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
     */
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
     */
    constraints?: pulumi.Input<string>;
    /**
     * The description of the permission object.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the permission object is enabled or not. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of group IDs that have been assigned to this permission object.
     */
    groups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the permission object.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
     */
    objectTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of user IDs that have been assigned to this permission object.
     */
    users?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
     */
    actions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
     */
    constraints?: pulumi.Input<string>;
    /**
     * The description of the permission object.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the permission object is enabled or not. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of group IDs that have been assigned to this permission object.
     */
    groups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The name of the permission object.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
     */
    objectTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of user IDs that have been assigned to this permission object.
     */
    users?: pulumi.Input<pulumi.Input<number>[]>;
}
