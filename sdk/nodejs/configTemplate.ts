// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):
 *
 * > Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.
 *
 * > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as netbox from "@natzka-oss/pulumi-netbox";
 *
 * const test = new netbox.ConfigTemplate("test", {
 *     name: "test",
 *     description: "test description",
 *     templateCode: "hostname {{ name }}",
 *     environmentParams: JSON.stringify({
 *         name: "my-hostname",
 *     }),
 * });
 * ```
 */
export class ConfigTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ConfigTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigTemplateState, opts?: pulumi.CustomResourceOptions): ConfigTemplate {
        return new ConfigTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netbox:index/configTemplate:ConfigTemplate';

    /**
     * Returns true if the given object is an instance of ConfigTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigTemplate.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Defaults to `{}`.
     */
    public readonly environmentParams!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly tagsAlls!: pulumi.Output<string[]>;
    public readonly templateCode!: pulumi.Output<string>;

    /**
     * Create a ConfigTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigTemplateArgs | ConfigTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigTemplateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentParams"] = state ? state.environmentParams : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAlls"] = state ? state.tagsAlls : undefined;
            resourceInputs["templateCode"] = state ? state.templateCode : undefined;
        } else {
            const args = argsOrState as ConfigTemplateArgs | undefined;
            if ((!args || args.templateCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateCode'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentParams"] = args ? args.environmentParams : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateCode"] = args ? args.templateCode : undefined;
            resourceInputs["tagsAlls"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigTemplate resources.
 */
export interface ConfigTemplateState {
    description?: pulumi.Input<string>;
    /**
     * Defaults to `{}`.
     */
    environmentParams?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tagsAlls?: pulumi.Input<pulumi.Input<string>[]>;
    templateCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigTemplate resource.
 */
export interface ConfigTemplateArgs {
    description?: pulumi.Input<string>;
    /**
     * Defaults to `{}`.
     */
    environmentParams?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    templateCode: pulumi.Input<string>;
}
