// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):
    /// 
    /// &gt; Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.
    /// 
    /// &gt; Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.ConfigTemplate("test", new()
    ///     {
    ///         Name = "test",
    ///         Description = "test description",
    ///         TemplateCode = "hostname {{ name }}",
    ///         EnvironmentParams = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["name"] = "my-hostname",
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:index/configTemplate:ConfigTemplate")]
    public partial class ConfigTemplate : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Defaults to `{}`.
        /// </summary>
        [Output("environmentParams")]
        public Output<string?> EnvironmentParams { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("templateCode")]
        public Output<string> TemplateCode { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigTemplate(string name, ConfigTemplateArgs args, CustomResourceOptions? options = null)
            : base("netbox:index/configTemplate:ConfigTemplate", name, args ?? new ConfigTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigTemplate(string name, Input<string> id, ConfigTemplateState? state = null, CustomResourceOptions? options = null)
            : base("netbox:index/configTemplate:ConfigTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigTemplate Get(string name, Input<string> id, ConfigTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigTemplate(name, id, state, options);
        }
    }

    public sealed class ConfigTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Defaults to `{}`.
        /// </summary>
        [Input("environmentParams")]
        public Input<string>? EnvironmentParams { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateCode", required: true)]
        public Input<string> TemplateCode { get; set; } = null!;

        public ConfigTemplateArgs()
        {
        }
        public static new ConfigTemplateArgs Empty => new ConfigTemplateArgs();
    }

    public sealed class ConfigTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Defaults to `{}`.
        /// </summary>
        [Input("environmentParams")]
        public Input<string>? EnvironmentParams { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("templateCode")]
        public Input<string>? TemplateCode { get; set; }

        public ConfigTemplateState()
        {
        }
        public static new ConfigTemplateState Empty => new ConfigTemplateState();
    }
}
