// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Circuit
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-terminations):
    /// 
    /// &gt; The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.
    /// &gt; 
    /// &gt; Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Dcim.Site("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///         Status = "active",
    ///     });
    /// 
    ///     var testCircuitProvider = new Netbox.Circuit.CircuitProvider("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///     });
    /// 
    ///     var testCircuitType = new Netbox.Circuit.CircuitType("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///     });
    /// 
    ///     var testCircuit = new Netbox.Circuit.Circuit("test", new()
    ///     {
    ///         Cid = "%[1]s",
    ///         Status = "active",
    ///         ProviderId = testCircuitProvider.Id,
    ///         TypeId = testCircuitType.Id,
    ///     });
    /// 
    ///     var testCircuitTermination = new Netbox.Circuit.CircuitTermination("test", new()
    ///     {
    ///         CircuitId = testCircuit.Id,
    ///         TermSide = "A",
    ///         SiteId = test.Id,
    ///         PortSpeed = 100000,
    ///         UpstreamSpeed = 50000,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:circuit/circuitTermination:CircuitTermination")]
    public partial class CircuitTermination : global::Pulumi.CustomResource
    {
        [Output("circuitId")]
        public Output<int> CircuitId { get; private set; } = null!;

        [Output("customFields")]
        public Output<ImmutableDictionary<string, string>?> CustomFields { get; private set; } = null!;

        [Output("portSpeed")]
        public Output<int?> PortSpeed { get; private set; } = null!;

        [Output("siteId")]
        public Output<int> SiteId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Valid values are `A` and `Z`.
        /// </summary>
        [Output("termSide")]
        public Output<string> TermSide { get; private set; } = null!;

        [Output("upstreamSpeed")]
        public Output<int?> UpstreamSpeed { get; private set; } = null!;


        /// <summary>
        /// Create a CircuitTermination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CircuitTermination(string name, CircuitTerminationArgs args, CustomResourceOptions? options = null)
            : base("netbox:circuit/circuitTermination:CircuitTermination", name, args ?? new CircuitTerminationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CircuitTermination(string name, Input<string> id, CircuitTerminationState? state = null, CustomResourceOptions? options = null)
            : base("netbox:circuit/circuitTermination:CircuitTermination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CircuitTermination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CircuitTermination Get(string name, Input<string> id, CircuitTerminationState? state = null, CustomResourceOptions? options = null)
        {
            return new CircuitTermination(name, id, state, options);
        }
    }

    public sealed class CircuitTerminationArgs : global::Pulumi.ResourceArgs
    {
        [Input("circuitId", required: true)]
        public Input<int> CircuitId { get; set; } = null!;

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("portSpeed")]
        public Input<int>? PortSpeed { get; set; }

        [Input("siteId", required: true)]
        public Input<int> SiteId { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Valid values are `A` and `Z`.
        /// </summary>
        [Input("termSide", required: true)]
        public Input<string> TermSide { get; set; } = null!;

        [Input("upstreamSpeed")]
        public Input<int>? UpstreamSpeed { get; set; }

        public CircuitTerminationArgs()
        {
        }
        public static new CircuitTerminationArgs Empty => new CircuitTerminationArgs();
    }

    public sealed class CircuitTerminationState : global::Pulumi.ResourceArgs
    {
        [Input("circuitId")]
        public Input<int>? CircuitId { get; set; }

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("portSpeed")]
        public Input<int>? PortSpeed { get; set; }

        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Valid values are `A` and `Z`.
        /// </summary>
        [Input("termSide")]
        public Input<string>? TermSide { get; set; }

        [Input("upstreamSpeed")]
        public Input<int>? UpstreamSpeed { get; set; }

        public CircuitTerminationState()
        {
        }
        public static new CircuitTerminationState Empty => new CircuitTerminationState();
    }
}
