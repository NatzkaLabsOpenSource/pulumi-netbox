// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Tenancy
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts#contactassignments_1):
    /// 
    /// &gt; Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Tenancy.Contact("test", new()
    ///     {
    ///         Name = "test",
    ///     });
    /// 
    ///     var testContactRole = new Netbox.Tenancy.ContactRole("test", new()
    ///     {
    ///         Name = "test",
    ///     });
    /// 
    ///     // Assumes that a device with id 123 exists
    ///     var testContactAssignment = new Netbox.Tenancy.ContactAssignment("test", new()
    ///     {
    ///         ContentType = "dcim.device",
    ///         ObjectId = 123,
    ///         ContactId = test.Id,
    ///         RoleId = testContactRole.Id,
    ///         Priority = "primary",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:tenancy/contactAssignment:ContactAssignment")]
    public partial class ContactAssignment : global::Pulumi.CustomResource
    {
        [Output("contactId")]
        public Output<int> ContactId { get; private set; } = null!;

        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("objectId")]
        public Output<int> ObjectId { get; private set; } = null!;

        /// <summary>
        /// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        [Output("roleId")]
        public Output<int> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a ContactAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContactAssignment(string name, ContactAssignmentArgs args, CustomResourceOptions? options = null)
            : base("netbox:tenancy/contactAssignment:ContactAssignment", name, args ?? new ContactAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContactAssignment(string name, Input<string> id, ContactAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("netbox:tenancy/contactAssignment:ContactAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContactAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContactAssignment Get(string name, Input<string> id, ContactAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ContactAssignment(name, id, state, options);
        }
    }

    public sealed class ContactAssignmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("contactId", required: true)]
        public Input<int> ContactId { get; set; } = null!;

        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        [Input("objectId", required: true)]
        public Input<int> ObjectId { get; set; } = null!;

        /// <summary>
        /// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("roleId", required: true)]
        public Input<int> RoleId { get; set; } = null!;

        public ContactAssignmentArgs()
        {
        }
        public static new ContactAssignmentArgs Empty => new ContactAssignmentArgs();
    }

    public sealed class ContactAssignmentState : global::Pulumi.ResourceArgs
    {
        [Input("contactId")]
        public Input<int>? ContactId { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("objectId")]
        public Input<int>? ObjectId { get; set; }

        /// <summary>
        /// Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        public ContactAssignmentState()
        {
        }
        public static new ContactAssignmentState Empty => new ContactAssignmentState();
    }
}
