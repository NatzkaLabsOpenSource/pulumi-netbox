// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox
{
    /// <summary>
    /// The provider type for the netbox package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [NetboxResourceType("pulumi:providers:netbox")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
        /// </summary>
        [Output("apiToken")]
        public Output<string> ApiToken { get; private set; } = null!;

        /// <summary>
        /// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
        /// environment variable.
        /// </summary>
        [Output("serverUrl")]
        public Output<string> ServerUrl { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("netbox", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
        /// environment variable. Defaults to `false`.
        /// </summary>
        [Input("allowInsecureHttps", json: true)]
        public Input<bool>? AllowInsecureHttps { get; set; }

        /// <summary>
        /// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
        /// </summary>
        [Input("apiToken", required: true)]
        public Input<string> ApiToken { get; set; } = null!;

        [Input("headers", json: true)]
        private InputMap<string>? _headers;

        /// <summary>
        /// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        /// <summary>
        /// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
        /// </summary>
        [Input("requestTimeout", json: true)]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
        /// environment variable.
        /// </summary>
        [Input("serverUrl", required: true)]
        public Input<string> ServerUrl { get; set; } = null!;

        [Input("skipVersionCheck", json: true)]
        public Input<bool>? SkipVersionCheck { get; set; }

        /// <summary>
        /// If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using
        /// trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the
        /// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
        /// </summary>
        [Input("stripTrailingSlashesFromUrl", json: true)]
        public Input<bool>? StripTrailingSlashesFromUrl { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
