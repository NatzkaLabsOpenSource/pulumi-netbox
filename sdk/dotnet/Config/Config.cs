// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Netbox
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("netbox");

        private static readonly __Value<bool?> _allowInsecureHttps = new __Value<bool?>(() => __config.GetBoolean("allowInsecureHttps"));
        /// <summary>
        /// Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`
        /// environment variable. Defaults to `false`.
        /// </summary>
        public static bool? AllowInsecureHttps
        {
            get => _allowInsecureHttps.Get();
            set => _allowInsecureHttps.Set(value);
        }

        private static readonly __Value<string?> _apiToken = new __Value<string?>(() => __config.Get("apiToken"));
        /// <summary>
        /// Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.
        /// </summary>
        public static string? ApiToken
        {
            get => _apiToken.Get();
            set => _apiToken.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, string>?> _headers = new __Value<ImmutableDictionary<string, string>?>(() => __config.GetObject<ImmutableDictionary<string, string>>("headers"));
        /// <summary>
        /// Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.
        /// </summary>
        public static ImmutableDictionary<string, string>? Headers
        {
            get => _headers.Get();
            set => _headers.Set(value);
        }

        private static readonly __Value<int?> _requestTimeout = new __Value<int?>(() => __config.GetInt32("requestTimeout"));
        /// <summary>
        /// Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.
        /// </summary>
        public static int? RequestTimeout
        {
            get => _requestTimeout.Get();
            set => _requestTimeout.Set(value);
        }

        private static readonly __Value<string?> _serverUrl = new __Value<string?>(() => __config.Get("serverUrl"));
        /// <summary>
        /// Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`
        /// environment variable.
        /// </summary>
        public static string? ServerUrl
        {
            get => _serverUrl.Get();
            set => _serverUrl.Set(value);
        }

        private static readonly __Value<bool?> _skipVersionCheck = new __Value<bool?>(() => __config.GetBoolean("skipVersionCheck"));
        public static bool? SkipVersionCheck
        {
            get => _skipVersionCheck.Get();
            set => _skipVersionCheck.Set(value);
        }

        private static readonly __Value<bool?> _stripTrailingSlashesFromUrl = new __Value<bool?>(() => __config.GetBoolean("stripTrailingSlashesFromUrl"));
        /// <summary>
        /// If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using
        /// trailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the
        /// `NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.
        /// </summary>
        public static bool? StripTrailingSlashesFromUrl
        {
            get => _stripTrailingSlashesFromUrl.Get();
            set => _stripTrailingSlashesFromUrl.Set(value);
        }

    }
}
