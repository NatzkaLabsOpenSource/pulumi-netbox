// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Auth
{
    /// <summary>
    /// This resource manages the object-based permissions for Netbox users, built into the application.
    /// 
    /// &gt; Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.
    /// For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Auth.User("test", new()
    ///     {
    ///         Username = "johndoe",
    ///         Password = "Abcdefghijkl1",
    ///         Active = true,
    ///         Staff = true,
    ///     });
    /// 
    ///     var testPermission = new Netbox.Auth.Permission("test", new()
    ///     {
    ///         Name = "test",
    ///         Description = "my description",
    ///         Enabled = true,
    ///         ObjectTypes = new[]
    ///         {
    ///             "ipam.prefix",
    ///         },
    ///         Actions = new[]
    ///         {
    ///             "add",
    ///             "change",
    ///         },
    ///         Users = new[]
    ///         {
    ///             test.Id,
    ///         },
    ///         Constraints = JsonSerializer.Serialize(new[]
    ///         {
    ///             new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["status"] = "active",
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:auth/permission:Permission")]
    public partial class Permission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<string>> Actions { get; private set; } = null!;

        /// <summary>
        /// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        /// </summary>
        [Output("constraints")]
        public Output<string?> Constraints { get; private set; } = null!;

        /// <summary>
        /// The description of the permission object.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the permission object is enabled or not. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A list of group IDs that have been assigned to this permission object.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<int>> Groups { get; private set; } = null!;

        /// <summary>
        /// The name of the permission object.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        /// </summary>
        [Output("objectTypes")]
        public Output<ImmutableArray<string>> ObjectTypes { get; private set; } = null!;

        /// <summary>
        /// A list of user IDs that have been assigned to this permission object.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<int>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Permission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permission(string name, PermissionArgs args, CustomResourceOptions? options = null)
            : base("netbox:auth/permission:Permission", name, args ?? new PermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permission(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
            : base("netbox:auth/permission:Permission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permission Get(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new Permission(name, id, state, options);
        }
    }

    public sealed class PermissionArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<string>? _actions;

        /// <summary>
        /// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        /// </summary>
        public InputList<string> Actions
        {
            get => _actions ?? (_actions = new InputList<string>());
            set => _actions = value;
        }

        /// <summary>
        /// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        /// </summary>
        [Input("constraints")]
        public Input<string>? Constraints { get; set; }

        /// <summary>
        /// The description of the permission object.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the permission object is enabled or not. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("groups")]
        private InputList<int>? _groups;

        /// <summary>
        /// A list of group IDs that have been assigned to this permission object.
        /// </summary>
        public InputList<int> Groups
        {
            get => _groups ?? (_groups = new InputList<int>());
            set => _groups = value;
        }

        /// <summary>
        /// The name of the permission object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objectTypes", required: true)]
        private InputList<string>? _objectTypes;

        /// <summary>
        /// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        /// </summary>
        public InputList<string> ObjectTypes
        {
            get => _objectTypes ?? (_objectTypes = new InputList<string>());
            set => _objectTypes = value;
        }

        [Input("users")]
        private InputList<int>? _users;

        /// <summary>
        /// A list of user IDs that have been assigned to this permission object.
        /// </summary>
        public InputList<int> Users
        {
            get => _users ?? (_users = new InputList<int>());
            set => _users = value;
        }

        public PermissionArgs()
        {
        }
        public static new PermissionArgs Empty => new PermissionArgs();
    }

    public sealed class PermissionState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<string>? _actions;

        /// <summary>
        /// A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        /// </summary>
        public InputList<string> Actions
        {
            get => _actions ?? (_actions = new InputList<string>());
            set => _actions = value;
        }

        /// <summary>
        /// A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        /// </summary>
        [Input("constraints")]
        public Input<string>? Constraints { get; set; }

        /// <summary>
        /// The description of the permission object.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the permission object is enabled or not. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("groups")]
        private InputList<int>? _groups;

        /// <summary>
        /// A list of group IDs that have been assigned to this permission object.
        /// </summary>
        public InputList<int> Groups
        {
            get => _groups ?? (_groups = new InputList<int>());
            set => _groups = value;
        }

        /// <summary>
        /// The name of the permission object.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objectTypes")]
        private InputList<string>? _objectTypes;

        /// <summary>
        /// A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        /// </summary>
        public InputList<string> ObjectTypes
        {
            get => _objectTypes ?? (_objectTypes = new InputList<string>());
            set => _objectTypes = value;
        }

        [Input("users")]
        private InputList<int>? _users;

        /// <summary>
        /// A list of user IDs that have been assigned to this permission object.
        /// </summary>
        public InputList<int> Users
        {
            get => _users ?? (_users = new InputList<int>());
            set => _users = value;
        }

        public PermissionState()
        {
        }
        public static new PermissionState Empty => new PermissionState();
    }
}
