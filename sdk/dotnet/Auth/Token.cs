// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Auth
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/rest-api/authentication/#tokens):
    /// 
    /// &gt; A token is a unique identifier mapped to a NetBox user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Auth.User("test", new()
    ///     {
    ///         Username = "johndoe",
    ///         Password = "Abcdefghijkl1",
    ///     });
    /// 
    ///     var testBasic = new Netbox.Auth.Token("test_basic", new()
    ///     {
    ///         UserId = test.Id,
    ///         Key = "0123456789012345678901234567890123456789",
    ///         AllowedIps = new[]
    ///         {
    ///             "2.4.8.16/32",
    ///         },
    ///         WriteEnabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:auth/token:Token")]
    public partial class Token : global::Pulumi.CustomResource
    {
        [Output("allowedIps")]
        public Output<ImmutableArray<string>> AllowedIps { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("expires")]
        public Output<string> Expires { get; private set; } = null!;

        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        [Output("lastUsed")]
        public Output<string> LastUsed { get; private set; } = null!;

        [Output("userId")]
        public Output<int> UserId { get; private set; } = null!;

        [Output("writeEnabled")]
        public Output<bool?> WriteEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Token resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Token(string name, TokenArgs args, CustomResourceOptions? options = null)
            : base("netbox:auth/token:Token", name, args ?? new TokenArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Token(string name, Input<string> id, TokenState? state = null, CustomResourceOptions? options = null)
            : base("netbox:auth/token:Token", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Token resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Token Get(string name, Input<string> id, TokenState? state = null, CustomResourceOptions? options = null)
        {
            return new Token(name, id, state, options);
        }
    }

    public sealed class TokenArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedIps")]
        private InputList<string>? _allowedIps;
        public InputList<string> AllowedIps
        {
            get => _allowedIps ?? (_allowedIps = new InputList<string>());
            set => _allowedIps = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("key")]
        private Input<string>? _key;
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("userId", required: true)]
        public Input<int> UserId { get; set; } = null!;

        [Input("writeEnabled")]
        public Input<bool>? WriteEnabled { get; set; }

        public TokenArgs()
        {
        }
        public static new TokenArgs Empty => new TokenArgs();
    }

    public sealed class TokenState : global::Pulumi.ResourceArgs
    {
        [Input("allowedIps")]
        private InputList<string>? _allowedIps;
        public InputList<string> AllowedIps
        {
            get => _allowedIps ?? (_allowedIps = new InputList<string>());
            set => _allowedIps = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("expires")]
        public Input<string>? Expires { get; set; }

        [Input("key")]
        private Input<string>? _key;
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("lastUsed")]
        public Input<string>? LastUsed { get; set; }

        [Input("userId")]
        public Input<int>? UserId { get; set; }

        [Input("writeEnabled")]
        public Input<bool>? WriteEnabled { get; set; }

        public TokenState()
        {
        }
        public static new TokenState Empty => new TokenState();
    }
}
