// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Dcim
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rearport/):
    /// 
    /// &gt; Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Note that some terraform code is not included in the example for brevity
    ///     var test = new Netbox.Dcim.Device("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///         DeviceTypeId = testNetboxDeviceType.Id,
    ///         RoleId = testNetboxDeviceRole.Id,
    ///         SiteId = testNetboxSite.Id,
    ///     });
    /// 
    ///     var testDeviceRearPort = new Netbox.Dcim.DeviceRearPort("test", new()
    ///     {
    ///         DeviceId = test.Id,
    ///         Name = "rear port 1",
    ///         Type = "8p8c",
    ///         Positions = 2,
    ///         MarkConnected = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:dcim/deviceRearPort:DeviceRearPort")]
    public partial class DeviceRearPort : global::Pulumi.CustomResource
    {
        [Output("colorHex")]
        public Output<string?> ColorHex { get; private set; } = null!;

        [Output("customFields")]
        public Output<ImmutableDictionary<string, string>?> CustomFields { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("deviceId")]
        public Output<int> DeviceId { get; private set; } = null!;

        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Output("markConnected")]
        public Output<bool?> MarkConnected { get; private set; } = null!;

        [Output("moduleId")]
        public Output<int?> ModuleId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("positions")]
        public Output<int> Positions { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceRearPort resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceRearPort(string name, DeviceRearPortArgs args, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceRearPort:DeviceRearPort", name, args ?? new DeviceRearPortArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceRearPort(string name, Input<string> id, DeviceRearPortState? state = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceRearPort:DeviceRearPort", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceRearPort resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceRearPort Get(string name, Input<string> id, DeviceRearPortState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceRearPort(name, id, state, options);
        }
    }

    public sealed class DeviceRearPortArgs : global::Pulumi.ResourceArgs
    {
        [Input("colorHex")]
        public Input<string>? ColorHex { get; set; }

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId", required: true)]
        public Input<int> DeviceId { get; set; } = null!;

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("markConnected")]
        public Input<bool>? MarkConnected { get; set; }

        [Input("moduleId")]
        public Input<int>? ModuleId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("positions", required: true)]
        public Input<int> Positions { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public DeviceRearPortArgs()
        {
        }
        public static new DeviceRearPortArgs Empty => new DeviceRearPortArgs();
    }

    public sealed class DeviceRearPortState : global::Pulumi.ResourceArgs
    {
        [Input("colorHex")]
        public Input<string>? ColorHex { get; set; }

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId")]
        public Input<int>? DeviceId { get; set; }

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("markConnected")]
        public Input<bool>? MarkConnected { get; set; }

        [Input("moduleId")]
        public Input<int>? ModuleId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("positions")]
        public Input<int>? Positions { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DeviceRearPortState()
        {
        }
        public static new DeviceRearPortState Empty => new DeviceRearPortState();
    }
}
