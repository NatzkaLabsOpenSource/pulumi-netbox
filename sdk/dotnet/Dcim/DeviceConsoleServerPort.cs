// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Dcim
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/consoleserverport/):
    /// 
    /// &gt; A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices, and generally connect to console ports.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Note that some terraform code is not included in the example for brevity
    ///     var test = new Netbox.Dcim.Device("test", new()
    ///     {
    ///         Name = "%[1]s",
    ///         DeviceTypeId = testNetboxDeviceType.Id,
    ///         RoleId = testNetboxDeviceRole.Id,
    ///         SiteId = testNetboxSite.Id,
    ///     });
    /// 
    ///     var testDeviceConsoleServerPort = new Netbox.Dcim.DeviceConsoleServerPort("test", new()
    ///     {
    ///         DeviceId = test.Id,
    ///         Name = "console server port",
    ///         Type = "de-9",
    ///         Speed = 1200,
    ///         MarkConnected = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:dcim/deviceConsoleServerPort:DeviceConsoleServerPort")]
    public partial class DeviceConsoleServerPort : global::Pulumi.CustomResource
    {
        [Output("customFields")]
        public Output<ImmutableDictionary<string, string>?> CustomFields { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("deviceId")]
        public Output<int> DeviceId { get; private set; } = null!;

        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Output("markConnected")]
        public Output<bool?> MarkConnected { get; private set; } = null!;

        [Output("moduleId")]
        public Output<int?> ModuleId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
        /// </summary>
        [Output("speed")]
        public Output<int?> Speed { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceConsoleServerPort resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceConsoleServerPort(string name, DeviceConsoleServerPortArgs args, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceConsoleServerPort:DeviceConsoleServerPort", name, args ?? new DeviceConsoleServerPortArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceConsoleServerPort(string name, Input<string> id, DeviceConsoleServerPortState? state = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceConsoleServerPort:DeviceConsoleServerPort", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceConsoleServerPort resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceConsoleServerPort Get(string name, Input<string> id, DeviceConsoleServerPortState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceConsoleServerPort(name, id, state, options);
        }
    }

    public sealed class DeviceConsoleServerPortArgs : global::Pulumi.ResourceArgs
    {
        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId", required: true)]
        public Input<int> DeviceId { get; set; } = null!;

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("markConnected")]
        public Input<bool>? MarkConnected { get; set; }

        [Input("moduleId")]
        public Input<int>? ModuleId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
        /// </summary>
        [Input("speed")]
        public Input<int>? Speed { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DeviceConsoleServerPortArgs()
        {
        }
        public static new DeviceConsoleServerPortArgs Empty => new DeviceConsoleServerPortArgs();
    }

    public sealed class DeviceConsoleServerPortState : global::Pulumi.ResourceArgs
    {
        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId")]
        public Input<int>? DeviceId { get; set; }

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// Defaults to `false`.
        /// </summary>
        [Input("markConnected")]
        public Input<bool>? MarkConnected { get; set; }

        [Input("moduleId")]
        public Input<int>? ModuleId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].
        /// </summary>
        [Input("speed")]
        public Input<int>? Speed { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DeviceConsoleServerPortState()
        {
        }
        public static new DeviceConsoleServerPortState Empty => new DeviceConsoleServerPortState();
    }
}
