// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Dcim
{
    /// <summary>
    /// From the [official documentation](https://netboxlabs.com/docs/netbox/en/stable/models/dcim/racktype/):
    /// 
    /// &gt; A rack type defines the physical characteristics of a particular model of rack.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Dcim.Manufacturer("test", new()
    ///     {
    ///         Name = "my-manufacturer",
    ///     });
    /// 
    ///     var testRackType = new Netbox.Dcim.RackType("test", new()
    ///     {
    ///         Model = "mymodel",
    ///         ManufacturerId = test.Id,
    ///         Width = 19,
    ///         UHeight = 48,
    ///         StartingUnit = 1,
    ///         FormFactor = "2-post-frame",
    ///         Description = "My description",
    ///         OuterWidth = 10,
    ///         OuterDepth = 15,
    ///         OuterUnit = "mm",
    ///         Weight = 15,
    ///         MaxWeight = 20,
    ///         WeightUnit = "kg",
    ///         MountingDepthMm = 21,
    ///         Comments = "My comments",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:dcim/rackType:RackType")]
    public partial class RackType : global::Pulumi.CustomResource
    {
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        /// </summary>
        [Output("formFactor")]
        public Output<string> FormFactor { get; private set; } = null!;

        [Output("manufacturerId")]
        public Output<int?> ManufacturerId { get; private set; } = null!;

        [Output("maxWeight")]
        public Output<int?> MaxWeight { get; private set; } = null!;

        [Output("model")]
        public Output<string> Model { get; private set; } = null!;

        [Output("mountingDepthMm")]
        public Output<int?> MountingDepthMm { get; private set; } = null!;

        [Output("outerDepth")]
        public Output<int?> OuterDepth { get; private set; } = null!;

        /// <summary>
        /// Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        /// </summary>
        [Output("outerUnit")]
        public Output<string?> OuterUnit { get; private set; } = null!;

        [Output("outerWidth")]
        public Output<int?> OuterWidth { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        [Output("startingUnit")]
        public Output<int> StartingUnit { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("uHeight")]
        public Output<int> UHeight { get; private set; } = null!;

        [Output("weight")]
        public Output<double?> Weight { get; private set; } = null!;

        /// <summary>
        /// Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        /// </summary>
        [Output("weightUnit")]
        public Output<string?> WeightUnit { get; private set; } = null!;

        /// <summary>
        /// Valid values are `10`, `19`, `21` and `23`.
        /// </summary>
        [Output("width")]
        public Output<int> Width { get; private set; } = null!;


        /// <summary>
        /// Create a RackType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RackType(string name, RackTypeArgs args, CustomResourceOptions? options = null)
            : base("netbox:dcim/rackType:RackType", name, args ?? new RackTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RackType(string name, Input<string> id, RackTypeState? state = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/rackType:RackType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RackType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RackType Get(string name, Input<string> id, RackTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new RackType(name, id, state, options);
        }
    }

    public sealed class RackTypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        /// </summary>
        [Input("formFactor", required: true)]
        public Input<string> FormFactor { get; set; } = null!;

        [Input("manufacturerId")]
        public Input<int>? ManufacturerId { get; set; }

        [Input("maxWeight")]
        public Input<int>? MaxWeight { get; set; }

        [Input("model", required: true)]
        public Input<string> Model { get; set; } = null!;

        [Input("mountingDepthMm")]
        public Input<int>? MountingDepthMm { get; set; }

        [Input("outerDepth")]
        public Input<int>? OuterDepth { get; set; }

        /// <summary>
        /// Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        /// </summary>
        [Input("outerUnit")]
        public Input<string>? OuterUnit { get; set; }

        [Input("outerWidth")]
        public Input<int>? OuterWidth { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("startingUnit", required: true)]
        public Input<int> StartingUnit { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("uHeight", required: true)]
        public Input<int> UHeight { get; set; } = null!;

        [Input("weight")]
        public Input<double>? Weight { get; set; }

        /// <summary>
        /// Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        /// </summary>
        [Input("weightUnit")]
        public Input<string>? WeightUnit { get; set; }

        /// <summary>
        /// Valid values are `10`, `19`, `21` and `23`.
        /// </summary>
        [Input("width", required: true)]
        public Input<int> Width { get; set; } = null!;

        public RackTypeArgs()
        {
        }
        public static new RackTypeArgs Empty => new RackTypeArgs();
    }

    public sealed class RackTypeState : global::Pulumi.ResourceArgs
    {
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        /// </summary>
        [Input("formFactor")]
        public Input<string>? FormFactor { get; set; }

        [Input("manufacturerId")]
        public Input<int>? ManufacturerId { get; set; }

        [Input("maxWeight")]
        public Input<int>? MaxWeight { get; set; }

        [Input("model")]
        public Input<string>? Model { get; set; }

        [Input("mountingDepthMm")]
        public Input<int>? MountingDepthMm { get; set; }

        [Input("outerDepth")]
        public Input<int>? OuterDepth { get; set; }

        /// <summary>
        /// Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        /// </summary>
        [Input("outerUnit")]
        public Input<string>? OuterUnit { get; set; }

        [Input("outerWidth")]
        public Input<int>? OuterWidth { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("startingUnit")]
        public Input<int>? StartingUnit { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("uHeight")]
        public Input<int>? UHeight { get; set; }

        [Input("weight")]
        public Input<double>? Weight { get; set; }

        /// <summary>
        /// Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        /// </summary>
        [Input("weightUnit")]
        public Input<string>? WeightUnit { get; set; }

        /// <summary>
        /// Valid values are `10`, `19`, `21` and `23`.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public RackTypeState()
        {
        }
        public static new RackTypeState Empty => new RackTypeState();
    }
}
