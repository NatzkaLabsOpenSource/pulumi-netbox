// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Dcim
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#sites):
    /// 
    /// &gt; How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two colocation facilities.
    /// &gt; 
    /// &gt; Each site must be assigned a unique name and may optionally be assigned to a region and/or tenant.
    /// </summary>
    [NetboxResourceType("netbox:dcim/site:Site")]
    public partial class Site : global::Pulumi.CustomResource
    {
        [Output("asnIds")]
        public Output<ImmutableArray<int>> AsnIds { get; private set; } = null!;

        [Output("customFields")]
        public Output<ImmutableDictionary<string, string>?> CustomFields { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("facility")]
        public Output<string?> Facility { get; private set; } = null!;

        [Output("groupId")]
        public Output<int?> GroupId { get; private set; } = null!;

        [Output("latitude")]
        public Output<double?> Latitude { get; private set; } = null!;

        [Output("longitude")]
        public Output<double?> Longitude { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("physicalAddress")]
        public Output<string?> PhysicalAddress { get; private set; } = null!;

        [Output("regionId")]
        public Output<int?> RegionId { get; private set; } = null!;

        [Output("shippingAddress")]
        public Output<string?> ShippingAddress { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("tenantId")]
        public Output<int?> TenantId { get; private set; } = null!;

        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Site resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Site(string name, SiteArgs? args = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/site:Site", name, args ?? new SiteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Site(string name, Input<string> id, SiteState? state = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/site:Site", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Site resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Site Get(string name, Input<string> id, SiteState? state = null, CustomResourceOptions? options = null)
        {
            return new Site(name, id, state, options);
        }
    }

    public sealed class SiteArgs : global::Pulumi.ResourceArgs
    {
        [Input("asnIds")]
        private InputList<int>? _asnIds;
        public InputList<int> AsnIds
        {
            get => _asnIds ?? (_asnIds = new InputList<int>());
            set => _asnIds = value;
        }

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("facility")]
        public Input<string>? Facility { get; set; }

        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalAddress")]
        public Input<string>? PhysicalAddress { get; set; }

        [Input("regionId")]
        public Input<int>? RegionId { get; set; }

        [Input("shippingAddress")]
        public Input<string>? ShippingAddress { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public SiteArgs()
        {
        }
        public static new SiteArgs Empty => new SiteArgs();
    }

    public sealed class SiteState : global::Pulumi.ResourceArgs
    {
        [Input("asnIds")]
        private InputList<int>? _asnIds;
        public InputList<int> AsnIds
        {
            get => _asnIds ?? (_asnIds = new InputList<int>());
            set => _asnIds = value;
        }

        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("facility")]
        public Input<string>? Facility { get; set; }

        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalAddress")]
        public Input<string>? PhysicalAddress { get; set; }

        [Input("regionId")]
        public Input<int>? RegionId { get; set; }

        [Input("shippingAddress")]
        public Input<string>? ShippingAddress { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public SiteState()
        {
        }
        public static new SiteState Empty => new SiteState();
    }
}
