// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Dcim
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):
    /// 
    /// &gt; Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Assumes a device with ID 123 exists
    ///     var test = new Netbox.Dcim.DeviceInterface("test", new()
    ///     {
    ///         Name = "testinterface",
    ///         DeviceId = 123,
    ///         Type = "1000base-t",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:dcim/deviceInterface:DeviceInterface")]
    public partial class DeviceInterface : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("deviceId")]
        public Output<int> DeviceId { get; private set; } = null!;

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("label")]
        public Output<string?> Label { get; private set; } = null!;

        /// <summary>
        /// If this device is a member of a LAG group, you can reference the LAG interface here.
        /// </summary>
        [Output("lagDeviceInterfaceId")]
        public Output<int?> LagDeviceInterfaceId { get; private set; } = null!;

        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        [Output("mgmtonly")]
        public Output<bool?> Mgmtonly { get; private set; } = null!;

        /// <summary>
        /// Valid values are `access`, `tagged` and `tagged-all`.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        /// </summary>
        [Output("parentDeviceInterfaceId")]
        public Output<int?> ParentDeviceInterfaceId { get; private set; } = null!;

        [Output("speed")]
        public Output<int?> Speed { get; private set; } = null!;

        [Output("taggedVlans")]
        public Output<ImmutableArray<int>> TaggedVlans { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("untaggedVlan")]
        public Output<int?> UntaggedVlan { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceInterface(string name, DeviceInterfaceArgs args, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceInterface:DeviceInterface", name, args ?? new DeviceInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceInterface(string name, Input<string> id, DeviceInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("netbox:dcim/deviceInterface:DeviceInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceInterface Get(string name, Input<string> id, DeviceInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceInterface(name, id, state, options);
        }
    }

    public sealed class DeviceInterfaceArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId", required: true)]
        public Input<int> DeviceId { get; set; } = null!;

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// If this device is a member of a LAG group, you can reference the LAG interface here.
        /// </summary>
        [Input("lagDeviceInterfaceId")]
        public Input<int>? LagDeviceInterfaceId { get; set; }

        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        [Input("mgmtonly")]
        public Input<bool>? Mgmtonly { get; set; }

        /// <summary>
        /// Valid values are `access`, `tagged` and `tagged-all`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        /// </summary>
        [Input("parentDeviceInterfaceId")]
        public Input<int>? ParentDeviceInterfaceId { get; set; }

        [Input("speed")]
        public Input<int>? Speed { get; set; }

        [Input("taggedVlans")]
        private InputList<int>? _taggedVlans;
        public InputList<int> TaggedVlans
        {
            get => _taggedVlans ?? (_taggedVlans = new InputList<int>());
            set => _taggedVlans = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("untaggedVlan")]
        public Input<int>? UntaggedVlan { get; set; }

        public DeviceInterfaceArgs()
        {
        }
        public static new DeviceInterfaceArgs Empty => new DeviceInterfaceArgs();
    }

    public sealed class DeviceInterfaceState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceId")]
        public Input<int>? DeviceId { get; set; }

        /// <summary>
        /// Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// If this device is a member of a LAG group, you can reference the LAG interface here.
        /// </summary>
        [Input("lagDeviceInterfaceId")]
        public Input<int>? LagDeviceInterfaceId { get; set; }

        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        [Input("mgmtonly")]
        public Input<bool>? Mgmtonly { get; set; }

        /// <summary>
        /// Valid values are `access`, `tagged` and `tagged-all`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        /// </summary>
        [Input("parentDeviceInterfaceId")]
        public Input<int>? ParentDeviceInterfaceId { get; set; }

        [Input("speed")]
        public Input<int>? Speed { get; set; }

        [Input("taggedVlans")]
        private InputList<int>? _taggedVlans;
        public InputList<int> TaggedVlans
        {
            get => _taggedVlans ?? (_taggedVlans = new InputList<int>());
            set => _taggedVlans = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("untaggedVlan")]
        public Input<int>? UntaggedVlan { get; set; }

        public DeviceInterfaceState()
        {
        }
        public static new DeviceInterfaceState Empty => new DeviceInterfaceState();
    }
}
