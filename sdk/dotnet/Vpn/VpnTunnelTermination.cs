// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Vpn
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):
    /// 
    /// &gt; NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Netbox.Vpn.VpnTunnelGroup("test", new()
    ///     {
    ///         Name = "my-tunnel-group",
    ///         Description = "description",
    ///     });
    /// 
    ///     var testVpnTunnel = new Netbox.Vpn.VpnTunnel("test", new()
    ///     {
    ///         Name = "my-tunnel",
    ///         Encapsulation = "ipsec-transport",
    ///         Status = "active",
    ///         TunnelGroupId = test.Id,
    ///     });
    /// 
    ///     var device = new Netbox.Vpn.VpnTunnelTermination("device", new()
    ///     {
    ///         Role = "peer",
    ///         TunnelId = testVpnTunnel.Id,
    ///         DeviceInterfaceId = 123,
    ///     });
    /// 
    ///     var vm = new Netbox.Vpn.VpnTunnelTermination("vm", new()
    ///     {
    ///         Role = "peer",
    ///         TunnelId = testVpnTunnel.Id,
    ///         VirtualMachineInterfaceId = 234,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:vpn/vpnTunnelTermination:VpnTunnelTermination")]
    public partial class VpnTunnelTermination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Output("deviceInterfaceId")]
        public Output<int?> DeviceInterfaceId { get; private set; } = null!;

        [Output("outsideIpAddressId")]
        public Output<int?> OutsideIpAddressId { get; private set; } = null!;

        /// <summary>
        /// Valid values are `peer`, `hub` and `spoke`.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("tunnelId")]
        public Output<int> TunnelId { get; private set; } = null!;

        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Output("virtualMachineInterfaceId")]
        public Output<int?> VirtualMachineInterfaceId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnTunnelTermination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnTunnelTermination(string name, VpnTunnelTerminationArgs args, CustomResourceOptions? options = null)
            : base("netbox:vpn/vpnTunnelTermination:VpnTunnelTermination", name, args ?? new VpnTunnelTerminationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnTunnelTermination(string name, Input<string> id, VpnTunnelTerminationState? state = null, CustomResourceOptions? options = null)
            : base("netbox:vpn/vpnTunnelTermination:VpnTunnelTermination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnTunnelTermination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnTunnelTermination Get(string name, Input<string> id, VpnTunnelTerminationState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnTunnelTermination(name, id, state, options);
        }
    }

    public sealed class VpnTunnelTerminationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Input("deviceInterfaceId")]
        public Input<int>? DeviceInterfaceId { get; set; }

        [Input("outsideIpAddressId")]
        public Input<int>? OutsideIpAddressId { get; set; }

        /// <summary>
        /// Valid values are `peer`, `hub` and `spoke`.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tunnelId", required: true)]
        public Input<int> TunnelId { get; set; } = null!;

        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Input("virtualMachineInterfaceId")]
        public Input<int>? VirtualMachineInterfaceId { get; set; }

        public VpnTunnelTerminationArgs()
        {
        }
        public static new VpnTunnelTerminationArgs Empty => new VpnTunnelTerminationArgs();
    }

    public sealed class VpnTunnelTerminationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Input("deviceInterfaceId")]
        public Input<int>? DeviceInterfaceId { get; set; }

        [Input("outsideIpAddressId")]
        public Input<int>? OutsideIpAddressId { get; set; }

        /// <summary>
        /// Valid values are `peer`, `hub` and `spoke`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tunnelId")]
        public Input<int>? TunnelId { get; set; }

        /// <summary>
        /// Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        /// </summary>
        [Input("virtualMachineInterfaceId")]
        public Input<int>? VirtualMachineInterfaceId { get; set; }

        public VpnTunnelTerminationState()
        {
        }
        public static new VpnTunnelTerminationState Empty => new VpnTunnelTerminationState();
    }
}
