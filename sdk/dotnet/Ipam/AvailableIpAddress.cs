// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Ipam
{
    /// <summary>
    /// Per [the docs](https://netbox.readthedocs.io/en/stable/models/ipam/ipaddress/):
    /// 
    /// &gt; An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.
    /// Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchya.
    /// &gt; 
    /// &gt; Each IP address can also be assigned an operational status and a functional role. Statuses are hard-coded in NetBox and include the following:
    /// &gt; * Active
    /// &gt; * Reserved
    /// &gt; * Deprecated
    /// &gt; * DHCP
    /// &gt; * SLAAC (IPv6 Stateless Address Autoconfiguration)
    /// 
    /// This resource will retrieve the next available IP address from a given prefix or IP range (specified by ID)
    /// 
    /// ## Example Usage
    /// 
    /// ### Creating an IP in a prefix
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = Netbox.Ipam.GetPrefix.Invoke(new()
    ///     {
    ///         Cidr = "10.0.0.0/24",
    ///     });
    /// 
    ///     var testAvailableIpAddress = new Netbox.Ipam.AvailableIpAddress("test", new()
    ///     {
    ///         PrefixId = test.Apply(getPrefixResult =&gt; getPrefixResult.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:ipam/availableIpAddress:AvailableIpAddress")]
    public partial class AvailableIpAddress : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Conflicts with `interface_id` and `virtual_machine_interface_id`.
        /// </summary>
        [Output("deviceInterfaceId")]
        public Output<int?> DeviceInterfaceId { get; private set; } = null!;

        [Output("dnsName")]
        public Output<string?> DnsName { get; private set; } = null!;

        /// <summary>
        /// Required when `object_type` is set.
        /// </summary>
        [Output("interfaceId")]
        public Output<int?> InterfaceId { get; private set; } = null!;

        [Output("ipAddress")]
        public Output<string> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Output("ipRangeId")]
        public Output<int?> IpRangeId { get; private set; } = null!;

        /// <summary>
        /// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        /// </summary>
        [Output("objectType")]
        public Output<string?> ObjectType { get; private set; } = null!;

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Output("prefixId")]
        public Output<int?> PrefixId { get; private set; } = null!;

        /// <summary>
        /// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("tenantId")]
        public Output<int?> TenantId { get; private set; } = null!;

        /// <summary>
        /// Conflicts with `interface_id` and `device_interface_id`.
        /// </summary>
        [Output("virtualMachineInterfaceId")]
        public Output<int?> VirtualMachineInterfaceId { get; private set; } = null!;

        [Output("vrfId")]
        public Output<int?> VrfId { get; private set; } = null!;


        /// <summary>
        /// Create a AvailableIpAddress resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AvailableIpAddress(string name, AvailableIpAddressArgs? args = null, CustomResourceOptions? options = null)
            : base("netbox:ipam/availableIpAddress:AvailableIpAddress", name, args ?? new AvailableIpAddressArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AvailableIpAddress(string name, Input<string> id, AvailableIpAddressState? state = null, CustomResourceOptions? options = null)
            : base("netbox:ipam/availableIpAddress:AvailableIpAddress", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AvailableIpAddress resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AvailableIpAddress Get(string name, Input<string> id, AvailableIpAddressState? state = null, CustomResourceOptions? options = null)
        {
            return new AvailableIpAddress(name, id, state, options);
        }
    }

    public sealed class AvailableIpAddressArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Conflicts with `interface_id` and `virtual_machine_interface_id`.
        /// </summary>
        [Input("deviceInterfaceId")]
        public Input<int>? DeviceInterfaceId { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// Required when `object_type` is set.
        /// </summary>
        [Input("interfaceId")]
        public Input<int>? InterfaceId { get; set; }

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Input("ipRangeId")]
        public Input<int>? IpRangeId { get; set; }

        /// <summary>
        /// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Input("prefixId")]
        public Input<int>? PrefixId { get; set; }

        /// <summary>
        /// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        /// <summary>
        /// Conflicts with `interface_id` and `device_interface_id`.
        /// </summary>
        [Input("virtualMachineInterfaceId")]
        public Input<int>? VirtualMachineInterfaceId { get; set; }

        [Input("vrfId")]
        public Input<int>? VrfId { get; set; }

        public AvailableIpAddressArgs()
        {
        }
        public static new AvailableIpAddressArgs Empty => new AvailableIpAddressArgs();
    }

    public sealed class AvailableIpAddressState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Conflicts with `interface_id` and `virtual_machine_interface_id`.
        /// </summary>
        [Input("deviceInterfaceId")]
        public Input<int>? DeviceInterfaceId { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// Required when `object_type` is set.
        /// </summary>
        [Input("interfaceId")]
        public Input<int>? InterfaceId { get; set; }

        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Input("ipRangeId")]
        public Input<int>? IpRangeId { get; set; }

        /// <summary>
        /// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        /// </summary>
        [Input("objectType")]
        public Input<string>? ObjectType { get; set; }

        /// <summary>
        /// Exactly one of `prefix_id` or `ip_range_id` must be given.
        /// </summary>
        [Input("prefixId")]
        public Input<int>? PrefixId { get; set; }

        /// <summary>
        /// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("tenantId")]
        public Input<int>? TenantId { get; set; }

        /// <summary>
        /// Conflicts with `interface_id` and `device_interface_id`.
        /// </summary>
        [Input("virtualMachineInterfaceId")]
        public Input<int>? VirtualMachineInterfaceId { get; set; }

        [Input("vrfId")]
        public Input<int>? VrfId { get; set; }

        public AvailableIpAddressState()
        {
        }
        public static new AvailableIpAddressState Empty => new AvailableIpAddressState();
    }
}
