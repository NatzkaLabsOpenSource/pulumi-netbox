// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Ipam
{
    public static class GetVlanGroup
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get VLAN group by name
        ///     var example1 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example1",
        ///     });
        /// 
        ///     // Get VLAN group by stub
        ///     var example2 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Slug = "example2",
        ///     });
        /// 
        ///     // Get VLAN group by name and scope_type/id
        ///     var example3 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ScopeType = "dcim.site",
        ///         ScopeId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVlanGroupResult> InvokeAsync(GetVlanGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVlanGroupResult>("netbox:ipam/getVlanGroup:getVlanGroup", args ?? new GetVlanGroupArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get VLAN group by name
        ///     var example1 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example1",
        ///     });
        /// 
        ///     // Get VLAN group by stub
        ///     var example2 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Slug = "example2",
        ///     });
        /// 
        ///     // Get VLAN group by name and scope_type/id
        ///     var example3 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ScopeType = "dcim.site",
        ///         ScopeId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanGroupResult> Invoke(GetVlanGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanGroupResult>("netbox:ipam/getVlanGroup:getVlanGroup", args ?? new GetVlanGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get VLAN group by name
        ///     var example1 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example1",
        ///     });
        /// 
        ///     // Get VLAN group by stub
        ///     var example2 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Slug = "example2",
        ///     });
        /// 
        ///     // Get VLAN group by name and scope_type/id
        ///     var example3 = Netbox.Ipam.GetVlanGroup.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         ScopeType = "dcim.site",
        ///         ScopeId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVlanGroupResult> Invoke(GetVlanGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanGroupResult>("netbox:ipam/getVlanGroup:getVlanGroup", args ?? new GetVlanGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVlanGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Required when `scope_type` is set.
        /// </summary>
        [Input("scopeId")]
        public int? ScopeId { get; set; }

        /// <summary>
        /// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("scopeType")]
        public string? ScopeType { get; set; }

        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        public GetVlanGroupArgs()
        {
        }
        public static new GetVlanGroupArgs Empty => new GetVlanGroupArgs();
    }

    public sealed class GetVlanGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Required when `scope_type` is set.
        /// </summary>
        [Input("scopeId")]
        public Input<int>? ScopeId { get; set; }

        /// <summary>
        /// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("scopeType")]
        public Input<string>? ScopeType { get; set; }

        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetVlanGroupInvokeArgs()
        {
        }
        public static new GetVlanGroupInvokeArgs Empty => new GetVlanGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetVlanGroupResult
    {
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Required when `scope_type` is set.
        /// </summary>
        public readonly int? ScopeId;
        /// <summary>
        /// Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        public readonly string? ScopeType;
        /// <summary>
        /// At least one of `name`, `slug` or `scope_type` must be given.
        /// </summary>
        public readonly string Slug;
        public readonly int VlanCount;

        [OutputConstructor]
        private GetVlanGroupResult(
            string description,

            string id,

            string name,

            int? scopeId,

            string? scopeType,

            string slug,

            int vlanCount)
        {
            Description = description;
            Id = id;
            Name = name;
            ScopeId = scopeId;
            ScopeType = scopeType;
            Slug = slug;
            VlanCount = vlanCount;
        }
    }
}
