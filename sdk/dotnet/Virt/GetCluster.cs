// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Virt
{
    public static class GetCluster
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmwCluster01 = Netbox.Virt.GetCluster.Invoke(new()
        ///     {
        ///         Name = "vmw-cluster-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("netbox:virt/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmwCluster01 = Netbox.Virt.GetCluster.Invoke(new()
        ///     {
        ///         Name = "vmw-cluster-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("netbox:virt/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Netbox = Pulumi.Netbox;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmwCluster01 = Netbox.Virt.GetCluster.Invoke(new()
        ///     {
        ///         Name = "vmw-cluster-01",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("netbox:virt/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterGroupId")]
        public int? ClusterGroupId { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("siteId")]
        public int? SiteId { get; set; }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterGroupId")]
        public Input<int>? ClusterGroupId { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        [Input("siteId")]
        public Input<int>? SiteId { get; set; }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly int ClusterGroupId;
        public readonly int ClusterId;
        public readonly int ClusterTypeId;
        public readonly string Comments;
        public readonly ImmutableDictionary<string, string> CustomFields;
        public readonly string Description;
        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// At least one of `name`, `site_id` or `id` must be given.
        /// </summary>
        public readonly int SiteId;
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetClusterResult(
            int clusterGroupId,

            int clusterId,

            int clusterTypeId,

            string comments,

            ImmutableDictionary<string, string> customFields,

            string description,

            string id,

            string? name,

            int siteId,

            ImmutableArray<string> tags)
        {
            ClusterGroupId = clusterGroupId;
            ClusterId = clusterId;
            ClusterTypeId = clusterTypeId;
            Comments = comments;
            CustomFields = customFields;
            Description = description;
            Id = id;
            Name = name;
            SiteId = siteId;
            Tags = tags;
        }
    }
}
