// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Netbox.Virt
{
    /// <summary>
    /// From the [official documentation](https://docs.netbox.dev/en/stable/models/virtualization/virtualdisk/):
    /// 
    ///         &gt; A virtual disk is used to model discrete virtual hard disks assigned to virtual machines.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Netbox = Pulumi.Netbox;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Assumes vmw-cluster-01 exists in Netbox
    ///     var vmwCluster01 = Netbox.Virt.GetCluster.Invoke(new()
    ///     {
    ///         Name = "vmw-cluster-01",
    ///     });
    /// 
    ///     var baseVm = new Netbox.Virt.VirtualMachine("base_vm", new()
    ///     {
    ///         ClusterId = vmwCluster01.Apply(getClusterResult =&gt; getClusterResult.Id),
    ///         Name = "myvm-1",
    ///     });
    /// 
    ///     var example = new Netbox.Virt.VirtualDisk("example", new()
    ///     {
    ///         Name = "disk-01",
    ///         Description = "Main disk",
    ///         SizeMb = 50,
    ///         VirtualMachineId = baseVm.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [NetboxResourceType("netbox:virt/virtualDisk:VirtualDisk")]
    public partial class VirtualDisk : global::Pulumi.CustomResource
    {
        [Output("customFields")]
        public Output<ImmutableDictionary<string, string>?> CustomFields { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("sizeMb")]
        public Output<int> SizeMb { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        [Output("virtualMachineId")]
        public Output<int> VirtualMachineId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualDisk resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualDisk(string name, VirtualDiskArgs args, CustomResourceOptions? options = null)
            : base("netbox:virt/virtualDisk:VirtualDisk", name, args ?? new VirtualDiskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualDisk(string name, Input<string> id, VirtualDiskState? state = null, CustomResourceOptions? options = null)
            : base("netbox:virt/virtualDisk:VirtualDisk", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/NatzkaLabsOpenSource/pulumi-netbox",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualDisk resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualDisk Get(string name, Input<string> id, VirtualDiskState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualDisk(name, id, state, options);
        }
    }

    public sealed class VirtualDiskArgs : global::Pulumi.ResourceArgs
    {
        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("sizeMb", required: true)]
        public Input<int> SizeMb { get; set; } = null!;

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("virtualMachineId", required: true)]
        public Input<int> VirtualMachineId { get; set; } = null!;

        public VirtualDiskArgs()
        {
        }
        public static new VirtualDiskArgs Empty => new VirtualDiskArgs();
    }

    public sealed class VirtualDiskState : global::Pulumi.ResourceArgs
    {
        [Input("customFields")]
        private InputMap<string>? _customFields;
        public InputMap<string> CustomFields
        {
            get => _customFields ?? (_customFields = new InputMap<string>());
            set => _customFields = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("sizeMb")]
        public Input<int>? SizeMb { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("virtualMachineId")]
        public Input<int>? VirtualMachineId { get; set; }

        public VirtualDiskState()
        {
        }
        public static new VirtualDiskState Empty => new VirtualDiskState();
    }
}
