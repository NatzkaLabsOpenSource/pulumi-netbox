# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['MacAddressArgs', 'MacAddress']

@pulumi.input_type
class MacAddressArgs:
    def __init__(__self__, *,
                 mac_address: pulumi.Input[_builtins.str],
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 object_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a MacAddress resource.
        :param pulumi.Input[_builtins.int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[_builtins.int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[_builtins.str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[_builtins.int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        pulumi.set(__self__, "mac_address", mac_address)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_id", value)

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)


@pulumi.input_type
class _MacAddressState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 object_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering MacAddress resources.
        :param pulumi.Input[_builtins.int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[_builtins.int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[_builtins.str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[_builtins.int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "interface_id", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "object_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)


@pulumi.type_token("netbox:index/macAddress:MacAddress")
class MacAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 object_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://netboxlabs.com/docs/netbox/models/dcim/macaddress/):

        > A MAC address object in NetBox comprises a single Ethernet link layer address, and represents a MAC address as reported by or assigned to a network interface. MAC addresses can be assigned to device and virtual machine interfaces. A MAC address can be specified as the primary MAC address for a given device or VM interface.

        ## Example Usage

        ### Creating a MAC address that is assigned to a virtual machine interface

        With `virtual_machine_interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this = netbox.virt.Interface("this",
            name="eth0",
            virtual_machine_id=123)
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            virtual_machine_interface_id=this.id)
        ```

        With `object_type` and `interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this = netbox.virt.Interface("this",
            name="eth0",
            virtual_machine_id=123)
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            interface_id=this.id,
            object_type="virtualization.vminterface")
        ```

        ### Creating a MAC address that is assigned to a device interface

        With `device_interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this = netbox.dcim.DeviceInterface("this",
            name="eth0",
            device_id=123,
            type="1000base-t")
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            device_interface_id=this.id)
        ```

        With `object_type` and `interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this = netbox.dcim.DeviceInterface("this",
            name="eth0",
            device_id=123,
            type="1000base-t")
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            interface_id=this.id,
            object_type="dcim.interface")
        ```

        ### Creating a MAC address that is not assigned to anything

        You can create a MAC address that is not assigned to anything by omitting the attributes mentioned above.

        ```python
        import pulumi
        import pulumi_netbox as netbox

        this = netbox.MacAddress("this", mac_address="00:1A:2B:3C:4D:5E")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[_builtins.int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[_builtins.str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[_builtins.int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MacAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://netboxlabs.com/docs/netbox/models/dcim/macaddress/):

        > A MAC address object in NetBox comprises a single Ethernet link layer address, and represents a MAC address as reported by or assigned to a network interface. MAC addresses can be assigned to device and virtual machine interfaces. A MAC address can be specified as the primary MAC address for a given device or VM interface.

        ## Example Usage

        ### Creating a MAC address that is assigned to a virtual machine interface

        With `virtual_machine_interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this = netbox.virt.Interface("this",
            name="eth0",
            virtual_machine_id=123)
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            virtual_machine_interface_id=this.id)
        ```

        With `object_type` and `interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this = netbox.virt.Interface("this",
            name="eth0",
            virtual_machine_id=123)
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            interface_id=this.id,
            object_type="virtualization.vminterface")
        ```

        ### Creating a MAC address that is assigned to a device interface

        With `device_interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this = netbox.dcim.DeviceInterface("this",
            name="eth0",
            device_id=123,
            type="1000base-t")
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            device_interface_id=this.id)
        ```

        With `object_type` and `interface_id`:
        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this = netbox.dcim.DeviceInterface("this",
            name="eth0",
            device_id=123,
            type="1000base-t")
        this_mac_address = netbox.MacAddress("this",
            mac_address="00:1A:2B:3C:4D:5E",
            interface_id=this.id,
            object_type="dcim.interface")
        ```

        ### Creating a MAC address that is not assigned to anything

        You can create a MAC address that is not assigned to anything by omitting the attributes mentioned above.

        ```python
        import pulumi
        import pulumi_netbox as netbox

        this = netbox.MacAddress("this", mac_address="00:1A:2B:3C:4D:5E")
        ```

        :param str resource_name: The name of the resource.
        :param MacAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MacAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 object_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MacAddressArgs.__new__(MacAddressArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["device_interface_id"] = device_interface_id
            __props__.__dict__["interface_id"] = interface_id
            if mac_address is None and not opts.urn:
                raise TypeError("Missing required property 'mac_address'")
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["object_type"] = object_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
            __props__.__dict__["tags_alls"] = None
        super(MacAddress, __self__).__init__(
            'netbox:index/macAddress:MacAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[_builtins.str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
            interface_id: Optional[pulumi.Input[_builtins.int]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            object_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            virtual_machine_interface_id: Optional[pulumi.Input[_builtins.int]] = None) -> 'MacAddress':
        """
        Get an existing MacAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[_builtins.int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[_builtins.str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[_builtins.int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MacAddressState.__new__(_MacAddressState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["device_interface_id"] = device_interface_id
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["object_type"] = object_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
        return MacAddress(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @_builtins.property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

