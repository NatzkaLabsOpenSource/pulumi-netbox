# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVlanGroupResult',
    'AwaitableGetVlanGroupResult',
    'get_vlan_group',
    'get_vlan_group_output',
]

@pulumi.output_type
class GetVlanGroupResult:
    """
    A collection of values returned by getVlanGroup.
    """
    def __init__(__self__, description=None, id=None, name=None, scope_id=None, scope_type=None, slug=None, vlan_count=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scope_id and not isinstance(scope_id, int):
            raise TypeError("Expected argument 'scope_id' to be a int")
        pulumi.set(__self__, "scope_id", scope_id)
        if scope_type and not isinstance(scope_type, str):
            raise TypeError("Expected argument 'scope_type' to be a str")
        pulumi.set(__self__, "scope_type", scope_type)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if vlan_count and not isinstance(vlan_count, int):
            raise TypeError("Expected argument 'vlan_count' to be a int")
        pulumi.set(__self__, "vlan_count", vlan_count)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        At least one of `name`, `slug` or `scope_type` must be given.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[_builtins.int]:
        """
        Required when `scope_type` is set.
        """
        return pulumi.get(self, "scope_id")

    @_builtins.property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[_builtins.str]:
        """
        Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
        """
        return pulumi.get(self, "scope_type")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        At least one of `name`, `slug` or `scope_type` must be given.
        """
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="vlanCount")
    def vlan_count(self) -> _builtins.int:
        return pulumi.get(self, "vlan_count")


class AwaitableGetVlanGroupResult(GetVlanGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVlanGroupResult(
            description=self.description,
            id=self.id,
            name=self.name,
            scope_id=self.scope_id,
            scope_type=self.scope_type,
            slug=self.slug,
            vlan_count=self.vlan_count)


def get_vlan_group(name: Optional[_builtins.str] = None,
                   scope_id: Optional[_builtins.int] = None,
                   scope_type: Optional[_builtins.str] = None,
                   slug: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVlanGroupResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    # Get VLAN group by name
    example1 = netbox.ipam.get_vlan_group(name="example1")
    # Get VLAN group by stub
    example2 = netbox.ipam.get_vlan_group(slug="example2")
    # Get VLAN group by name and scope_type/id
    example3 = netbox.ipam.get_vlan_group(name="example",
        scope_type="dcim.site",
        scope_id=example["id"])
    ```


    :param _builtins.str name: At least one of `name`, `slug` or `scope_type` must be given.
    :param _builtins.int scope_id: Required when `scope_type` is set.
    :param _builtins.str scope_type: Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
    :param _builtins.str slug: At least one of `name`, `slug` or `scope_type` must be given.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    __args__['scopeType'] = scope_type
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:ipam/getVlanGroup:getVlanGroup', __args__, opts=opts, typ=GetVlanGroupResult).value

    return AwaitableGetVlanGroupResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        scope_id=pulumi.get(__ret__, 'scope_id'),
        scope_type=pulumi.get(__ret__, 'scope_type'),
        slug=pulumi.get(__ret__, 'slug'),
        vlan_count=pulumi.get(__ret__, 'vlan_count'))
def get_vlan_group_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          scope_id: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                          scope_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVlanGroupResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    # Get VLAN group by name
    example1 = netbox.ipam.get_vlan_group(name="example1")
    # Get VLAN group by stub
    example2 = netbox.ipam.get_vlan_group(slug="example2")
    # Get VLAN group by name and scope_type/id
    example3 = netbox.ipam.get_vlan_group(name="example",
        scope_type="dcim.site",
        scope_id=example["id"])
    ```


    :param _builtins.str name: At least one of `name`, `slug` or `scope_type` must be given.
    :param _builtins.int scope_id: Required when `scope_type` is set.
    :param _builtins.str scope_type: Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`. At least one of `name`, `slug` or `scope_type` must be given.
    :param _builtins.str slug: At least one of `name`, `slug` or `scope_type` must be given.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['scopeId'] = scope_id
    __args__['scopeType'] = scope_type
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:ipam/getVlanGroup:getVlanGroup', __args__, opts=opts, typ=GetVlanGroupResult)
    return __ret__.apply(lambda __response__: GetVlanGroupResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        scope_id=pulumi.get(__response__, 'scope_id'),
        scope_type=pulumi.get(__response__, 'scope_type'),
        slug=pulumi.get(__response__, 'slug'),
        vlan_count=pulumi.get(__response__, 'vlan_count')))
