# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPrefixResult',
    'AwaitableGetPrefixResult',
    'get_prefix',
    'get_prefix_output',
]

@pulumi.output_type
class GetPrefixResult:
    """
    A collection of values returned by getPrefix.
    """
    def __init__(__self__, cidr=None, custom_fields=None, description=None, family=None, id=None, prefix=None, role_id=None, site_id=None, status=None, tag=None, tag_n=None, tags=None, tenant_id=None, vlan_id=None, vlan_vid=None, vrf_id=None):
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if custom_fields and not isinstance(custom_fields, dict):
            raise TypeError("Expected argument 'custom_fields' to be a dict")
        pulumi.set(__self__, "custom_fields", custom_fields)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if family and not isinstance(family, int):
            raise TypeError("Expected argument 'family' to be a int")
        pulumi.set(__self__, "family", family)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if role_id and not isinstance(role_id, int):
            raise TypeError("Expected argument 'role_id' to be a int")
        pulumi.set(__self__, "role_id", role_id)
        if site_id and not isinstance(site_id, int):
            raise TypeError("Expected argument 'site_id' to be a int")
        pulumi.set(__self__, "site_id", site_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if tag_n and not isinstance(tag_n, str):
            raise TypeError("Expected argument 'tag_n' to be a str")
        pulumi.set(__self__, "tag_n", tag_n)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_id and not isinstance(tenant_id, int):
            raise TypeError("Expected argument 'tenant_id' to be a int")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)
        if vlan_vid and not isinstance(vlan_vid, float):
            raise TypeError("Expected argument 'vlan_vid' to be a float")
        pulumi.set(__self__, "vlan_vid", vlan_vid)
        if vrf_id and not isinstance(vrf_id, int):
            raise TypeError("Expected argument 'vrf_id' to be a int")
        pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    @_utilities.deprecated("""The `cidr` parameter is deprecated in favor of the canonical `prefix` attribute.""")
    def cidr(self) -> Optional[str]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `prefix`.
        """
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description to include in the data source filter. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def family(self) -> int:
        """
        The IP family of the prefix. One of 4 or 6. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `cidr`.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[int]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Tag to include in the data source filter (must match the tag's slug). At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="tagN")
    def tag_n(self) -> Optional[str]:
        """
        Tag to exclude from the data source filter (must match the tag's slug).
        Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
        for more information on available lookup expressions.
        """
        return pulumi.get(self, "tag_n")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[int]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[int]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanVid")
    def vlan_vid(self) -> Optional[float]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "vlan_vid")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[int]:
        """
        At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
        """
        return pulumi.get(self, "vrf_id")


class AwaitableGetPrefixResult(GetPrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrefixResult(
            cidr=self.cidr,
            custom_fields=self.custom_fields,
            description=self.description,
            family=self.family,
            id=self.id,
            prefix=self.prefix,
            role_id=self.role_id,
            site_id=self.site_id,
            status=self.status,
            tag=self.tag,
            tag_n=self.tag_n,
            tags=self.tags,
            tenant_id=self.tenant_id,
            vlan_id=self.vlan_id,
            vlan_vid=self.vlan_vid,
            vrf_id=self.vrf_id)


def get_prefix(cidr: Optional[str] = None,
               custom_fields: Optional[Mapping[str, str]] = None,
               description: Optional[str] = None,
               family: Optional[int] = None,
               prefix: Optional[str] = None,
               role_id: Optional[int] = None,
               site_id: Optional[int] = None,
               status: Optional[str] = None,
               tag: Optional[str] = None,
               tag_n: Optional[str] = None,
               tenant_id: Optional[int] = None,
               vlan_id: Optional[int] = None,
               vlan_vid: Optional[float] = None,
               vrf_id: Optional[int] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrefixResult:
    """
    Use this data source to access information about an existing resource.

    :param str cidr: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `prefix`.
    :param str description: Description to include in the data source filter. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int family: The IP family of the prefix. One of 4 or 6. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str prefix: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `cidr`.
    :param int role_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int site_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str status: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str tag: Tag to include in the data source filter (must match the tag's slug). At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str tag_n: Tag to exclude from the data source filter (must match the tag's slug).
           Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
           for more information on available lookup expressions.
    :param int tenant_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int vlan_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param float vlan_vid: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int vrf_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['customFields'] = custom_fields
    __args__['description'] = description
    __args__['family'] = family
    __args__['prefix'] = prefix
    __args__['roleId'] = role_id
    __args__['siteId'] = site_id
    __args__['status'] = status
    __args__['tag'] = tag
    __args__['tagN'] = tag_n
    __args__['tenantId'] = tenant_id
    __args__['vlanId'] = vlan_id
    __args__['vlanVid'] = vlan_vid
    __args__['vrfId'] = vrf_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:ipam/getPrefix:getPrefix', __args__, opts=opts, typ=GetPrefixResult).value

    return AwaitableGetPrefixResult(
        cidr=pulumi.get(__ret__, 'cidr'),
        custom_fields=pulumi.get(__ret__, 'custom_fields'),
        description=pulumi.get(__ret__, 'description'),
        family=pulumi.get(__ret__, 'family'),
        id=pulumi.get(__ret__, 'id'),
        prefix=pulumi.get(__ret__, 'prefix'),
        role_id=pulumi.get(__ret__, 'role_id'),
        site_id=pulumi.get(__ret__, 'site_id'),
        status=pulumi.get(__ret__, 'status'),
        tag=pulumi.get(__ret__, 'tag'),
        tag_n=pulumi.get(__ret__, 'tag_n'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'),
        vlan_vid=pulumi.get(__ret__, 'vlan_vid'),
        vrf_id=pulumi.get(__ret__, 'vrf_id'))
def get_prefix_output(cidr: Optional[pulumi.Input[Optional[str]]] = None,
                      custom_fields: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                      description: Optional[pulumi.Input[Optional[str]]] = None,
                      family: Optional[pulumi.Input[Optional[int]]] = None,
                      prefix: Optional[pulumi.Input[Optional[str]]] = None,
                      role_id: Optional[pulumi.Input[Optional[int]]] = None,
                      site_id: Optional[pulumi.Input[Optional[int]]] = None,
                      status: Optional[pulumi.Input[Optional[str]]] = None,
                      tag: Optional[pulumi.Input[Optional[str]]] = None,
                      tag_n: Optional[pulumi.Input[Optional[str]]] = None,
                      tenant_id: Optional[pulumi.Input[Optional[int]]] = None,
                      vlan_id: Optional[pulumi.Input[Optional[int]]] = None,
                      vlan_vid: Optional[pulumi.Input[Optional[float]]] = None,
                      vrf_id: Optional[pulumi.Input[Optional[int]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrefixResult]:
    """
    Use this data source to access information about an existing resource.

    :param str cidr: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `prefix`.
    :param str description: Description to include in the data source filter. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int family: The IP family of the prefix. One of 4 or 6. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str prefix: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given. Conflicts with `cidr`.
    :param int role_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int site_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str status: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str tag: Tag to include in the data source filter (must match the tag's slug). At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param str tag_n: Tag to exclude from the data source filter (must match the tag's slug).
           Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
           for more information on available lookup expressions.
    :param int tenant_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int vlan_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param float vlan_vid: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    :param int vrf_id: At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `tenant_id`, `site_id`, `role_id`, `cidr`, `tag` or `status` must be given.
    """
    __args__ = dict()
    __args__['cidr'] = cidr
    __args__['customFields'] = custom_fields
    __args__['description'] = description
    __args__['family'] = family
    __args__['prefix'] = prefix
    __args__['roleId'] = role_id
    __args__['siteId'] = site_id
    __args__['status'] = status
    __args__['tag'] = tag
    __args__['tagN'] = tag_n
    __args__['tenantId'] = tenant_id
    __args__['vlanId'] = vlan_id
    __args__['vlanVid'] = vlan_vid
    __args__['vrfId'] = vrf_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:ipam/getPrefix:getPrefix', __args__, opts=opts, typ=GetPrefixResult)
    return __ret__.apply(lambda __response__: GetPrefixResult(
        cidr=pulumi.get(__response__, 'cidr'),
        custom_fields=pulumi.get(__response__, 'custom_fields'),
        description=pulumi.get(__response__, 'description'),
        family=pulumi.get(__response__, 'family'),
        id=pulumi.get(__response__, 'id'),
        prefix=pulumi.get(__response__, 'prefix'),
        role_id=pulumi.get(__response__, 'role_id'),
        site_id=pulumi.get(__response__, 'site_id'),
        status=pulumi.get(__response__, 'status'),
        tag=pulumi.get(__response__, 'tag'),
        tag_n=pulumi.get(__response__, 'tag_n'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        vlan_id=pulumi.get(__response__, 'vlan_id'),
        vlan_vid=pulumi.get(__response__, 'vlan_vid'),
        vrf_id=pulumi.get(__response__, 'vrf_id')))
