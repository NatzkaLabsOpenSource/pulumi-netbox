# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'IpAddressNatOutsideAddressArgs',
    'IpAddressNatOutsideAddressArgsDict',
    'GetAsnsFilterArgs',
    'GetAsnsFilterArgsDict',
    'GetIpAddressesFilterArgs',
    'GetIpAddressesFilterArgsDict',
    'GetPrefixesFilterArgs',
    'GetPrefixesFilterArgsDict',
    'GetVlansFilterArgs',
    'GetVlansFilterArgsDict',
    'GetVrfsFilterArgs',
    'GetVrfsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class IpAddressNatOutsideAddressArgsDict(TypedDict):
        address_family: NotRequired[pulumi.Input[_builtins.int]]
        id: NotRequired[pulumi.Input[_builtins.int]]
        ip_address: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    IpAddressNatOutsideAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class IpAddressNatOutsideAddressArgs:
    def __init__(__self__, *,
                 address_family: Optional[pulumi.Input[_builtins.int]] = None,
                 id: Optional[pulumi.Input[_builtins.int]] = None,
                 ip_address: Optional[pulumi.Input[_builtins.str]] = None):
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "address_family")

    @address_family.setter
    def address_family(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "address_family", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_address", value)


if not MYPY:
    class GetAsnsFilterArgsDict(TypedDict):
        name: _builtins.str
        value: _builtins.str
elif False:
    GetAsnsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAsnsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetIpAddressesFilterArgsDict(TypedDict):
        name: _builtins.str
        value: _builtins.str
elif False:
    GetIpAddressesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetIpAddressesFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetPrefixesFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `tenant_id`, `site_id`, & `tag`.
        """
        value: _builtins.str
        """
        The value to pass to the specified filter.
        """
elif False:
    GetPrefixesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetPrefixesFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `tenant_id`, `site_id`, & `tag`.
        :param _builtins.str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `tenant_id`, `site_id`, & `tag`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetVlansFilterArgsDict(TypedDict):
        name: _builtins.str
        value: _builtins.str
elif False:
    GetVlansFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVlansFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetVrfsFilterArgsDict(TypedDict):
        name: _builtins.str
        value: _builtins.str
elif False:
    GetVrfsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetVrfsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: _builtins.str):
        pulumi.set(self, "value", value)


