# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['VrfArgs', 'Vrf']

@pulumi.input_type
class VrfArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforce_unique: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rd: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a Vrf resource.
        :param pulumi.Input[_builtins.bool] enforce_unique: Defaults to `true`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enforce_unique is not None:
            pulumi.set(__self__, "enforce_unique", enforce_unique)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enforceUnique")
    def enforce_unique(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enforce_unique")

    @enforce_unique.setter
    def enforce_unique(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enforce_unique", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rd", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class _VrfState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforce_unique: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rd: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Vrf resources.
        :param pulumi.Input[_builtins.bool] enforce_unique: Defaults to `true`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enforce_unique is not None:
            pulumi.set(__self__, "enforce_unique", enforce_unique)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enforceUnique")
    def enforce_unique(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enforce_unique")

    @enforce_unique.setter
    def enforce_unique(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enforce_unique", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rd", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("netbox:ipam/vrf:Vrf")
class Vrf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforce_unique: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rd: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#virtual-routing-and-forwarding-vrf):

        > A VRF object in NetBox represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        cust_a_prod = netbox.ipam.Vrf("cust_a_prod",
            name="cust-a-prod",
            tags=[
                "customer-a",
                "prod",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enforce_unique: Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VrfArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#virtual-routing-and-forwarding-vrf):

        > A VRF object in NetBox represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        cust_a_prod = netbox.ipam.Vrf("cust_a_prod",
            name="cust-a-prod",
            tags=[
                "customer-a",
                "prod",
            ])
        ```

        :param str resource_name: The name of the resource.
        :param VrfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VrfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enforce_unique: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rd: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VrfArgs.__new__(VrfArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enforce_unique"] = enforce_unique
            __props__.__dict__["name"] = name
            __props__.__dict__["rd"] = rd
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["tags_alls"] = None
        super(Vrf, __self__).__init__(
            'netbox:ipam/vrf:Vrf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enforce_unique: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rd: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.int]] = None) -> 'Vrf':
        """
        Get an existing Vrf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enforce_unique: Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VrfState.__new__(_VrfState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enforce_unique"] = enforce_unique
        __props__.__dict__["name"] = name
        __props__.__dict__["rd"] = rd
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["tenant_id"] = tenant_id
        return Vrf(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enforceUnique")
    def enforce_unique(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enforce_unique")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rd(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "rd")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "tenant_id")

