# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'IpAddressNatOutsideAddress',
    'GetAsnsAsnResult',
    'GetAsnsFilterResult',
    'GetAvailablePrefixPrefixesAvailableResult',
    'GetIpAddressesFilterResult',
    'GetIpAddressesIpAddressResult',
    'GetIpAddressesIpAddressTagResult',
    'GetIpAddressesIpAddressTenantResult',
    'GetPrefixesFilterResult',
    'GetPrefixesPrefixResult',
    'GetVlansFilterResult',
    'GetVlansVlanResult',
    'GetVrfsFilterResult',
    'GetVrfsVrfResult',
]

@pulumi.output_type
class IpAddressNatOutsideAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamily":
            suggest = "address_family"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpAddressNatOutsideAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpAddressNatOutsideAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpAddressNatOutsideAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_family: Optional[int] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None):
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[int]:
        return pulumi.get(self, "address_family")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetAsnsAsnResult(dict):
    def __init__(__self__, *,
                 asn: int,
                 id: int,
                 rir_id: int,
                 tags: Sequence[str]):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rir_id", rir_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def asn(self) -> int:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="rirId")
    def rir_id(self) -> int:
        return pulumi.get(self, "rir_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetAsnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAvailablePrefixPrefixesAvailableResult(dict):
    def __init__(__self__, *,
                 family: int,
                 prefix: str,
                 vrf_id: int):
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def family(self) -> int:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> int:
        return pulumi.get(self, "vrf_id")


@pulumi.output_type
class GetIpAddressesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetIpAddressesIpAddressResult(dict):
    def __init__(__self__, *,
                 address_family: str,
                 created: str,
                 custom_fields: Mapping[str, str],
                 description: str,
                 dns_name: str,
                 id: int,
                 ip_address: str,
                 last_updated: str,
                 role: str,
                 status: str,
                 tags: Sequence['outputs.GetIpAddressesIpAddressTagResult'],
                 tenants: Sequence['outputs.GetIpAddressesIpAddressTenantResult']):
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> str:
        return pulumi.get(self, "address_family")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, str]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetIpAddressesIpAddressTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence['outputs.GetIpAddressesIpAddressTenantResult']:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GetIpAddressesIpAddressTagResult(dict):
    def __init__(__self__, *,
                 display: str,
                 id: int,
                 name: str,
                 slug: str):
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetIpAddressesIpAddressTenantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 slug: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetPrefixesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `tenant_id`, `site_id`, & `tag`.
        :param str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `tenant_id`, `site_id`, & `tag`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPrefixesPrefixResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 prefix: str,
                 site_id: int,
                 status: str,
                 tags: Sequence[str],
                 tenant_id: int,
                 vlan_id: int,
                 vlan_vid: float,
                 vrf_id: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_vid", vlan_vid)
        pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanVid")
    def vlan_vid(self) -> float:
        return pulumi.get(self, "vlan_vid")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> int:
        return pulumi.get(self, "vrf_id")


@pulumi.output_type
class GetVlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVlansVlanResult(dict):
    def __init__(__self__, *,
                 description: str,
                 group_id: int,
                 name: str,
                 role: int,
                 site: int,
                 status: str,
                 tag_ids: Sequence[int],
                 tenant: int,
                 vid: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tenant", tenant)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> int:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def site(self) -> int:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter
    def tenant(self) -> int:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetVrfsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfsVrfResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 name: str,
                 rd: str,
                 tenant: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rd", rd)
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rd(self) -> str:
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def tenant(self) -> int:
        return pulumi.get(self, "tenant")


