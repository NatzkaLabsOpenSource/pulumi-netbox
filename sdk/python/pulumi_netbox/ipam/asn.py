# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['AsnArgs', 'Asn']

@pulumi.input_type
class AsnArgs:
    def __init__(__self__, *,
                 asn: pulumi.Input[_builtins.int],
                 rir_id: pulumi.Input[_builtins.int],
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Asn resource.
        :param pulumi.Input[_builtins.int] asn: Value for the AS Number record.
        :param pulumi.Input[_builtins.int] rir_id: ID for the RIR for the AS Number record.
        :param pulumi.Input[_builtins.str] comments: Comments field for the AS Number record.
        :param pulumi.Input[_builtins.str] description: Description field for the AS Number record.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "rir_id", rir_id)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> pulumi.Input[_builtins.int]:
        """
        Value for the AS Number record.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter(name="rirId")
    def rir_id(self) -> pulumi.Input[_builtins.int]:
        """
        ID for the RIR for the AS Number record.
        """
        return pulumi.get(self, "rir_id")

    @rir_id.setter
    def rir_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "rir_id", value)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comments field for the AS Number record.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description field for the AS Number record.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AsnState:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 rir_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering Asn resources.
        :param pulumi.Input[_builtins.int] asn: Value for the AS Number record.
        :param pulumi.Input[_builtins.str] comments: Comments field for the AS Number record.
        :param pulumi.Input[_builtins.str] description: Description field for the AS Number record.
        :param pulumi.Input[_builtins.int] rir_id: ID for the RIR for the AS Number record.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if rir_id is not None:
            pulumi.set(__self__, "rir_id", rir_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Value for the AS Number record.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "asn", value)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Comments field for the AS Number record.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description field for the AS Number record.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="rirId")
    def rir_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        ID for the RIR for the AS Number record.
        """
        return pulumi.get(self, "rir_id")

    @rir_id.setter
    def rir_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rir_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)


@pulumi.type_token("netbox:ipam/asn:Asn")
class Asn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 rir_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#asn):
        > ASN is short for Autonomous System Number. This identifier is used in the BGP protocol to identify which "autonomous system" a particular prefix is originating and transiting through.
        > 
        > The AS number model within NetBox allows you to model some of this real-world relationship.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.ipam.Rir("test", name="testrir")
        test_asn = netbox.ipam.Asn("test",
            asn=1337,
            rir_id=test.id,
            description="test",
            comments="test")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] asn: Value for the AS Number record.
        :param pulumi.Input[_builtins.str] comments: Comments field for the AS Number record.
        :param pulumi.Input[_builtins.str] description: Description field for the AS Number record.
        :param pulumi.Input[_builtins.int] rir_id: ID for the RIR for the AS Number record.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AsnArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#asn):
        > ASN is short for Autonomous System Number. This identifier is used in the BGP protocol to identify which "autonomous system" a particular prefix is originating and transiting through.
        > 
        > The AS number model within NetBox allows you to model some of this real-world relationship.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.ipam.Rir("test", name="testrir")
        test_asn = netbox.ipam.Asn("test",
            asn=1337,
            rir_id=test.id,
            description="test",
            comments="test")
        ```

        :param str resource_name: The name of the resource.
        :param AsnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AsnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 rir_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AsnArgs.__new__(AsnArgs)

            if asn is None and not opts.urn:
                raise TypeError("Missing required property 'asn'")
            __props__.__dict__["asn"] = asn
            __props__.__dict__["comments"] = comments
            __props__.__dict__["description"] = description
            if rir_id is None and not opts.urn:
                raise TypeError("Missing required property 'rir_id'")
            __props__.__dict__["rir_id"] = rir_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tags_alls"] = None
        super(Asn, __self__).__init__(
            'netbox:ipam/asn:Asn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asn: Optional[pulumi.Input[_builtins.int]] = None,
            comments: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            rir_id: Optional[pulumi.Input[_builtins.int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'Asn':
        """
        Get an existing Asn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] asn: Value for the AS Number record.
        :param pulumi.Input[_builtins.str] comments: Comments field for the AS Number record.
        :param pulumi.Input[_builtins.str] description: Description field for the AS Number record.
        :param pulumi.Input[_builtins.int] rir_id: ID for the RIR for the AS Number record.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AsnState.__new__(_AsnState)

        __props__.__dict__["asn"] = asn
        __props__.__dict__["comments"] = comments
        __props__.__dict__["description"] = description
        __props__.__dict__["rir_id"] = rir_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        return Asn(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> pulumi.Output[_builtins.int]:
        """
        Value for the AS Number record.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Comments field for the AS Number record.
        """
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description field for the AS Number record.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="rirId")
    def rir_id(self) -> pulumi.Output[_builtins.int]:
        """
        ID for the RIR for the AS Number record.
        """
        return pulumi.get(self, "rir_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

