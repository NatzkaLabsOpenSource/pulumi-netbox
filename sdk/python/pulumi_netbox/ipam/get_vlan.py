# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetVlanResult',
    'AwaitableGetVlanResult',
    'get_vlan',
    'get_vlan_output',
]

@pulumi.output_type
class GetVlanResult:
    """
    A collection of values returned by getVlan.
    """
    def __init__(__self__, description=None, group_id=None, id=None, name=None, role=None, site=None, status=None, tenant=None, vid=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if group_id and not isinstance(group_id, int):
            raise TypeError("Expected argument 'group_id' to be a int")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if role and not isinstance(role, int):
            raise TypeError("Expected argument 'role' to be a int")
        pulumi.set(__self__, "role", role)
        if site and not isinstance(site, int):
            raise TypeError("Expected argument 'site' to be a int")
        pulumi.set(__self__, "site", site)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tenant and not isinstance(tenant, int):
            raise TypeError("Expected argument 'tenant' to be a int")
        pulumi.set(__self__, "tenant", tenant)
        if vid and not isinstance(vid, int):
            raise TypeError("Expected argument 'vid' to be a int")
        pulumi.set(__self__, "vid", vid)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.int:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.int:
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def site(self) -> _builtins.int:
        return pulumi.get(self, "site")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tenant(self) -> _builtins.int:
        return pulumi.get(self, "tenant")

    @_builtins.property
    @pulumi.getter
    def vid(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "vid")


class AwaitableGetVlanResult(GetVlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVlanResult(
            description=self.description,
            group_id=self.group_id,
            id=self.id,
            name=self.name,
            role=self.role,
            site=self.site,
            status=self.status,
            tenant=self.tenant,
            vid=self.vid)


def get_vlan(group_id: Optional[_builtins.int] = None,
             name: Optional[_builtins.str] = None,
             role: Optional[_builtins.int] = None,
             tenant: Optional[_builtins.int] = None,
             vid: Optional[_builtins.int] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVlanResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    # Get VLAN by name
    vlan1 = netbox.ipam.get_vlan(name="vlan-1")
    # Get VLAN by VID and IPAM role ID
    vlan2 = netbox.ipam.get_vlan(vid=1234,
        role=example["id"])
    # Get VLAN by name and tenant ID
    vlan3 = netbox.ipam.get_vlan(name="vlan-3",
        tenant=example_netbox_tenant["id"])
    ```
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['role'] = role
    __args__['tenant'] = tenant
    __args__['vid'] = vid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:ipam/getVlan:getVlan', __args__, opts=opts, typ=GetVlanResult).value

    return AwaitableGetVlanResult(
        description=pulumi.get(__ret__, 'description'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        role=pulumi.get(__ret__, 'role'),
        site=pulumi.get(__ret__, 'site'),
        status=pulumi.get(__ret__, 'status'),
        tenant=pulumi.get(__ret__, 'tenant'),
        vid=pulumi.get(__ret__, 'vid'))
def get_vlan_output(group_id: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                    role: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    tenant: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    vid: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVlanResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    # Get VLAN by name
    vlan1 = netbox.ipam.get_vlan(name="vlan-1")
    # Get VLAN by VID and IPAM role ID
    vlan2 = netbox.ipam.get_vlan(vid=1234,
        role=example["id"])
    # Get VLAN by name and tenant ID
    vlan3 = netbox.ipam.get_vlan(name="vlan-3",
        tenant=example_netbox_tenant["id"])
    ```
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['name'] = name
    __args__['role'] = role
    __args__['tenant'] = tenant
    __args__['vid'] = vid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:ipam/getVlan:getVlan', __args__, opts=opts, typ=GetVlanResult)
    return __ret__.apply(lambda __response__: GetVlanResult(
        description=pulumi.get(__response__, 'description'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        role=pulumi.get(__response__, 'role'),
        site=pulumi.get(__response__, 'site'),
        status=pulumi.get(__response__, 'status'),
        tenant=pulumi.get(__response__, 'tenant'),
        vid=pulumi.get(__response__, 'vid')))
