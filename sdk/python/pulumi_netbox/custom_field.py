# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CustomFieldArgs', 'CustomField']

@pulumi.input_type
class CustomFieldArgs:
    def __init__(__self__, *,
                 content_types: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str],
                 choice_set_id: Optional[pulumi.Input[_builtins.int]] = None,
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 validation_maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a CustomField resource.
        """
        pulumi.set(__self__, "content_types", content_types)
        pulumi.set(__self__, "type", type)
        if choice_set_id is not None:
            pulumi.set(__self__, "choice_set_id", choice_set_id)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if validation_maximum is not None:
            pulumi.set(__self__, "validation_maximum", validation_maximum)
        if validation_minimum is not None:
            pulumi.set(__self__, "validation_minimum", validation_minimum)
        if validation_regex is not None:
            pulumi.set(__self__, "validation_regex", validation_regex)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "content_types")

    @content_types.setter
    def content_types(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "content_types", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="choiceSetId")
    def choice_set_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "choice_set_id")

    @choice_set_id.setter
    def choice_set_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "choice_set_id", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter(name="validationMaximum")
    def validation_maximum(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "validation_maximum")

    @validation_maximum.setter
    def validation_maximum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "validation_maximum", value)

    @_builtins.property
    @pulumi.getter(name="validationMinimum")
    def validation_minimum(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "validation_minimum")

    @validation_minimum.setter
    def validation_minimum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "validation_minimum", value)

    @_builtins.property
    @pulumi.getter(name="validationRegex")
    def validation_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "validation_regex")

    @validation_regex.setter
    def validation_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validation_regex", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _CustomFieldState:
    def __init__(__self__, *,
                 choice_set_id: Optional[pulumi.Input[_builtins.int]] = None,
                 content_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering CustomField resources.
        """
        if choice_set_id is not None:
            pulumi.set(__self__, "choice_set_id", choice_set_id)
        if content_types is not None:
            pulumi.set(__self__, "content_types", content_types)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if validation_maximum is not None:
            pulumi.set(__self__, "validation_maximum", validation_maximum)
        if validation_minimum is not None:
            pulumi.set(__self__, "validation_minimum", validation_minimum)
        if validation_regex is not None:
            pulumi.set(__self__, "validation_regex", validation_regex)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="choiceSetId")
    def choice_set_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "choice_set_id")

    @choice_set_id.setter
    def choice_set_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "choice_set_id", value)

    @_builtins.property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "content_types")

    @content_types.setter
    def content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "content_types", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_name", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="validationMaximum")
    def validation_maximum(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "validation_maximum")

    @validation_maximum.setter
    def validation_maximum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "validation_maximum", value)

    @_builtins.property
    @pulumi.getter(name="validationMinimum")
    def validation_minimum(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "validation_minimum")

    @validation_minimum.setter
    def validation_minimum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "validation_minimum", value)

    @_builtins.property
    @pulumi.getter(name="validationRegex")
    def validation_regex(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "validation_regex")

    @validation_regex.setter
    def validation_regex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "validation_regex", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("netbox:index/customField:CustomField")
class CustomField(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 choice_set_id: Optional[pulumi.Input[_builtins.int]] = None,
                 content_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/customization/custom-fields/#custom-fields):

        > Each model in NetBox is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, sites are stored in the dcim_site table, which has columns named name, facility, physical_address, and so on. As new attributes are added to objects throughout the development of NetBox, tables are expanded to include new rows.
        > 
        > However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core NetBox database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for NetBox, but it's not a common enough need to warrant including a field for every NetBox installation. Instead, you can create a custom field to hold this data.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.CustomField("test",
            name="test",
            type="text",
            content_types=["virtualization.vminterface"],
            weight=100,
            validation_regex="^.*$")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomFieldArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/customization/custom-fields/#custom-fields):

        > Each model in NetBox is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, sites are stored in the dcim_site table, which has columns named name, facility, physical_address, and so on. As new attributes are added to objects throughout the development of NetBox, tables are expanded to include new rows.
        > 
        > However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core NetBox database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for NetBox, but it's not a common enough need to warrant including a field for every NetBox installation. Instead, you can create a custom field to hold this data.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.CustomField("test",
            name="test",
            type="text",
            content_types=["virtualization.vminterface"],
            weight=100,
            validation_regex="^.*$")
        ```

        :param str resource_name: The name of the resource.
        :param CustomFieldArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomFieldArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 choice_set_id: Optional[pulumi.Input[_builtins.int]] = None,
                 content_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 validation_maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 validation_regex: Optional[pulumi.Input[_builtins.str]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomFieldArgs.__new__(CustomFieldArgs)

            __props__.__dict__["choice_set_id"] = choice_set_id
            if content_types is None and not opts.urn:
                raise TypeError("Missing required property 'content_types'")
            __props__.__dict__["content_types"] = content_types
            __props__.__dict__["default"] = default
            __props__.__dict__["description"] = description
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["label"] = label
            __props__.__dict__["name"] = name
            __props__.__dict__["required"] = required
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["validation_maximum"] = validation_maximum
            __props__.__dict__["validation_minimum"] = validation_minimum
            __props__.__dict__["validation_regex"] = validation_regex
            __props__.__dict__["weight"] = weight
        super(CustomField, __self__).__init__(
            'netbox:index/customField:CustomField',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            choice_set_id: Optional[pulumi.Input[_builtins.int]] = None,
            content_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            default: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            group_name: Optional[pulumi.Input[_builtins.str]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            required: Optional[pulumi.Input[_builtins.bool]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            validation_maximum: Optional[pulumi.Input[_builtins.int]] = None,
            validation_minimum: Optional[pulumi.Input[_builtins.int]] = None,
            validation_regex: Optional[pulumi.Input[_builtins.str]] = None,
            weight: Optional[pulumi.Input[_builtins.int]] = None) -> 'CustomField':
        """
        Get an existing CustomField resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomFieldState.__new__(_CustomFieldState)

        __props__.__dict__["choice_set_id"] = choice_set_id
        __props__.__dict__["content_types"] = content_types
        __props__.__dict__["default"] = default
        __props__.__dict__["description"] = description
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["label"] = label
        __props__.__dict__["name"] = name
        __props__.__dict__["required"] = required
        __props__.__dict__["type"] = type
        __props__.__dict__["validation_maximum"] = validation_maximum
        __props__.__dict__["validation_minimum"] = validation_minimum
        __props__.__dict__["validation_regex"] = validation_regex
        __props__.__dict__["weight"] = weight
        return CustomField(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="choiceSetId")
    def choice_set_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "choice_set_id")

    @_builtins.property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "content_types")

    @_builtins.property
    @pulumi.getter
    def default(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def required(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validationMaximum")
    def validation_maximum(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "validation_maximum")

    @_builtins.property
    @pulumi.getter(name="validationMinimum")
    def validation_minimum(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "validation_minimum")

    @_builtins.property
    @pulumi.getter(name="validationRegex")
    def validation_regex(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "validation_regex")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "weight")

