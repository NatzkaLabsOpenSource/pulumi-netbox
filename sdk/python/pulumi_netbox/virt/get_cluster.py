# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, cluster_group_id=None, cluster_id=None, cluster_type_id=None, comments=None, custom_fields=None, description=None, id=None, location_id=None, name=None, region_id=None, scope_id=None, scope_type=None, site_group_id=None, site_id=None, tags=None):
        if cluster_group_id and not isinstance(cluster_group_id, int):
            raise TypeError("Expected argument 'cluster_group_id' to be a int")
        pulumi.set(__self__, "cluster_group_id", cluster_group_id)
        if cluster_id and not isinstance(cluster_id, int):
            raise TypeError("Expected argument 'cluster_id' to be a int")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type_id and not isinstance(cluster_type_id, int):
            raise TypeError("Expected argument 'cluster_type_id' to be a int")
        pulumi.set(__self__, "cluster_type_id", cluster_type_id)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if custom_fields and not isinstance(custom_fields, dict):
            raise TypeError("Expected argument 'custom_fields' to be a dict")
        pulumi.set(__self__, "custom_fields", custom_fields)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location_id and not isinstance(location_id, int):
            raise TypeError("Expected argument 'location_id' to be a int")
        pulumi.set(__self__, "location_id", location_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region_id and not isinstance(region_id, int):
            raise TypeError("Expected argument 'region_id' to be a int")
        pulumi.set(__self__, "region_id", region_id)
        if scope_id and not isinstance(scope_id, int):
            raise TypeError("Expected argument 'scope_id' to be a int")
        pulumi.set(__self__, "scope_id", scope_id)
        if scope_type and not isinstance(scope_type, str):
            raise TypeError("Expected argument 'scope_type' to be a str")
        pulumi.set(__self__, "scope_type", scope_type)
        if site_group_id and not isinstance(site_group_id, int):
            raise TypeError("Expected argument 'site_group_id' to be a int")
        pulumi.set(__self__, "site_group_id", site_group_id)
        if site_id and not isinstance(site_id, int):
            raise TypeError("Expected argument 'site_id' to be a int")
        pulumi.set(__self__, "site_id", site_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="clusterGroupId")
    def cluster_group_id(self) -> _builtins.int:
        return pulumi.get(self, "cluster_group_id")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.int:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="clusterTypeId")
    def cluster_type_id(self) -> _builtins.int:
        return pulumi.get(self, "cluster_type_id")

    @_builtins.property
    @pulumi.getter
    def comments(self) -> _builtins.str:
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> _builtins.int:
        return pulumi.get(self, "location_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.int:
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> _builtins.int:
        return pulumi.get(self, "scope_id")

    @_builtins.property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> _builtins.str:
        return pulumi.get(self, "scope_type")

    @_builtins.property
    @pulumi.getter(name="siteGroupId")
    def site_group_id(self) -> _builtins.int:
        return pulumi.get(self, "site_group_id")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            cluster_group_id=self.cluster_group_id,
            cluster_id=self.cluster_id,
            cluster_type_id=self.cluster_type_id,
            comments=self.comments,
            custom_fields=self.custom_fields,
            description=self.description,
            id=self.id,
            location_id=self.location_id,
            name=self.name,
            region_id=self.region_id,
            scope_id=self.scope_id,
            scope_type=self.scope_type,
            site_group_id=self.site_group_id,
            site_id=self.site_id,
            tags=self.tags)


def get_cluster(cluster_group_id: Optional[_builtins.int] = None,
                id: Optional[_builtins.str] = None,
                name: Optional[_builtins.str] = None,
                site_id: Optional[_builtins.int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    vmw_cluster01 = netbox.virt.get_cluster(name="vmw-cluster-01")
    ```


    :param _builtins.str id: At least one of `name`, `site_id` or `id` must be given.
    :param _builtins.str name: At least one of `name`, `site_id` or `id` must be given.
    :param _builtins.int site_id: At least one of `name`, `site_id` or `id` must be given.
    """
    __args__ = dict()
    __args__['clusterGroupId'] = cluster_group_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:virt/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        cluster_group_id=pulumi.get(__ret__, 'cluster_group_id'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_type_id=pulumi.get(__ret__, 'cluster_type_id'),
        comments=pulumi.get(__ret__, 'comments'),
        custom_fields=pulumi.get(__ret__, 'custom_fields'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        location_id=pulumi.get(__ret__, 'location_id'),
        name=pulumi.get(__ret__, 'name'),
        region_id=pulumi.get(__ret__, 'region_id'),
        scope_id=pulumi.get(__ret__, 'scope_id'),
        scope_type=pulumi.get(__ret__, 'scope_type'),
        site_group_id=pulumi.get(__ret__, 'site_group_id'),
        site_id=pulumi.get(__ret__, 'site_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_cluster_output(cluster_group_id: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                       site_id: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    vmw_cluster01 = netbox.virt.get_cluster(name="vmw-cluster-01")
    ```


    :param _builtins.str id: At least one of `name`, `site_id` or `id` must be given.
    :param _builtins.str name: At least one of `name`, `site_id` or `id` must be given.
    :param _builtins.int site_id: At least one of `name`, `site_id` or `id` must be given.
    """
    __args__ = dict()
    __args__['clusterGroupId'] = cluster_group_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:virt/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult)
    return __ret__.apply(lambda __response__: GetClusterResult(
        cluster_group_id=pulumi.get(__response__, 'cluster_group_id'),
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        cluster_type_id=pulumi.get(__response__, 'cluster_type_id'),
        comments=pulumi.get(__response__, 'comments'),
        custom_fields=pulumi.get(__response__, 'custom_fields'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        location_id=pulumi.get(__response__, 'location_id'),
        name=pulumi.get(__response__, 'name'),
        region_id=pulumi.get(__response__, 'region_id'),
        scope_id=pulumi.get(__response__, 'scope_id'),
        scope_type=pulumi.get(__response__, 'scope_type'),
        site_group_id=pulumi.get(__response__, 'site_group_id'),
        site_id=pulumi.get(__response__, 'site_id'),
        tags=pulumi.get(__response__, 'tags')))
