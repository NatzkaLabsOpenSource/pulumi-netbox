# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetConfigContextResult',
    'AwaitableGetConfigContextResult',
    'get_config_context',
    'get_config_context_output',
]

@pulumi.output_type
class GetConfigContextResult:
    """
    A collection of values returned by getConfigContext.
    """
    def __init__(__self__, cluster_groups=None, cluster_types=None, clusters=None, data=None, description=None, device_types=None, id=None, locations=None, name=None, platforms=None, regions=None, roles=None, site_groups=None, sites=None, tags=None, tenant_groups=None, tenants=None, weight=None):
        if cluster_groups and not isinstance(cluster_groups, list):
            raise TypeError("Expected argument 'cluster_groups' to be a list")
        pulumi.set(__self__, "cluster_groups", cluster_groups)
        if cluster_types and not isinstance(cluster_types, list):
            raise TypeError("Expected argument 'cluster_types' to be a list")
        pulumi.set(__self__, "cluster_types", cluster_types)
        if clusters and not isinstance(clusters, list):
            raise TypeError("Expected argument 'clusters' to be a list")
        pulumi.set(__self__, "clusters", clusters)
        if data and not isinstance(data, str):
            raise TypeError("Expected argument 'data' to be a str")
        pulumi.set(__self__, "data", data)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_types and not isinstance(device_types, list):
            raise TypeError("Expected argument 'device_types' to be a list")
        pulumi.set(__self__, "device_types", device_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if platforms and not isinstance(platforms, list):
            raise TypeError("Expected argument 'platforms' to be a list")
        pulumi.set(__self__, "platforms", platforms)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if site_groups and not isinstance(site_groups, list):
            raise TypeError("Expected argument 'site_groups' to be a list")
        pulumi.set(__self__, "site_groups", site_groups)
        if sites and not isinstance(sites, list):
            raise TypeError("Expected argument 'sites' to be a list")
        pulumi.set(__self__, "sites", sites)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenant_groups and not isinstance(tenant_groups, list):
            raise TypeError("Expected argument 'tenant_groups' to be a list")
        pulumi.set(__self__, "tenant_groups", tenant_groups)
        if tenants and not isinstance(tenants, list):
            raise TypeError("Expected argument 'tenants' to be a list")
        pulumi.set(__self__, "tenants", tenants)
        if weight and not isinstance(weight, int):
            raise TypeError("Expected argument 'weight' to be a int")
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="clusterGroups")
    def cluster_groups(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "cluster_groups")

    @_builtins.property
    @pulumi.getter(name="clusterTypes")
    def cluster_types(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "cluster_types")

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def data(self) -> _builtins.str:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platforms(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "platforms")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="siteGroups")
    def site_groups(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "site_groups")

    @_builtins.property
    @pulumi.getter
    def sites(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "sites")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tenantGroups")
    def tenant_groups(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "tenant_groups")

    @_builtins.property
    @pulumi.getter
    def tenants(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "tenants")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        return pulumi.get(self, "weight")


class AwaitableGetConfigContextResult(GetConfigContextResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigContextResult(
            cluster_groups=self.cluster_groups,
            cluster_types=self.cluster_types,
            clusters=self.clusters,
            data=self.data,
            description=self.description,
            device_types=self.device_types,
            id=self.id,
            locations=self.locations,
            name=self.name,
            platforms=self.platforms,
            regions=self.regions,
            roles=self.roles,
            site_groups=self.site_groups,
            sites=self.sites,
            tags=self.tags,
            tenant_groups=self.tenant_groups,
            tenants=self.tenants,
            weight=self.weight)


def get_config_context(name: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigContextResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getConfigContext:getConfigContext', __args__, opts=opts, typ=GetConfigContextResult).value

    return AwaitableGetConfigContextResult(
        cluster_groups=pulumi.get(__ret__, 'cluster_groups'),
        cluster_types=pulumi.get(__ret__, 'cluster_types'),
        clusters=pulumi.get(__ret__, 'clusters'),
        data=pulumi.get(__ret__, 'data'),
        description=pulumi.get(__ret__, 'description'),
        device_types=pulumi.get(__ret__, 'device_types'),
        id=pulumi.get(__ret__, 'id'),
        locations=pulumi.get(__ret__, 'locations'),
        name=pulumi.get(__ret__, 'name'),
        platforms=pulumi.get(__ret__, 'platforms'),
        regions=pulumi.get(__ret__, 'regions'),
        roles=pulumi.get(__ret__, 'roles'),
        site_groups=pulumi.get(__ret__, 'site_groups'),
        sites=pulumi.get(__ret__, 'sites'),
        tags=pulumi.get(__ret__, 'tags'),
        tenant_groups=pulumi.get(__ret__, 'tenant_groups'),
        tenants=pulumi.get(__ret__, 'tenants'),
        weight=pulumi.get(__ret__, 'weight'))
def get_config_context_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigContextResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:index/getConfigContext:getConfigContext', __args__, opts=opts, typ=GetConfigContextResult)
    return __ret__.apply(lambda __response__: GetConfigContextResult(
        cluster_groups=pulumi.get(__response__, 'cluster_groups'),
        cluster_types=pulumi.get(__response__, 'cluster_types'),
        clusters=pulumi.get(__response__, 'clusters'),
        data=pulumi.get(__response__, 'data'),
        description=pulumi.get(__response__, 'description'),
        device_types=pulumi.get(__response__, 'device_types'),
        id=pulumi.get(__response__, 'id'),
        locations=pulumi.get(__response__, 'locations'),
        name=pulumi.get(__response__, 'name'),
        platforms=pulumi.get(__response__, 'platforms'),
        regions=pulumi.get(__response__, 'regions'),
        roles=pulumi.get(__response__, 'roles'),
        site_groups=pulumi.get(__response__, 'site_groups'),
        sites=pulumi.get(__response__, 'sites'),
        tags=pulumi.get(__response__, 'tags'),
        tenant_groups=pulumi.get(__response__, 'tenant_groups'),
        tenants=pulumi.get(__response__, 'tenants'),
        weight=pulumi.get(__response__, 'weight')))
