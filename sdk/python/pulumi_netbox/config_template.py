# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConfigTemplateArgs', 'ConfigTemplate']

@pulumi.input_type
class ConfigTemplateArgs:
    def __init__(__self__, *,
                 template_code: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_params: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a ConfigTemplate resource.
        :param pulumi.Input[_builtins.str] environment_params: Defaults to `{}`.
        """
        pulumi.set(__self__, "template_code", template_code)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_params is not None:
            pulumi.set(__self__, "environment_params", environment_params)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="templateCode")
    def template_code(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "template_code")

    @template_code.setter
    def template_code(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "template_code", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="environmentParams")
    def environment_params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defaults to `{}`.
        """
        return pulumi.get(self, "environment_params")

    @environment_params.setter
    def environment_params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_params", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ConfigTemplateState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_params: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_code: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ConfigTemplate resources.
        :param pulumi.Input[_builtins.str] environment_params: Defaults to `{}`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_params is not None:
            pulumi.set(__self__, "environment_params", environment_params)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if template_code is not None:
            pulumi.set(__self__, "template_code", template_code)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="environmentParams")
    def environment_params(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defaults to `{}`.
        """
        return pulumi.get(self, "environment_params")

    @environment_params.setter
    def environment_params(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "environment_params", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter(name="templateCode")
    def template_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "template_code")

    @template_code.setter
    def template_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "template_code", value)


@pulumi.type_token("netbox:index/configTemplate:ConfigTemplate")
class ConfigTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_params: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_code: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):

        > Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.

        > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_netbox as netbox

        test = netbox.ConfigTemplate("test",
            name="test",
            description="test description",
            template_code="hostname {{ name }}",
            environment_params=json.dumps({
                "name": "my-hostname",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] environment_params: Defaults to `{}`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):

        > Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.

        > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_netbox as netbox

        test = netbox.ConfigTemplate("test",
            name="test",
            description="test description",
            template_code="hostname {{ name }}",
            environment_params=json.dumps({
                "name": "my-hostname",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param ConfigTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_params: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 template_code: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigTemplateArgs.__new__(ConfigTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["environment_params"] = environment_params
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            if template_code is None and not opts.urn:
                raise TypeError("Missing required property 'template_code'")
            __props__.__dict__["template_code"] = template_code
            __props__.__dict__["tags_alls"] = None
        super(ConfigTemplate, __self__).__init__(
            'netbox:index/configTemplate:ConfigTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            environment_params: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            template_code: Optional[pulumi.Input[_builtins.str]] = None) -> 'ConfigTemplate':
        """
        Get an existing ConfigTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] environment_params: Defaults to `{}`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigTemplateState.__new__(_ConfigTemplateState)

        __props__.__dict__["description"] = description
        __props__.__dict__["environment_params"] = environment_params
        __props__.__dict__["name"] = name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["template_code"] = template_code
        return ConfigTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentParams")
    def environment_params(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Defaults to `{}`.
        """
        return pulumi.get(self, "environment_params")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter(name="templateCode")
    def template_code(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "template_code")

