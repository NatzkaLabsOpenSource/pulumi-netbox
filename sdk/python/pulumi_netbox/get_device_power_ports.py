# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDevicePowerPortsResult',
    'AwaitableGetDevicePowerPortsResult',
    'get_device_power_ports',
    'get_device_power_ports_output',
]

@pulumi.output_type
class GetDevicePowerPortsResult:
    """
    A collection of values returned by getDevicePowerPorts.
    """
    def __init__(__self__, filters=None, id=None, limit=None, name_regex=None, power_ports=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if power_ports and not isinstance(power_ports, list):
            raise TypeError("Expected argument 'power_ports' to be a list")
        pulumi.set(__self__, "power_ports", power_ports)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDevicePowerPortsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def limit(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name_regex")

    @_builtins.property
    @pulumi.getter(name="powerPorts")
    def power_ports(self) -> Sequence['outputs.GetDevicePowerPortsPowerPortResult']:
        return pulumi.get(self, "power_ports")


class AwaitableGetDevicePowerPortsResult(GetDevicePowerPortsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDevicePowerPortsResult(
            filters=self.filters,
            id=self.id,
            limit=self.limit,
            name_regex=self.name_regex,
            power_ports=self.power_ports)


def get_device_power_ports(filters: Optional[Sequence[Union['GetDevicePowerPortsFilterArgs', 'GetDevicePowerPortsFilterArgsDict']]] = None,
                           limit: Optional[_builtins.int] = None,
                           name_regex: Optional[_builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDevicePowerPortsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['limit'] = limit
    __args__['nameRegex'] = name_regex
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getDevicePowerPorts:getDevicePowerPorts', __args__, opts=opts, typ=GetDevicePowerPortsResult).value

    return AwaitableGetDevicePowerPortsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        name_regex=pulumi.get(__ret__, 'name_regex'),
        power_ports=pulumi.get(__ret__, 'power_ports'))
def get_device_power_ports_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetDevicePowerPortsFilterArgs', 'GetDevicePowerPortsFilterArgsDict']]]]] = None,
                                  limit: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                  name_regex: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDevicePowerPortsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['limit'] = limit
    __args__['nameRegex'] = name_regex
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:index/getDevicePowerPorts:getDevicePowerPorts', __args__, opts=opts, typ=GetDevicePowerPortsResult)
    return __ret__.apply(lambda __response__: GetDevicePowerPortsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        limit=pulumi.get(__response__, 'limit'),
        name_regex=pulumi.get(__response__, 'name_regex'),
        power_ports=pulumi.get(__response__, 'power_ports')))
