# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetContactRoleResult',
    'AwaitableGetContactRoleResult',
    'get_contact_role',
    'get_contact_role_output',
]

@pulumi.output_type
class GetContactRoleResult:
    """
    A collection of values returned by getContactRole.
    """
    def __init__(__self__, id=None, name=None, slug=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        At least one of `name` or `slug` must be given.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        """
        At least one of `name` or `slug` must be given.
        """
        return pulumi.get(self, "slug")


class AwaitableGetContactRoleResult(GetContactRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContactRoleResult(
            id=self.id,
            name=self.name,
            slug=self.slug)


def get_contact_role(name: Optional[_builtins.str] = None,
                     slug: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContactRoleResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str name: At least one of `name` or `slug` must be given.
    :param _builtins.str slug: At least one of `name` or `slug` must be given.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:tenancy/getContactRole:getContactRole', __args__, opts=opts, typ=GetContactRoleResult).value

    return AwaitableGetContactRoleResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'))
def get_contact_role_output(name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            slug: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetContactRoleResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str name: At least one of `name` or `slug` must be given.
    :param _builtins.str slug: At least one of `name` or `slug` must be given.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:tenancy/getContactRole:getContactRole', __args__, opts=opts, typ=GetContactRoleResult)
    return __ret__.apply(lambda __response__: GetContactRoleResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        slug=pulumi.get(__response__, 'slug')))
