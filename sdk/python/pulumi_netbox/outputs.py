# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDevicePowerPortsFilterResult',
    'GetDevicePowerPortsPowerPortResult',
    'GetIpRangesFilterResult',
    'GetIpRangesIpRangeResult',
    'GetIpRangesIpRangeTagResult',
    'GetIpRangesIpRangeTenantResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetVirtualDiskFilterResult',
    'GetVirtualDiskVirtualDiskResult',
]

@pulumi.output_type
class GetDevicePowerPortsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDevicePowerPortsPowerPortResult(dict):
    def __init__(__self__, *,
                 allocated_draw: _builtins.int,
                 description: _builtins.str,
                 device_id: _builtins.int,
                 id: _builtins.int,
                 maximum_draw: _builtins.int,
                 module_id: _builtins.int,
                 name: _builtins.str,
                 tag_ids: Sequence[_builtins.int],
                 type: _builtins.str):
        pulumi.set(__self__, "allocated_draw", allocated_draw)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "maximum_draw", maximum_draw)
        pulumi.set(__self__, "module_id", module_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="allocatedDraw")
    def allocated_draw(self) -> _builtins.int:
        return pulumi.get(self, "allocated_draw")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.int:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maximumDraw")
    def maximum_draw(self) -> _builtins.int:
        return pulumi.get(self, "maximum_draw")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> _builtins.int:
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "tag_ids")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetIpRangesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetIpRangesIpRangeResult(dict):
    def __init__(__self__, *,
                 address_family: _builtins.str,
                 created: _builtins.str,
                 custom_fields: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 end_address: _builtins.str,
                 id: _builtins.int,
                 last_updated: _builtins.str,
                 role: _builtins.str,
                 start_address: _builtins.str,
                 status: _builtins.str,
                 tags: Sequence['outputs.GetIpRangesIpRangeTagResult'],
                 tenants: Sequence['outputs.GetIpRangesIpRangeTenantResult']):
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_address", end_address)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "start_address", start_address)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenants", tenants)

    @_builtins.property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> _builtins.str:
        return pulumi.get(self, "address_family")

    @_builtins.property
    @pulumi.getter
    def created(self) -> _builtins.str:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endAddress")
    def end_address(self) -> _builtins.str:
        return pulumi.get(self, "end_address")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> _builtins.str:
        return pulumi.get(self, "last_updated")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="startAddress")
    def start_address(self) -> _builtins.str:
        return pulumi.get(self, "start_address")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetIpRangesIpRangeTagResult']:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tenants(self) -> Sequence['outputs.GetIpRangesIpRangeTenantResult']:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GetIpRangesIpRangeTagResult(dict):
    def __init__(__self__, *,
                 display: _builtins.str,
                 id: _builtins.int,
                 name: _builtins.str,
                 slug: _builtins.str):
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def display(self) -> _builtins.str:
        return pulumi.get(self, "display")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetIpRangesIpRangeTenantResult(dict):
    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 slug: _builtins.str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 slug: _builtins.str,
                 tag_id: _builtins.int,
                 color: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "tag_id", tag_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> _builtins.int:
        return pulumi.get(self, "tag_id")

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetVirtualDiskFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualDiskVirtualDiskResult(dict):
    def __init__(__self__, *,
                 custom_fields: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 id: _builtins.int,
                 name: _builtins.str,
                 size_mb: _builtins.int,
                 tags: Sequence[_builtins.str],
                 virtual_machine_id: _builtins.int):
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size_mb", size_mb)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "virtual_machine_id", virtual_machine_id)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sizeMb")
    def size_mb(self) -> _builtins.int:
        return pulumi.get(self, "size_mb")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="virtualMachineId")
    def virtual_machine_id(self) -> _builtins.int:
        return pulumi.get(self, "virtual_machine_id")


