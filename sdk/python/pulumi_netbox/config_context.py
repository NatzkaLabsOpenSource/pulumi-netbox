# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ConfigContextArgs', 'ConfigContext']

@pulumi.input_type
class ConfigContextArgs:
    def __init__(__self__, *,
                 data: pulumi.Input[_builtins.str],
                 cluster_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 cluster_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platforms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 site_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a ConfigContext resource.
        :param pulumi.Input[_builtins.int] weight: Defaults to `1000`.
        """
        pulumi.set(__self__, "data", data)
        if cluster_groups is not None:
            pulumi.set(__self__, "cluster_groups", cluster_groups)
        if cluster_types is not None:
            pulumi.set(__self__, "cluster_types", cluster_types)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_types is not None:
            pulumi.set(__self__, "device_types", device_types)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platforms is not None:
            pulumi.set(__self__, "platforms", platforms)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if site_groups is not None:
            pulumi.set(__self__, "site_groups", site_groups)
        if sites is not None:
            pulumi.set(__self__, "sites", sites)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_groups is not None:
            pulumi.set(__self__, "tenant_groups", tenant_groups)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter(name="clusterGroups")
    def cluster_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "cluster_groups")

    @cluster_groups.setter
    def cluster_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "cluster_groups", value)

    @_builtins.property
    @pulumi.getter(name="clusterTypes")
    def cluster_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "cluster_types")

    @cluster_types.setter
    def cluster_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "cluster_types", value)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "locations", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "platforms")

    @platforms.setter
    def platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "platforms", value)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "regions", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="siteGroups")
    def site_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "site_groups")

    @site_groups.setter
    def site_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "site_groups", value)

    @_builtins.property
    @pulumi.getter
    def sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "sites")

    @sites.setter
    def sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "sites", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tenantGroups")
    def tenant_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tenant_groups")

    @tenant_groups.setter
    def tenant_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tenant_groups", value)

    @_builtins.property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tenants", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Defaults to `1000`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _ConfigContextState:
    def __init__(__self__, *,
                 cluster_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 cluster_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platforms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 site_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering ConfigContext resources.
        :param pulumi.Input[_builtins.int] weight: Defaults to `1000`.
        """
        if cluster_groups is not None:
            pulumi.set(__self__, "cluster_groups", cluster_groups)
        if cluster_types is not None:
            pulumi.set(__self__, "cluster_types", cluster_types)
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_types is not None:
            pulumi.set(__self__, "device_types", device_types)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platforms is not None:
            pulumi.set(__self__, "platforms", platforms)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if site_groups is not None:
            pulumi.set(__self__, "site_groups", site_groups)
        if sites is not None:
            pulumi.set(__self__, "sites", sites)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if tenant_groups is not None:
            pulumi.set(__self__, "tenant_groups", tenant_groups)
        if tenants is not None:
            pulumi.set(__self__, "tenants", tenants)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="clusterGroups")
    def cluster_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "cluster_groups")

    @cluster_groups.setter
    def cluster_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "cluster_groups", value)

    @_builtins.property
    @pulumi.getter(name="clusterTypes")
    def cluster_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "cluster_types")

    @cluster_types.setter
    def cluster_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "cluster_types", value)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "device_types")

    @device_types.setter
    def device_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "device_types", value)

    @_builtins.property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "locations", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "platforms")

    @platforms.setter
    def platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "platforms", value)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "regions", value)

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "roles", value)

    @_builtins.property
    @pulumi.getter(name="siteGroups")
    def site_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "site_groups")

    @site_groups.setter
    def site_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "site_groups", value)

    @_builtins.property
    @pulumi.getter
    def sites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "sites")

    @sites.setter
    def sites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "sites", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter(name="tenantGroups")
    def tenant_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tenant_groups")

    @tenant_groups.setter
    def tenant_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tenant_groups", value)

    @_builtins.property
    @pulumi.getter
    def tenants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tenants")

    @tenants.setter
    def tenants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tenants", value)

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Defaults to `1000`.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "weight", value)


@pulumi.type_token("netbox:index/configContext:ConfigContext")
class ConfigContext(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 cluster_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platforms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 site_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configcontext/):

        > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_netbox as netbox

        test = netbox.ConfigContext("test",
            name="%s",
            data=json.dumps({
                "testkey": "testval",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] weight: Defaults to `1000`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigContextArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configcontext/):

        > Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_netbox as netbox

        test = netbox.ConfigContext("test",
            name="%s",
            data=json.dumps({
                "testkey": "testval",
            }))
        ```

        :param str resource_name: The name of the resource.
        :param ConfigContextArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigContextArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 cluster_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 data: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 platforms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 site_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tenant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tenants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 weight: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigContextArgs.__new__(ConfigContextArgs)

            __props__.__dict__["cluster_groups"] = cluster_groups
            __props__.__dict__["cluster_types"] = cluster_types
            __props__.__dict__["clusters"] = clusters
            if data is None and not opts.urn:
                raise TypeError("Missing required property 'data'")
            __props__.__dict__["data"] = data
            __props__.__dict__["description"] = description
            __props__.__dict__["device_types"] = device_types
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["platforms"] = platforms
            __props__.__dict__["regions"] = regions
            __props__.__dict__["roles"] = roles
            __props__.__dict__["site_groups"] = site_groups
            __props__.__dict__["sites"] = sites
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_groups"] = tenant_groups
            __props__.__dict__["tenants"] = tenants
            __props__.__dict__["weight"] = weight
            __props__.__dict__["tags_alls"] = None
        super(ConfigContext, __self__).__init__(
            'netbox:index/configContext:ConfigContext',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            cluster_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            data: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_types: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            platforms: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            site_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            sites: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tenant_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tenants: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            weight: Optional[pulumi.Input[_builtins.int]] = None) -> 'ConfigContext':
        """
        Get an existing ConfigContext resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] weight: Defaults to `1000`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigContextState.__new__(_ConfigContextState)

        __props__.__dict__["cluster_groups"] = cluster_groups
        __props__.__dict__["cluster_types"] = cluster_types
        __props__.__dict__["clusters"] = clusters
        __props__.__dict__["data"] = data
        __props__.__dict__["description"] = description
        __props__.__dict__["device_types"] = device_types
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["platforms"] = platforms
        __props__.__dict__["regions"] = regions
        __props__.__dict__["roles"] = roles
        __props__.__dict__["site_groups"] = site_groups
        __props__.__dict__["sites"] = sites
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["tenant_groups"] = tenant_groups
        __props__.__dict__["tenants"] = tenants
        __props__.__dict__["weight"] = weight
        return ConfigContext(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterGroups")
    def cluster_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "cluster_groups")

    @_builtins.property
    @pulumi.getter(name="clusterTypes")
    def cluster_types(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "cluster_types")

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def data(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "data")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceTypes")
    def device_types(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "device_types")

    @_builtins.property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "locations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def platforms(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "platforms")

    @_builtins.property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "roles")

    @_builtins.property
    @pulumi.getter(name="siteGroups")
    def site_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "site_groups")

    @_builtins.property
    @pulumi.getter
    def sites(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "sites")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter(name="tenantGroups")
    def tenant_groups(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "tenant_groups")

    @_builtins.property
    @pulumi.getter
    def tenants(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "tenants")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Defaults to `1000`.
        """
        return pulumi.get(self, "weight")

