# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['CircuitTerminationArgs', 'CircuitTermination']

@pulumi.input_type
class CircuitTerminationArgs:
    def __init__(__self__, *,
                 circuit_id: pulumi.Input[_builtins.int],
                 term_side: pulumi.Input[_builtins.str],
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location_id: Optional[pulumi.Input[_builtins.int]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 provider_network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 upstream_speed: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a CircuitTermination resource.
        :param pulumi.Input[_builtins.str] term_side: Valid values are `A` and `Z`.
        :param pulumi.Input[_builtins.int] location_id: Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] provider_network_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        :param pulumi.Input[_builtins.int] region_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_group_id: Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_id: Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        pulumi.set(__self__, "circuit_id", circuit_id)
        pulumi.set(__self__, "term_side", term_side)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if port_speed is not None:
            pulumi.set(__self__, "port_speed", port_speed)
        if provider_network_id is not None:
            pulumi.set(__self__, "provider_network_id", provider_network_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if site_group_id is not None:
            pulumi.set(__self__, "site_group_id", site_group_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if upstream_speed is not None:
            pulumi.set(__self__, "upstream_speed", upstream_speed)

    @_builtins.property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "circuit_id", value)

    @_builtins.property
    @pulumi.getter(name="termSide")
    def term_side(self) -> pulumi.Input[_builtins.str]:
        """
        Valid values are `A` and `Z`.
        """
        return pulumi.get(self, "term_side")

    @term_side.setter
    def term_side(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "term_side", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "location_id", value)

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "port_speed")

    @port_speed.setter
    def port_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_speed", value)

    @_builtins.property
    @pulumi.getter(name="providerNetworkId")
    def provider_network_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        """
        return pulumi.get(self, "provider_network_id")

    @provider_network_id.setter
    def provider_network_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "provider_network_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="siteGroupId")
    def site_group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_group_id")

    @site_group_id.setter
    def site_group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_group_id", value)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="upstreamSpeed")
    def upstream_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "upstream_speed")

    @upstream_speed.setter
    def upstream_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "upstream_speed", value)


@pulumi.input_type
class _CircuitTerminationState:
    def __init__(__self__, *,
                 circuit_id: Optional[pulumi.Input[_builtins.int]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location_id: Optional[pulumi.Input[_builtins.int]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 provider_network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 term_side: Optional[pulumi.Input[_builtins.str]] = None,
                 upstream_speed: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering CircuitTermination resources.
        :param pulumi.Input[_builtins.int] location_id: Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] provider_network_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        :param pulumi.Input[_builtins.int] region_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_group_id: Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_id: Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.str] term_side: Valid values are `A` and `Z`.
        """
        if circuit_id is not None:
            pulumi.set(__self__, "circuit_id", circuit_id)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if port_speed is not None:
            pulumi.set(__self__, "port_speed", port_speed)
        if provider_network_id is not None:
            pulumi.set(__self__, "provider_network_id", provider_network_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if site_group_id is not None:
            pulumi.set(__self__, "site_group_id", site_group_id)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if term_side is not None:
            pulumi.set(__self__, "term_side", term_side)
        if upstream_speed is not None:
            pulumi.set(__self__, "upstream_speed", upstream_speed)

    @_builtins.property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "circuit_id")

    @circuit_id.setter
    def circuit_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "circuit_id", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "location_id", value)

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "port_speed")

    @port_speed.setter
    def port_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "port_speed", value)

    @_builtins.property
    @pulumi.getter(name="providerNetworkId")
    def provider_network_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        """
        return pulumi.get(self, "provider_network_id")

    @provider_network_id.setter
    def provider_network_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "provider_network_id", value)

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "region_id", value)

    @_builtins.property
    @pulumi.getter(name="siteGroupId")
    def site_group_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_group_id")

    @site_group_id.setter
    def site_group_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_group_id", value)

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "site_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter(name="termSide")
    def term_side(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `A` and `Z`.
        """
        return pulumi.get(self, "term_side")

    @term_side.setter
    def term_side(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "term_side", value)

    @_builtins.property
    @pulumi.getter(name="upstreamSpeed")
    def upstream_speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "upstream_speed")

    @upstream_speed.setter
    def upstream_speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "upstream_speed", value)


@pulumi.type_token("netbox:circuit/circuitTermination:CircuitTermination")
class CircuitTermination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 circuit_id: Optional[pulumi.Input[_builtins.int]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location_id: Optional[pulumi.Input[_builtins.int]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 provider_network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 term_side: Optional[pulumi.Input[_builtins.str]] = None,
                 upstream_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-terminations):

        > The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.
        > 
        > Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.dcim.Site("test",
            name="%[1]s",
            status="active")
        test_circuit_provider = netbox.circuit.CircuitProvider("test", name="%[1]s")
        test_circuit_type = netbox.circuit.CircuitType("test", name="%[1]s")
        test_circuit = netbox.circuit.Circuit("test",
            cid="%[1]s",
            status="active",
            provider_id=test_circuit_provider.id,
            type_id=test_circuit_type.id)
        test_circuit_termination = netbox.circuit.CircuitTermination("test",
            circuit_id=test_circuit.id,
            term_side="A",
            site_id=test.id,
            port_speed=100000,
            upstream_speed=50000)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] location_id: Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] provider_network_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        :param pulumi.Input[_builtins.int] region_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_group_id: Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_id: Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.str] term_side: Valid values are `A` and `Z`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CircuitTerminationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-terminations):

        > The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.
        > 
        > Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.dcim.Site("test",
            name="%[1]s",
            status="active")
        test_circuit_provider = netbox.circuit.CircuitProvider("test", name="%[1]s")
        test_circuit_type = netbox.circuit.CircuitType("test", name="%[1]s")
        test_circuit = netbox.circuit.Circuit("test",
            cid="%[1]s",
            status="active",
            provider_id=test_circuit_provider.id,
            type_id=test_circuit_type.id)
        test_circuit_termination = netbox.circuit.CircuitTermination("test",
            circuit_id=test_circuit.id,
            term_side="A",
            site_id=test.id,
            port_speed=100000,
            upstream_speed=50000)
        ```

        :param str resource_name: The name of the resource.
        :param CircuitTerminationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CircuitTerminationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 circuit_id: Optional[pulumi.Input[_builtins.int]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 location_id: Optional[pulumi.Input[_builtins.int]] = None,
                 port_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 provider_network_id: Optional[pulumi.Input[_builtins.int]] = None,
                 region_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_group_id: Optional[pulumi.Input[_builtins.int]] = None,
                 site_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 term_side: Optional[pulumi.Input[_builtins.str]] = None,
                 upstream_speed: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CircuitTerminationArgs.__new__(CircuitTerminationArgs)

            if circuit_id is None and not opts.urn:
                raise TypeError("Missing required property 'circuit_id'")
            __props__.__dict__["circuit_id"] = circuit_id
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["port_speed"] = port_speed
            __props__.__dict__["provider_network_id"] = provider_network_id
            __props__.__dict__["region_id"] = region_id
            __props__.__dict__["site_group_id"] = site_group_id
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["tags"] = tags
            if term_side is None and not opts.urn:
                raise TypeError("Missing required property 'term_side'")
            __props__.__dict__["term_side"] = term_side
            __props__.__dict__["upstream_speed"] = upstream_speed
            __props__.__dict__["tags_alls"] = None
        super(CircuitTermination, __self__).__init__(
            'netbox:circuit/circuitTermination:CircuitTermination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            circuit_id: Optional[pulumi.Input[_builtins.int]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            location_id: Optional[pulumi.Input[_builtins.int]] = None,
            port_speed: Optional[pulumi.Input[_builtins.int]] = None,
            provider_network_id: Optional[pulumi.Input[_builtins.int]] = None,
            region_id: Optional[pulumi.Input[_builtins.int]] = None,
            site_group_id: Optional[pulumi.Input[_builtins.int]] = None,
            site_id: Optional[pulumi.Input[_builtins.int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            term_side: Optional[pulumi.Input[_builtins.str]] = None,
            upstream_speed: Optional[pulumi.Input[_builtins.int]] = None) -> 'CircuitTermination':
        """
        Get an existing CircuitTermination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] location_id: Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] provider_network_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        :param pulumi.Input[_builtins.int] region_id: Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_group_id: Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.int] site_id: Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        :param pulumi.Input[_builtins.str] term_side: Valid values are `A` and `Z`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CircuitTerminationState.__new__(_CircuitTerminationState)

        __props__.__dict__["circuit_id"] = circuit_id
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["port_speed"] = port_speed
        __props__.__dict__["provider_network_id"] = provider_network_id
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["site_group_id"] = site_group_id
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["term_side"] = term_side
        __props__.__dict__["upstream_speed"] = upstream_speed
        return CircuitTermination(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="circuitId")
    def circuit_id(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "circuit_id")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Exactly one of `site_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "location_id")

    @_builtins.property
    @pulumi.getter(name="portSpeed")
    def port_speed(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "port_speed")

    @_builtins.property
    @pulumi.getter(name="providerNetworkId")
    def provider_network_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `region_id` must be given.
        """
        return pulumi.get(self, "provider_network_id")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `site_group_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter(name="siteGroupId")
    def site_group_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_group_id")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Exactly one of `location_id`, `site_group_id`, `region_id` or `provider_network_id` must be given.
        """
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter(name="termSide")
    def term_side(self) -> pulumi.Output[_builtins.str]:
        """
        Valid values are `A` and `Z`.
        """
        return pulumi.get(self, "term_side")

    @_builtins.property
    @pulumi.getter(name="upstreamSpeed")
    def upstream_speed(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "upstream_speed")

