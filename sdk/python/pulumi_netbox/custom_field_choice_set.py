# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CustomFieldChoiceSetArgs', 'CustomFieldChoiceSet']

@pulumi.input_type
class CustomFieldChoiceSetArgs:
    def __init__(__self__, *,
                 base_choices: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_alphabetically: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a CustomFieldChoiceSet resource.
        :param pulumi.Input[_builtins.str] base_choices: Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] extra_choices: This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[_builtins.bool] order_alphabetically: experimental. Defaults to `false`.
        """
        if base_choices is not None:
            pulumi.set(__self__, "base_choices", base_choices)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extra_choices is not None:
            pulumi.set(__self__, "extra_choices", extra_choices)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order_alphabetically is not None:
            pulumi.set(__self__, "order_alphabetically", order_alphabetically)

    @_builtins.property
    @pulumi.getter(name="baseChoices")
    def base_choices(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "base_choices")

    @base_choices.setter
    def base_choices(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_choices", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="extraChoices")
    def extra_choices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]:
        """
        This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "extra_choices")

    @extra_choices.setter
    def extra_choices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "extra_choices", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orderAlphabetically")
    def order_alphabetically(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        experimental. Defaults to `false`.
        """
        return pulumi.get(self, "order_alphabetically")

    @order_alphabetically.setter
    def order_alphabetically(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_alphabetically", value)


@pulumi.input_type
class _CustomFieldChoiceSetState:
    def __init__(__self__, *,
                 base_choices: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_alphabetically: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering CustomFieldChoiceSet resources.
        :param pulumi.Input[_builtins.str] base_choices: Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] extra_choices: This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[_builtins.bool] order_alphabetically: experimental. Defaults to `false`.
        """
        if base_choices is not None:
            pulumi.set(__self__, "base_choices", base_choices)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if extra_choices is not None:
            pulumi.set(__self__, "extra_choices", extra_choices)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order_alphabetically is not None:
            pulumi.set(__self__, "order_alphabetically", order_alphabetically)

    @_builtins.property
    @pulumi.getter(name="baseChoices")
    def base_choices(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "base_choices")

    @base_choices.setter
    def base_choices(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "base_choices", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="extraChoices")
    def extra_choices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]:
        """
        This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "extra_choices")

    @extra_choices.setter
    def extra_choices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]]):
        pulumi.set(self, "extra_choices", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="orderAlphabetically")
    def order_alphabetically(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        experimental. Defaults to `false`.
        """
        return pulumi.get(self, "order_alphabetically")

    @order_alphabetically.setter
    def order_alphabetically(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "order_alphabetically", value)


@pulumi.type_token("netbox:index/customFieldChoiceSet:CustomFieldChoiceSet")
class CustomFieldChoiceSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_choices: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_alphabetically: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/customfieldchoiceset/):

        Single- and multi-selection custom fields must define a set of valid choices from which the user may choose when defining the field value. These choices are defined as sets that may be reused among multiple custom fields.

        A choice set must define a base choice set and/or a set of arbitrary extra choices.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.CustomFieldChoiceSet("test",
            name="my-custom-field-set",
            description="Description",
            extra_choices=[
                [
                    "choice1",
                    "label1",
                ],
                [
                    "choice2",
                    "choice2",
                ],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base_choices: Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] extra_choices: This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[_builtins.bool] order_alphabetically: experimental. Defaults to `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CustomFieldChoiceSetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/customfieldchoiceset/):

        Single- and multi-selection custom fields must define a set of valid choices from which the user may choose when defining the field value. These choices are defined as sets that may be reused among multiple custom fields.

        A choice set must define a base choice set and/or a set of arbitrary extra choices.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.CustomFieldChoiceSet("test",
            name="my-custom-field-set",
            description="Description",
            extra_choices=[
                [
                    "choice1",
                    "label1",
                ],
                [
                    "choice2",
                    "choice2",
                ],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param CustomFieldChoiceSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomFieldChoiceSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base_choices: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 extra_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 order_alphabetically: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomFieldChoiceSetArgs.__new__(CustomFieldChoiceSetArgs)

            __props__.__dict__["base_choices"] = base_choices
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["extra_choices"] = extra_choices
            __props__.__dict__["name"] = name
            __props__.__dict__["order_alphabetically"] = order_alphabetically
        super(CustomFieldChoiceSet, __self__).__init__(
            'netbox:index/customFieldChoiceSet:CustomFieldChoiceSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base_choices: Optional[pulumi.Input[_builtins.str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            extra_choices: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            order_alphabetically: Optional[pulumi.Input[_builtins.bool]] = None) -> 'CustomFieldChoiceSet':
        """
        Get an existing CustomFieldChoiceSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] base_choices: Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]] extra_choices: This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        :param pulumi.Input[_builtins.bool] order_alphabetically: experimental. Defaults to `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomFieldChoiceSetState.__new__(_CustomFieldChoiceSetState)

        __props__.__dict__["base_choices"] = base_choices
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["extra_choices"] = extra_choices
        __props__.__dict__["name"] = name
        __props__.__dict__["order_alphabetically"] = order_alphabetically
        return CustomFieldChoiceSet(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="baseChoices")
    def base_choices(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "base_choices")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="extraChoices")
    def extra_choices(self) -> pulumi.Output[Optional[Sequence[Sequence[_builtins.str]]]]:
        """
        This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.
        """
        return pulumi.get(self, "extra_choices")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="orderAlphabetically")
    def order_alphabetically(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        experimental. Defaults to `false`.
        """
        return pulumi.get(self, "order_alphabetically")

