# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PowerFeedArgs', 'PowerFeed']

@pulumi.input_type
class PowerFeedArgs:
    def __init__(__self__, *,
                 amperage: pulumi.Input[_builtins.int],
                 max_percent_utilization: pulumi.Input[_builtins.int],
                 phase: pulumi.Input[_builtins.str],
                 power_panel_id: pulumi.Input[_builtins.int],
                 status: pulumi.Input[_builtins.str],
                 supply: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 voltage: pulumi.Input[_builtins.int],
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rack_id: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a PowerFeed resource.
        :param pulumi.Input[_builtins.str] phase: One of [single-phase, three-phase].
        :param pulumi.Input[_builtins.str] status: One of [offline, active, planned, failed].
        :param pulumi.Input[_builtins.str] supply: One of [ac, dc].
        :param pulumi.Input[_builtins.str] type: One of [primary, redundant].
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        """
        pulumi.set(__self__, "amperage", amperage)
        pulumi.set(__self__, "max_percent_utilization", max_percent_utilization)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "power_panel_id", power_panel_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "supply", supply)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "voltage", voltage)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mark_connected is not None:
            pulumi.set(__self__, "mark_connected", mark_connected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rack_id is not None:
            pulumi.set(__self__, "rack_id", rack_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def amperage(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "amperage")

    @amperage.setter
    def amperage(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "amperage", value)

    @_builtins.property
    @pulumi.getter(name="maxPercentUtilization")
    def max_percent_utilization(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "max_percent_utilization")

    @max_percent_utilization.setter
    def max_percent_utilization(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "max_percent_utilization", value)

    @_builtins.property
    @pulumi.getter
    def phase(self) -> pulumi.Input[_builtins.str]:
        """
        One of [single-phase, three-phase].
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "phase", value)

    @_builtins.property
    @pulumi.getter(name="powerPanelId")
    def power_panel_id(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "power_panel_id")

    @power_panel_id.setter
    def power_panel_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "power_panel_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Input[_builtins.str]:
        """
        One of [offline, active, planned, failed].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def supply(self) -> pulumi.Input[_builtins.str]:
        """
        One of [ac, dc].
        """
        return pulumi.get(self, "supply")

    @supply.setter
    def supply(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "supply", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        One of [primary, redundant].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def voltage(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "voltage")

    @voltage.setter
    def voltage(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "voltage", value)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @mark_connected.setter
    def mark_connected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_connected", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rack_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _PowerFeedState:
    def __init__(__self__, *,
                 amperage: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_percent_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 phase: Optional[pulumi.Input[_builtins.str]] = None,
                 power_panel_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rack_id: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 supply: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 voltage: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering PowerFeed resources.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] phase: One of [single-phase, three-phase].
        :param pulumi.Input[_builtins.str] status: One of [offline, active, planned, failed].
        :param pulumi.Input[_builtins.str] supply: One of [ac, dc].
        :param pulumi.Input[_builtins.str] type: One of [primary, redundant].
        """
        if amperage is not None:
            pulumi.set(__self__, "amperage", amperage)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mark_connected is not None:
            pulumi.set(__self__, "mark_connected", mark_connected)
        if max_percent_utilization is not None:
            pulumi.set(__self__, "max_percent_utilization", max_percent_utilization)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if power_panel_id is not None:
            pulumi.set(__self__, "power_panel_id", power_panel_id)
        if rack_id is not None:
            pulumi.set(__self__, "rack_id", rack_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if supply is not None:
            pulumi.set(__self__, "supply", supply)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if voltage is not None:
            pulumi.set(__self__, "voltage", voltage)

    @_builtins.property
    @pulumi.getter
    def amperage(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "amperage")

    @amperage.setter
    def amperage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "amperage", value)

    @_builtins.property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "comments", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @mark_connected.setter
    def mark_connected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_connected", value)

    @_builtins.property
    @pulumi.getter(name="maxPercentUtilization")
    def max_percent_utilization(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "max_percent_utilization")

    @max_percent_utilization.setter
    def max_percent_utilization(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_percent_utilization", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        One of [single-phase, three-phase].
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "phase", value)

    @_builtins.property
    @pulumi.getter(name="powerPanelId")
    def power_panel_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "power_panel_id")

    @power_panel_id.setter
    def power_panel_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "power_panel_id", value)

    @_builtins.property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rack_id", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        One of [offline, active, planned, failed].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def supply(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        One of [ac, dc].
        """
        return pulumi.get(self, "supply")

    @supply.setter
    def supply(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "supply", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        One of [primary, redundant].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def voltage(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "voltage")

    @voltage.setter
    def voltage(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "voltage", value)


@pulumi.type_token("netbox:dcim/powerFeed:PowerFeed")
class PowerFeed(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amperage: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_percent_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 phase: Optional[pulumi.Input[_builtins.str]] = None,
                 power_panel_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rack_id: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 supply: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 voltage: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerfeed/):

        > A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.dcim.Site("test",
            name="Site 1",
            status="active")
        test_location = netbox.dcim.Location("test",
            name="Location 1",
            site_id=test.id)
        test_power_panel = netbox.dcim.PowerPanel("test",
            name="Power Panel 1",
            site_id=test.id,
            location_id=test_location.id)
        test_power_feed = netbox.dcim.PowerFeed("test",
            power_panel_id=test_power_panel.id,
            name="Power Feed 1",
            status="active",
            type="primary",
            supply="ac",
            phase="single-phase",
            voltage=250,
            amperage=100,
            max_percent_utilization=80)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] phase: One of [single-phase, three-phase].
        :param pulumi.Input[_builtins.str] status: One of [offline, active, planned, failed].
        :param pulumi.Input[_builtins.str] supply: One of [ac, dc].
        :param pulumi.Input[_builtins.str] type: One of [primary, redundant].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PowerFeedArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerfeed/):

        > A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        test = netbox.dcim.Site("test",
            name="Site 1",
            status="active")
        test_location = netbox.dcim.Location("test",
            name="Location 1",
            site_id=test.id)
        test_power_panel = netbox.dcim.PowerPanel("test",
            name="Power Panel 1",
            site_id=test.id,
            location_id=test_location.id)
        test_power_feed = netbox.dcim.PowerFeed("test",
            power_panel_id=test_power_panel.id,
            name="Power Feed 1",
            status="active",
            type="primary",
            supply="ac",
            phase="single-phase",
            voltage=250,
            amperage=100,
            max_percent_utilization=80)
        ```

        :param str resource_name: The name of the resource.
        :param PowerFeedArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PowerFeedArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amperage: Optional[pulumi.Input[_builtins.int]] = None,
                 comments: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 max_percent_utilization: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 phase: Optional[pulumi.Input[_builtins.str]] = None,
                 power_panel_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rack_id: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 supply: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 voltage: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PowerFeedArgs.__new__(PowerFeedArgs)

            if amperage is None and not opts.urn:
                raise TypeError("Missing required property 'amperage'")
            __props__.__dict__["amperage"] = amperage
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["mark_connected"] = mark_connected
            if max_percent_utilization is None and not opts.urn:
                raise TypeError("Missing required property 'max_percent_utilization'")
            __props__.__dict__["max_percent_utilization"] = max_percent_utilization
            __props__.__dict__["name"] = name
            if phase is None and not opts.urn:
                raise TypeError("Missing required property 'phase'")
            __props__.__dict__["phase"] = phase
            if power_panel_id is None and not opts.urn:
                raise TypeError("Missing required property 'power_panel_id'")
            __props__.__dict__["power_panel_id"] = power_panel_id
            __props__.__dict__["rack_id"] = rack_id
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if supply is None and not opts.urn:
                raise TypeError("Missing required property 'supply'")
            __props__.__dict__["supply"] = supply
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if voltage is None and not opts.urn:
                raise TypeError("Missing required property 'voltage'")
            __props__.__dict__["voltage"] = voltage
            __props__.__dict__["tags_alls"] = None
        super(PowerFeed, __self__).__init__(
            'netbox:dcim/powerFeed:PowerFeed',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            amperage: Optional[pulumi.Input[_builtins.int]] = None,
            comments: Optional[pulumi.Input[_builtins.str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
            max_percent_utilization: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            phase: Optional[pulumi.Input[_builtins.str]] = None,
            power_panel_id: Optional[pulumi.Input[_builtins.int]] = None,
            rack_id: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            supply: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            voltage: Optional[pulumi.Input[_builtins.int]] = None) -> 'PowerFeed':
        """
        Get an existing PowerFeed resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] phase: One of [single-phase, three-phase].
        :param pulumi.Input[_builtins.str] status: One of [offline, active, planned, failed].
        :param pulumi.Input[_builtins.str] supply: One of [ac, dc].
        :param pulumi.Input[_builtins.str] type: One of [primary, redundant].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PowerFeedState.__new__(_PowerFeedState)

        __props__.__dict__["amperage"] = amperage
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["mark_connected"] = mark_connected
        __props__.__dict__["max_percent_utilization"] = max_percent_utilization
        __props__.__dict__["name"] = name
        __props__.__dict__["phase"] = phase
        __props__.__dict__["power_panel_id"] = power_panel_id
        __props__.__dict__["rack_id"] = rack_id
        __props__.__dict__["status"] = status
        __props__.__dict__["supply"] = supply
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["type"] = type
        __props__.__dict__["voltage"] = voltage
        return PowerFeed(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def amperage(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "amperage")

    @_builtins.property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @_builtins.property
    @pulumi.getter(name="maxPercentUtilization")
    def max_percent_utilization(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "max_percent_utilization")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def phase(self) -> pulumi.Output[_builtins.str]:
        """
        One of [single-phase, three-phase].
        """
        return pulumi.get(self, "phase")

    @_builtins.property
    @pulumi.getter(name="powerPanelId")
    def power_panel_id(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "power_panel_id")

    @_builtins.property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "rack_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        One of [offline, active, planned, failed].
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def supply(self) -> pulumi.Output[_builtins.str]:
        """
        One of [ac, dc].
        """
        return pulumi.get(self, "supply")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        One of [primary, redundant].
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def voltage(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "voltage")

