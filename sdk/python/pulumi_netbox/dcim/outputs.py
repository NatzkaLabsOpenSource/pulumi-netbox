# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'CableATermination',
    'CableBTermination',
    'DeviceInterfaceMacAddress',
    'GetDeviceInterfacesFilterResult',
    'GetDeviceInterfacesInterfaceResult',
    'GetDeviceInterfacesInterfaceMacAddressResult',
    'GetDeviceInterfacesInterfaceTaggedVlanResult',
    'GetDeviceInterfacesInterfaceUntaggedVlanResult',
    'GetDevicesDeviceResult',
    'GetDevicesFilterResult',
    'GetLocationsFilterResult',
    'GetLocationsLocationResult',
    'GetRacksFilterResult',
    'GetRacksRackResult',
    'GetRegionFilterResult',
]

@pulumi.output_type
class CableATermination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CableATermination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CableATermination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CableATermination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: _builtins.int,
                 object_type: _builtins.str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.int:
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class CableBTermination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CableBTermination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CableBTermination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CableBTermination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: _builtins.int,
                 object_type: _builtins.str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @_builtins.property
    @pulumi.getter(name="objectId")
    def object_id(self) -> _builtins.int:
        return pulumi.get(self, "object_id")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class DeviceInterfaceMacAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "macAddress":
            suggest = "mac_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeviceInterfaceMacAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeviceInterfaceMacAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeviceInterfaceMacAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 id: Optional[_builtins.int] = None,
                 mac_address: Optional[_builtins.str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class GetDeviceInterfacesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeviceInterfacesInterfaceResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 device_id: _builtins.int,
                 enabled: _builtins.bool,
                 id: _builtins.int,
                 mac_address: _builtins.str,
                 mac_addresses: Sequence['outputs.GetDeviceInterfacesInterfaceMacAddressResult'],
                 mode: Mapping[str, _builtins.str],
                 mtu: _builtins.int,
                 name: _builtins.str,
                 tag_ids: Sequence[_builtins.int],
                 tagged_vlans: Sequence['outputs.GetDeviceInterfacesInterfaceTaggedVlanResult'],
                 untagged_vlans: Sequence['outputs.GetDeviceInterfacesInterfaceUntaggedVlanResult']):
        """
        :param _builtins.str mac_address: The MAC address as string from the first MAC address assigned to this interface, if any.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mac_addresses", mac_addresses)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tagged_vlans", tagged_vlans)
        pulumi.set(__self__, "untagged_vlans", untagged_vlans)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.int:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The MAC address as string from the first MAC address assigned to this interface, if any.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddresses")
    def mac_addresses(self) -> Sequence['outputs.GetDeviceInterfacesInterfaceMacAddressResult']:
        return pulumi.get(self, "mac_addresses")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> _builtins.int:
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[_builtins.int]:
        return pulumi.get(self, "tag_ids")

    @_builtins.property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> Sequence['outputs.GetDeviceInterfacesInterfaceTaggedVlanResult']:
        return pulumi.get(self, "tagged_vlans")

    @_builtins.property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Sequence['outputs.GetDeviceInterfacesInterfaceUntaggedVlanResult']:
        return pulumi.get(self, "untagged_vlans")


@pulumi.output_type
class GetDeviceInterfacesInterfaceMacAddressResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.int,
                 mac_address: _builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac_address", mac_address)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class GetDeviceInterfacesInterfaceTaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 vid: _builtins.int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vid(self) -> _builtins.int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetDeviceInterfacesInterfaceUntaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: _builtins.int,
                 name: _builtins.str,
                 vid: _builtins.int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vid(self) -> _builtins.int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetDevicesDeviceResult(dict):
    def __init__(__self__, *,
                 asset_tag: _builtins.str,
                 cluster_id: _builtins.int,
                 comments: _builtins.str,
                 config_context: _builtins.str,
                 custom_fields: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 device_id: _builtins.int,
                 device_type_id: _builtins.int,
                 local_context_data: _builtins.str,
                 location_id: _builtins.int,
                 manufacturer_id: _builtins.int,
                 model: _builtins.str,
                 name: _builtins.str,
                 oob_ip: _builtins.str,
                 platform_id: _builtins.int,
                 primary_ipv4: _builtins.str,
                 primary_ipv6: _builtins.str,
                 rack_face: _builtins.str,
                 rack_id: _builtins.int,
                 rack_position: _builtins.float,
                 role_id: _builtins.int,
                 serial: _builtins.str,
                 site_id: _builtins.int,
                 status: _builtins.str,
                 tags: Sequence[_builtins.str],
                 tenant_id: _builtins.int):
        pulumi.set(__self__, "asset_tag", asset_tag)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "config_context", config_context)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_type_id", device_type_id)
        pulumi.set(__self__, "local_context_data", local_context_data)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oob_ip", oob_ip)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "primary_ipv4", primary_ipv4)
        pulumi.set(__self__, "primary_ipv6", primary_ipv6)
        pulumi.set(__self__, "rack_face", rack_face)
        pulumi.set(__self__, "rack_id", rack_id)
        pulumi.set(__self__, "rack_position", rack_position)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> _builtins.str:
        return pulumi.get(self, "asset_tag")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.int:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def comments(self) -> _builtins.str:
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter(name="configContext")
    def config_context(self) -> _builtins.str:
        return pulumi.get(self, "config_context")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> _builtins.int:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter(name="deviceTypeId")
    def device_type_id(self) -> _builtins.int:
        return pulumi.get(self, "device_type_id")

    @_builtins.property
    @pulumi.getter(name="localContextData")
    def local_context_data(self) -> _builtins.str:
        return pulumi.get(self, "local_context_data")

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> _builtins.int:
        return pulumi.get(self, "location_id")

    @_builtins.property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> _builtins.int:
        return pulumi.get(self, "manufacturer_id")

    @_builtins.property
    @pulumi.getter
    def model(self) -> _builtins.str:
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="oobIp")
    def oob_ip(self) -> _builtins.str:
        return pulumi.get(self, "oob_ip")

    @_builtins.property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> _builtins.int:
        return pulumi.get(self, "platform_id")

    @_builtins.property
    @pulumi.getter(name="primaryIpv4")
    def primary_ipv4(self) -> _builtins.str:
        return pulumi.get(self, "primary_ipv4")

    @_builtins.property
    @pulumi.getter(name="primaryIpv6")
    def primary_ipv6(self) -> _builtins.str:
        return pulumi.get(self, "primary_ipv6")

    @_builtins.property
    @pulumi.getter(name="rackFace")
    def rack_face(self) -> _builtins.str:
        return pulumi.get(self, "rack_face")

    @_builtins.property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> _builtins.int:
        return pulumi.get(self, "rack_id")

    @_builtins.property
    @pulumi.getter(name="rackPosition")
    def rack_position(self) -> _builtins.float:
        return pulumi.get(self, "rack_position")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.int:
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> _builtins.str:
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.int:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetDevicesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLocationsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the field to filter on. Supported fields are: .
        :param _builtins.str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the field to filter on. Supported fields are: .
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLocationsLocationResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 facility: _builtins.str,
                 id: _builtins.str,
                 parent_id: _builtins.int,
                 site_id: _builtins.int,
                 status: _builtins.str,
                 tenant_id: _builtins.int,
                 name: Optional[_builtins.str] = None,
                 slug: Optional[_builtins.str] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "facility", facility)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def facility(self) -> _builtins.str:
        return pulumi.get(self, "facility")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.int:
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.int:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetRacksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRacksRackResult(dict):
    def __init__(__self__, *,
                 asset_tag: _builtins.str,
                 comments: _builtins.str,
                 custom_fields: Mapping[str, _builtins.str],
                 desc_units: _builtins.bool,
                 description: _builtins.str,
                 facility_id: _builtins.str,
                 id: _builtins.int,
                 location_id: _builtins.int,
                 max_weight: _builtins.int,
                 mounting_depth: _builtins.int,
                 name: _builtins.str,
                 outer_depth: _builtins.int,
                 outer_unit: _builtins.str,
                 outer_width: _builtins.int,
                 role_id: _builtins.int,
                 serial: _builtins.str,
                 site_id: _builtins.int,
                 status: _builtins.str,
                 tags: Sequence[_builtins.str],
                 tenant_id: _builtins.int,
                 type_id: _builtins.int,
                 u_height: _builtins.int,
                 weight: _builtins.float,
                 weight_unit: _builtins.str,
                 width: _builtins.int):
        pulumi.set(__self__, "asset_tag", asset_tag)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "desc_units", desc_units)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "facility_id", facility_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "max_weight", max_weight)
        pulumi.set(__self__, "mounting_depth", mounting_depth)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "outer_depth", outer_depth)
        pulumi.set(__self__, "outer_unit", outer_unit)
        pulumi.set(__self__, "outer_width", outer_width)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type_id", type_id)
        pulumi.set(__self__, "u_height", u_height)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_unit", weight_unit)
        pulumi.set(__self__, "width", width)

    @_builtins.property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> _builtins.str:
        return pulumi.get(self, "asset_tag")

    @_builtins.property
    @pulumi.getter
    def comments(self) -> _builtins.str:
        return pulumi.get(self, "comments")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter(name="descUnits")
    def desc_units(self) -> _builtins.bool:
        return pulumi.get(self, "desc_units")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="facilityId")
    def facility_id(self) -> _builtins.str:
        return pulumi.get(self, "facility_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.int:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="locationId")
    def location_id(self) -> _builtins.int:
        return pulumi.get(self, "location_id")

    @_builtins.property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> _builtins.int:
        return pulumi.get(self, "max_weight")

    @_builtins.property
    @pulumi.getter(name="mountingDepth")
    def mounting_depth(self) -> _builtins.int:
        return pulumi.get(self, "mounting_depth")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="outerDepth")
    def outer_depth(self) -> _builtins.int:
        return pulumi.get(self, "outer_depth")

    @_builtins.property
    @pulumi.getter(name="outerUnit")
    def outer_unit(self) -> _builtins.str:
        return pulumi.get(self, "outer_unit")

    @_builtins.property
    @pulumi.getter(name="outerWidth")
    def outer_width(self) -> _builtins.int:
        return pulumi.get(self, "outer_width")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.int:
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter
    def serial(self) -> _builtins.str:
        return pulumi.get(self, "serial")

    @_builtins.property
    @pulumi.getter(name="siteId")
    def site_id(self) -> _builtins.int:
        return pulumi.get(self, "site_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.int:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter(name="typeId")
    def type_id(self) -> _builtins.int:
        return pulumi.get(self, "type_id")

    @_builtins.property
    @pulumi.getter(name="uHeight")
    def u_height(self) -> _builtins.int:
        return pulumi.get(self, "u_height")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.float:
        return pulumi.get(self, "weight")

    @_builtins.property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> _builtins.str:
        return pulumi.get(self, "weight_unit")

    @_builtins.property
    @pulumi.getter
    def width(self) -> _builtins.int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetRegionFilterResult(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.int] = None,
                 name: Optional[_builtins.str] = None,
                 slug: Optional[_builtins.str] = None):
        """
        :param _builtins.int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "slug")


