# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetDeviceRoleResult',
    'AwaitableGetDeviceRoleResult',
    'get_device_role',
    'get_device_role_output',
]

@pulumi.output_type
class GetDeviceRoleResult:
    """
    A collection of values returned by getDeviceRole.
    """
    def __init__(__self__, color_hex=None, id=None, name=None, slug=None, tags=None):
        if color_hex and not isinstance(color_hex, str):
            raise TypeError("Expected argument 'color_hex' to be a str")
        pulumi.set(__self__, "color_hex", color_hex)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> _builtins.str:
        return pulumi.get(self, "color_hex")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> _builtins.str:
        return pulumi.get(self, "slug")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")


class AwaitableGetDeviceRoleResult(GetDeviceRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceRoleResult(
            color_hex=self.color_hex,
            id=self.id,
            name=self.name,
            slug=self.slug,
            tags=self.tags)


def get_device_role(name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceRoleResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    core_sw = netbox.dcim.get_device_role(name="core-sw")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:dcim/getDeviceRole:getDeviceRole', __args__, opts=opts, typ=GetDeviceRoleResult).value

    return AwaitableGetDeviceRoleResult(
        color_hex=pulumi.get(__ret__, 'color_hex'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'),
        tags=pulumi.get(__ret__, 'tags'))
def get_device_role_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDeviceRoleResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_netbox as netbox

    core_sw = netbox.dcim.get_device_role(name="core-sw")
    ```
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('netbox:dcim/getDeviceRole:getDeviceRole', __args__, opts=opts, typ=GetDeviceRoleResult)
    return __ret__.apply(lambda __response__: GetDeviceRoleResult(
        color_hex=pulumi.get(__response__, 'color_hex'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        slug=pulumi.get(__response__, 'slug'),
        tags=pulumi.get(__response__, 'tags')))
