# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CableATerminationArgs',
    'CableATerminationArgsDict',
    'CableBTerminationArgs',
    'CableBTerminationArgsDict',
    'GetDeviceInterfacesFilterArgs',
    'GetDeviceInterfacesFilterArgsDict',
    'GetDevicesFilterArgs',
    'GetDevicesFilterArgsDict',
    'GetLocationsFilterArgs',
    'GetLocationsFilterArgsDict',
    'GetRacksFilterArgs',
    'GetRacksFilterArgsDict',
    'GetRegionFilterArgs',
    'GetRegionFilterArgsDict',
]

MYPY = False

if not MYPY:
    class CableATerminationArgsDict(TypedDict):
        object_id: pulumi.Input[int]
        object_type: pulumi.Input[str]
elif False:
    CableATerminationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CableATerminationArgs:
    def __init__(__self__, *,
                 object_id: pulumi.Input[int],
                 object_type: pulumi.Input[str]):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class CableBTerminationArgsDict(TypedDict):
        object_id: pulumi.Input[int]
        object_type: pulumi.Input[str]
elif False:
    CableBTerminationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CableBTerminationArgs:
    def __init__(__self__, *,
                 object_id: pulumi.Input[int],
                 object_type: pulumi.Input[str]):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class GetDeviceInterfacesFilterArgsDict(TypedDict):
        name: str
        value: str
elif False:
    GetDeviceInterfacesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDeviceInterfacesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetDevicesFilterArgsDict(TypedDict):
        name: str
        value: str
elif False:
    GetDevicesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDevicesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetLocationsFilterArgsDict(TypedDict):
        name: str
        """
        The name of the field to filter on. Supported fields are: .
        """
        value: str
        """
        The value to pass to the specified filter.
        """
elif False:
    GetLocationsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetLocationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the field to filter on. Supported fields are: .
        :param str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter on. Supported fields are: .
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetRacksFilterArgsDict(TypedDict):
        name: str
        value: str
elif False:
    GetRacksFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRacksFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetRegionFilterArgsDict(TypedDict):
        id: NotRequired[int]
        """
        The ID of this resource.
        """
        name: NotRequired[str]
        slug: NotRequired[str]
elif False:
    GetRegionFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetRegionFilterArgs:
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[str]):
        pulumi.set(self, "slug", value)


