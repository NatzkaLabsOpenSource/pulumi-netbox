# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['PlatformArgs', 'Platform']

@pulumi.input_type
class PlatformArgs:
    def __init__(__self__, *,
                 manufacturer_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Platform resource.
        """
        if manufacturer_id is not None:
            pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "manufacturer_id")

    @manufacturer_id.setter
    def manufacturer_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "manufacturer_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _PlatformState:
    def __init__(__self__, *,
                 manufacturer_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Platform resources.
        """
        if manufacturer_id is not None:
            pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @_builtins.property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "manufacturer_id")

    @manufacturer_id.setter
    def manufacturer_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "manufacturer_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "slug", value)


@pulumi.type_token("netbox:dcim/platform:Platform")
class Platform(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 manufacturer_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#platforms):

        > A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Resource for PanOS (e.g. Panorama from Palo Alto)
        panos = netbox.dcim.Platform("PANOS", name="PANOS")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PlatformArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#platforms):

        > A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Resource for PanOS (e.g. Panorama from Palo Alto)
        panos = netbox.dcim.Platform("PANOS", name="PANOS")
        ```

        :param str resource_name: The name of the resource.
        :param PlatformArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlatformArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 manufacturer_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 slug: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlatformArgs.__new__(PlatformArgs)

            __props__.__dict__["manufacturer_id"] = manufacturer_id
            __props__.__dict__["name"] = name
            __props__.__dict__["slug"] = slug
        super(Platform, __self__).__init__(
            'netbox:dcim/platform:Platform',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            manufacturer_id: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            slug: Optional[pulumi.Input[_builtins.str]] = None) -> 'Platform':
        """
        Get an existing Platform resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlatformState.__new__(_PlatformState)

        __props__.__dict__["manufacturer_id"] = manufacturer_id
        __props__.__dict__["name"] = name
        __props__.__dict__["slug"] = slug
        return Platform(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "manufacturer_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def slug(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "slug")

