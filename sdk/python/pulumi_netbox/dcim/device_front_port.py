# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DeviceFrontPortArgs', 'DeviceFrontPort']

@pulumi.input_type
class DeviceFrontPortArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[_builtins.int],
                 rear_port_id: pulumi.Input[_builtins.int],
                 rear_port_position: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str],
                 color_hex: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 module_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a DeviceFrontPort resource.
        :param pulumi.Input[_builtins.str] type: One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "rear_port_id", rear_port_id)
        pulumi.set(__self__, "rear_port_position", rear_port_position)
        pulumi.set(__self__, "type", type)
        if color_hex is not None:
            pulumi.set(__self__, "color_hex", color_hex)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mark_connected is not None:
            pulumi.set(__self__, "mark_connected", mark_connected)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter(name="rearPortId")
    def rear_port_id(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "rear_port_id")

    @rear_port_id.setter
    def rear_port_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "rear_port_id", value)

    @_builtins.property
    @pulumi.getter(name="rearPortPosition")
    def rear_port_position(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "rear_port_position")

    @rear_port_position.setter
    def rear_port_position(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "rear_port_position", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "color_hex")

    @color_hex.setter
    def color_hex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_hex", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @mark_connected.setter
    def mark_connected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_connected", value)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DeviceFrontPortState:
    def __init__(__self__, *,
                 color_hex: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 module_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rear_port_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rear_port_position: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeviceFrontPort resources.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] type: One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        if color_hex is not None:
            pulumi.set(__self__, "color_hex", color_hex)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if mark_connected is not None:
            pulumi.set(__self__, "mark_connected", mark_connected)
        if module_id is not None:
            pulumi.set(__self__, "module_id", module_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rear_port_id is not None:
            pulumi.set(__self__, "rear_port_id", rear_port_id)
        if rear_port_position is not None:
            pulumi.set(__self__, "rear_port_position", rear_port_position)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "color_hex")

    @color_hex.setter
    def color_hex(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "color_hex", value)

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_fields", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @mark_connected.setter
    def mark_connected(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mark_connected", value)

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "module_id")

    @module_id.setter
    def module_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "module_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rearPortId")
    def rear_port_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rear_port_id")

    @rear_port_id.setter
    def rear_port_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rear_port_id", value)

    @_builtins.property
    @pulumi.getter(name="rearPortPosition")
    def rear_port_position(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "rear_port_position")

    @rear_port_position.setter
    def rear_port_position(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rear_port_position", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("netbox:dcim/deviceFrontPort:DeviceFrontPort")
class DeviceFrontPort(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color_hex: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 module_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rear_port_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rear_port_position: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/frontport/):

        > Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Note that some terraform code is not included in the example for brevity
        test = netbox.dcim.Device("test",
            name="%[1]s",
            device_type_id=test_netbox_device_type["id"],
            role_id=test_netbox_device_role["id"],
            site_id=test_netbox_site["id"])
        test_device_rear_port = netbox.dcim.DeviceRearPort("test",
            device_id=test.id,
            name="rear port 1",
            type="8p8c",
            positions=2,
            mark_connected=True)
        test_device_front_port = netbox.dcim.DeviceFrontPort("test",
            device_id=test.id,
            name="front port 1",
            type="8p8c",
            rear_port_id=test_device_rear_port.id,
            rear_port_position=2)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] type: One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceFrontPortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/frontport/):

        > Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Note that some terraform code is not included in the example for brevity
        test = netbox.dcim.Device("test",
            name="%[1]s",
            device_type_id=test_netbox_device_type["id"],
            role_id=test_netbox_device_role["id"],
            site_id=test_netbox_site["id"])
        test_device_rear_port = netbox.dcim.DeviceRearPort("test",
            device_id=test.id,
            name="rear port 1",
            type="8p8c",
            positions=2,
            mark_connected=True)
        test_device_front_port = netbox.dcim.DeviceFrontPort("test",
            device_id=test.id,
            name="front port 1",
            type="8p8c",
            rear_port_id=test_device_rear_port.id,
            rear_port_position=2)
        ```

        :param str resource_name: The name of the resource.
        :param DeviceFrontPortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceFrontPortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color_hex: Optional[pulumi.Input[_builtins.str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
                 module_id: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rear_port_id: Optional[pulumi.Input[_builtins.int]] = None,
                 rear_port_position: Optional[pulumi.Input[_builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceFrontPortArgs.__new__(DeviceFrontPortArgs)

            __props__.__dict__["color_hex"] = color_hex
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["label"] = label
            __props__.__dict__["mark_connected"] = mark_connected
            __props__.__dict__["module_id"] = module_id
            __props__.__dict__["name"] = name
            if rear_port_id is None and not opts.urn:
                raise TypeError("Missing required property 'rear_port_id'")
            __props__.__dict__["rear_port_id"] = rear_port_id
            if rear_port_position is None and not opts.urn:
                raise TypeError("Missing required property 'rear_port_position'")
            __props__.__dict__["rear_port_position"] = rear_port_position
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["tags_alls"] = None
        super(DeviceFrontPort, __self__).__init__(
            'netbox:dcim/deviceFrontPort:DeviceFrontPort',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            color_hex: Optional[pulumi.Input[_builtins.str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.int]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            mark_connected: Optional[pulumi.Input[_builtins.bool]] = None,
            module_id: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rear_port_id: Optional[pulumi.Input[_builtins.int]] = None,
            rear_port_position: Optional[pulumi.Input[_builtins.int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'DeviceFrontPort':
        """
        Get an existing DeviceFrontPort resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] mark_connected: Defaults to `false`.
        :param pulumi.Input[_builtins.str] type: One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceFrontPortState.__new__(_DeviceFrontPortState)

        __props__.__dict__["color_hex"] = color_hex
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["label"] = label
        __props__.__dict__["mark_connected"] = mark_connected
        __props__.__dict__["module_id"] = module_id
        __props__.__dict__["name"] = name
        __props__.__dict__["rear_port_id"] = rear_port_id
        __props__.__dict__["rear_port_position"] = rear_port_position
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["type"] = type
        return DeviceFrontPort(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "color_hex")

    @_builtins.property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "custom_fields")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="markConnected")
    def mark_connected(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Defaults to `false`.
        """
        return pulumi.get(self, "mark_connected")

    @_builtins.property
    @pulumi.getter(name="moduleId")
    def module_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "module_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="rearPortId")
    def rear_port_id(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "rear_port_id")

    @_builtins.property
    @pulumi.getter(name="rearPortPosition")
    def rear_port_position(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "rear_port_position")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].
        """
        return pulumi.get(self, "type")

