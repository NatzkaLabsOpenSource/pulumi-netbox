# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeviceInterfaceArgs', 'DeviceInterface']

@pulumi.input_type
class DeviceInterfaceArgs:
    def __init__(__self__, *,
                 device_id: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mgmtonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 speed: Optional[pulumi.Input[_builtins.int]] = None,
                 tagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 untagged_vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        The set of arguments for constructing a DeviceInterface resource.
        :param pulumi.Input[_builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[_builtins.int] lag_device_interface_id: If this device is a member of a LAG group, you can reference the LAG interface here.
        :param pulumi.Input[_builtins.str] mode: Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        :param pulumi.Input[_builtins.int] parent_device_interface_id: The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if lag_device_interface_id is not None:
            pulumi.set(__self__, "lag_device_interface_id", lag_device_interface_id)
        if mgmtonly is not None:
            pulumi.set(__self__, "mgmtonly", mgmtonly)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_device_interface_id is not None:
            pulumi.set(__self__, "parent_device_interface_id", parent_device_interface_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if tagged_vlans is not None:
            pulumi.set(__self__, "tagged_vlans", tagged_vlans)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if untagged_vlan is not None:
            pulumi.set(__self__, "untagged_vlan", untagged_vlan)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="lagDeviceInterfaceId")
    def lag_device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        If this device is a member of a LAG group, you can reference the LAG interface here.
        """
        return pulumi.get(self, "lag_device_interface_id")

    @lag_device_interface_id.setter
    def lag_device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lag_device_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def mgmtonly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "mgmtonly")

    @mgmtonly.setter
    def mgmtonly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mgmtonly", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentDeviceInterfaceId")
    def parent_device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        return pulumi.get(self, "parent_device_interface_id")

    @parent_device_interface_id.setter
    def parent_device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "parent_device_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tagged_vlans")

    @tagged_vlans.setter
    def tagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tagged_vlans", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="untaggedVlan")
    def untagged_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "untagged_vlan")

    @untagged_vlan.setter
    def untagged_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "untagged_vlan", value)


@pulumi.input_type
class _DeviceInterfaceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mac_address: Optional[pulumi.Input[_builtins.str]] = None,
                 mac_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceInterfaceMacAddressArgs']]]] = None,
                 mgmtonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 speed: Optional[pulumi.Input[_builtins.int]] = None,
                 tagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 untagged_vlan: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering DeviceInterface resources.
        :param pulumi.Input[_builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[_builtins.int] lag_device_interface_id: If this device is a member of a LAG group, you can reference the LAG interface here.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address as string from the first MAC address assigned to this interface, if any.
        :param pulumi.Input[_builtins.str] mode: Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        :param pulumi.Input[_builtins.int] parent_device_interface_id: The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if lag_device_interface_id is not None:
            pulumi.set(__self__, "lag_device_interface_id", lag_device_interface_id)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if mac_addresses is not None:
            pulumi.set(__self__, "mac_addresses", mac_addresses)
        if mgmtonly is not None:
            pulumi.set(__self__, "mgmtonly", mgmtonly)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_device_interface_id is not None:
            pulumi.set(__self__, "parent_device_interface_id", parent_device_interface_id)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if tagged_vlans is not None:
            pulumi.set(__self__, "tagged_vlans", tagged_vlans)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tags_alls is not None:
            pulumi.set(__self__, "tags_alls", tags_alls)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if untagged_vlan is not None:
            pulumi.set(__self__, "untagged_vlan", untagged_vlan)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "device_id", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "label", value)

    @_builtins.property
    @pulumi.getter(name="lagDeviceInterfaceId")
    def lag_device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        If this device is a member of a LAG group, you can reference the LAG interface here.
        """
        return pulumi.get(self, "lag_device_interface_id")

    @lag_device_interface_id.setter
    def lag_device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "lag_device_interface_id", value)

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MAC address as string from the first MAC address assigned to this interface, if any.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mac_address", value)

    @_builtins.property
    @pulumi.getter(name="macAddresses")
    def mac_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeviceInterfaceMacAddressArgs']]]]:
        return pulumi.get(self, "mac_addresses")

    @mac_addresses.setter
    def mac_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeviceInterfaceMacAddressArgs']]]]):
        pulumi.set(self, "mac_addresses", value)

    @_builtins.property
    @pulumi.getter
    def mgmtonly(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "mgmtonly")

    @mgmtonly.setter
    def mgmtonly(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "mgmtonly", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "mtu", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="parentDeviceInterfaceId")
    def parent_device_interface_id(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        return pulumi.get(self, "parent_device_interface_id")

    @parent_device_interface_id.setter
    def parent_device_interface_id(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "parent_device_interface_id", value)

    @_builtins.property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "speed", value)

    @_builtins.property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "tagged_vlans")

    @tagged_vlans.setter
    def tagged_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "tagged_vlans", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags_alls")

    @tags_alls.setter
    def tags_alls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags_alls", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="untaggedVlan")
    def untagged_vlan(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "untagged_vlan")

    @untagged_vlan.setter
    def untagged_vlan(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "untagged_vlan", value)


@pulumi.type_token("netbox:dcim/deviceInterface:DeviceInterface")
class DeviceInterface(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mgmtonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 speed: Optional[pulumi.Input[_builtins.int]] = None,
                 tagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 untagged_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):

        > Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assumes a device with ID 123 exists
        test = netbox.dcim.DeviceInterface("test",
            name="testinterface",
            device_id=123,
            type="1000base-t")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[_builtins.int] lag_device_interface_id: If this device is a member of a LAG group, you can reference the LAG interface here.
        :param pulumi.Input[_builtins.str] mode: Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        :param pulumi.Input[_builtins.int] parent_device_interface_id: The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceInterfaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):

        > Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_netbox as netbox

        # Assumes a device with ID 123 exists
        test = netbox.dcim.DeviceInterface("test",
            name="testinterface",
            device_id=123,
            type="1000base-t")
        ```

        :param str resource_name: The name of the resource.
        :param DeviceInterfaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceInterfaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 device_id: Optional[pulumi.Input[_builtins.int]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 label: Optional[pulumi.Input[_builtins.str]] = None,
                 lag_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 mgmtonly: Optional[pulumi.Input[_builtins.bool]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 mtu: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 parent_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
                 speed: Optional[pulumi.Input[_builtins.int]] = None,
                 tagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 untagged_vlan: Optional[pulumi.Input[_builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceInterfaceArgs.__new__(DeviceInterfaceArgs)

            __props__.__dict__["description"] = description
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["label"] = label
            __props__.__dict__["lag_device_interface_id"] = lag_device_interface_id
            __props__.__dict__["mgmtonly"] = mgmtonly
            __props__.__dict__["mode"] = mode
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_device_interface_id"] = parent_device_interface_id
            __props__.__dict__["speed"] = speed
            __props__.__dict__["tagged_vlans"] = tagged_vlans
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["untagged_vlan"] = untagged_vlan
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["mac_addresses"] = None
            __props__.__dict__["tags_alls"] = None
        super(DeviceInterface, __self__).__init__(
            'netbox:dcim/deviceInterface:DeviceInterface',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            device_id: Optional[pulumi.Input[_builtins.int]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            label: Optional[pulumi.Input[_builtins.str]] = None,
            lag_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
            mac_address: Optional[pulumi.Input[_builtins.str]] = None,
            mac_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DeviceInterfaceMacAddressArgs', 'DeviceInterfaceMacAddressArgsDict']]]]] = None,
            mgmtonly: Optional[pulumi.Input[_builtins.bool]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            mtu: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            parent_device_interface_id: Optional[pulumi.Input[_builtins.int]] = None,
            speed: Optional[pulumi.Input[_builtins.int]] = None,
            tagged_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.int]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags_alls: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            untagged_vlan: Optional[pulumi.Input[_builtins.int]] = None) -> 'DeviceInterface':
        """
        Get an existing DeviceInterface resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Defaults to `true`.
        :param pulumi.Input[_builtins.int] lag_device_interface_id: If this device is a member of a LAG group, you can reference the LAG interface here.
        :param pulumi.Input[_builtins.str] mac_address: The MAC address as string from the first MAC address assigned to this interface, if any.
        :param pulumi.Input[_builtins.str] mode: Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        :param pulumi.Input[_builtins.int] parent_device_interface_id: The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceInterfaceState.__new__(_DeviceInterfaceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["device_id"] = device_id
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["label"] = label
        __props__.__dict__["lag_device_interface_id"] = lag_device_interface_id
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["mac_addresses"] = mac_addresses
        __props__.__dict__["mgmtonly"] = mgmtonly
        __props__.__dict__["mode"] = mode
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_device_interface_id"] = parent_device_interface_id
        __props__.__dict__["speed"] = speed
        __props__.__dict__["tagged_vlans"] = tagged_vlans
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tags_alls"] = tags_alls
        __props__.__dict__["type"] = type
        __props__.__dict__["untagged_vlan"] = untagged_vlan
        return DeviceInterface(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "device_id")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "label")

    @_builtins.property
    @pulumi.getter(name="lagDeviceInterfaceId")
    def lag_device_interface_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        If this device is a member of a LAG group, you can reference the LAG interface here.
        """
        return pulumi.get(self, "lag_device_interface_id")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[_builtins.str]:
        """
        The MAC address as string from the first MAC address assigned to this interface, if any.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="macAddresses")
    def mac_addresses(self) -> pulumi.Output[Sequence['outputs.DeviceInterfaceMacAddress']]:
        return pulumi.get(self, "mac_addresses")

    @_builtins.property
    @pulumi.getter
    def mgmtonly(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "mgmtonly")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Valid values are `access`, `tagged`, `tagged-all` and `q-in-q`.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "mtu")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="parentDeviceInterfaceId")
    def parent_device_interface_id(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.
        """
        return pulumi.get(self, "parent_device_interface_id")

    @_builtins.property
    @pulumi.getter
    def speed(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "speed")

    @_builtins.property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> pulumi.Output[Optional[Sequence[_builtins.int]]]:
        return pulumi.get(self, "tagged_vlans")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="tagsAlls")
    def tags_alls(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags_alls")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="untaggedVlan")
    def untagged_vlan(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "untagged_vlan")

